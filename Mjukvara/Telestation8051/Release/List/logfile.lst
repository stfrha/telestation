##############################################################################
#                                                                            #
# IAR 8051 C-Compiler V5.20A/386                                             #
# Front End V4.20N                                       19/Sep/104  17:59:49 #
# Global Optimizer V1.04E                                                    #
#                                                                            #
#       Target option =  8051                                                #
#       Memory model  =  large                                               #
#       Source file   =  logfile.c                                           #
#       List file     =  release\list\logfile.lst                            #
#       Object file   =  release\obj\logfile.r03                             #
#       Command line  =  LogFile.c -S -ml -v0 -e -K -u -s9 -RCODE -gA        #
#                        -IC:\IAR\EW\8051\inc\ -ORelease\Obj\                #
#                        -LRelease\List\ -q -i -t8 -x                        #
#                                                                            #
#                                             (c) Copyright IAR Systems 1996 #
##############################################################################

   \   0000                    NAME    logfile(18)
   \   0000                    RSEG    CODE(0)
   \   0000                    RSEG    CSTR(0)
   \   0000                    RSEG    X_UDATA(0)
   \   0000                    PUBLIC  BuildCallerList
   \   0000                    $DEFFN  BuildCallerList(0,0,9,0,32768,0,0,0),fopen,FindNextCall,ftell,
   \   0000                            ftell,fclose,myInt2DecStr,SendStringRS232,SendStringEOLRS232
   \   0000                    EXTERN  CreateDateString2
   \   0000                    $DEFFN  CreateDateString2(32768,0,6,0)
   \   0000                    PUBLIC  CreateLog
   \   0000                    $DEFFN  CreateLog(0,0,24,0,32768,0,0,0),SendStringEOLRS232,GetDateNow,
   \   0000                            CreateDateString2,GetTimeNow,CreateTimeString,SendStringEOLRS232,LogMessage,
   \   0000                            SendStringEOLRS232,LogMessage,SendStringEOLRS232,LogMessage,SendStringEOLRS232
   \   0000                    EXTERN  CreateTimeString
   \   0000                    $DEFFN  CreateTimeString(32768,0,6,0)
   \   0000                    EXTERN  DispInfoBox
   \   0000                    $DEFFN  DispInfoBox(32768,0,6,0)
   \   0000                    PUBLIC  FindCall
   \   0000                    $DEFFN  FindCall(0,0,2,0,32768,0,5,0),fSetPos
   \   0000                    PUBLIC  FindNextCall
   \   0000                    $DEFFN  FindNextCall(0,0,5,0,32768,0,3,0),fgetc,fgetc,fgetc,fgetc
   \   0000                    PUBLIC  GetCallInformation
   \   0000                    $DEFFN  GetCallInformation(0,0,13,0,32768,0,12,0),fgetc,SendStringEOLRS232,
   \   0000                            fgetc,fgetc,fgetc,fgetc,fgetc,myStrCmpNoCase,fgetc,fgetc,myStrCmpNoCase,
   \   0000                            fgetc,fgetc,myStrCmpNoCase,myStrCmpNoCase,fgetc
   \   0000                    EXTERN  GetDateNow
   \   0000                    $DEFFN  GetDateNow(32768,0,3,0)
   \   0000                    EXTERN  GetTimeNow
   \   0000                    $DEFFN  GetTimeNow(32768,0,3,0)
   \   0000                    PUBLIC  InitializeLogFile
   \   0000                    $DEFFN  InitializeLogFile(0,0,0,0,32768,0,0,0)
   \   0000                    PUBLIC  LogMessage
   \   0000                    $DEFFN  LogMessage(0,0,7,0,32768,0,6,0),fopenA,fputc,fputc,fputc,fputc,
   \   0000                            fputc,SendStringEOLRS232,ftell,SendStringEOLRS232,fclose
   \   0000                    EXTERN  PhoneInVolume
   \   0000                    $DEFFN  PhoneInVolume(32768,0,1,0)
   \   0000                    EXTERN  PlayFile
   \   0000                    $DEFFN  PlayFile(32768,0,3,0)
   \   0000                    PUBLIC  PlayNewMessages
   \   0000                    $DEFFN  PlayNewMessages(0,0,4,0,32768,0,0,0),PlayThisCall
   \   0000                    PUBLIC  PlayThisCall
   \   0000                    $DEFFN  PlayThisCall(0,0,44,0,32768,0,2,0),fopen,FindCall,fgetc,fgetc,
   \   0000                            fgetc,fgetc,fgetc,myStrCmpNoCase,fgetc,fgetc,DispInfoBox,SpeakerVolume,
   \   0000                            PhoneInVolume,PlayFile,SpeakerVolume,PhoneInVolume,myStrCmpNoCase,myStrCmpNoCase,
   \   0000                            fgetc,fclose
   \   0000                    EXTERN  SendStringEOLRS232
   \   0000                    $DEFFN  SendStringEOLRS232(32768,0,3,0)
   \   0000                    EXTERN  SendStringRS232
   \   0000                    $DEFFN  SendStringRS232(32768,0,3,0)
   \   0000                    EXTERN  SpeakerVolume
   \   0000                    $DEFFN  SpeakerVolume(32768,0,1,0)
   \   0000                    PUBLIC  callIndex
   \   0000                    EXTERN  fSetPos
   \   0000                    $DEFFN  fSetPos(32768,0,7,0)
   \   0000                    EXTERN  fclose
   \   0000                    $DEFFN  fclose(32768,0,3,0)
   \   0000                    EXTERN  fgetc
   \   0000                    $DEFFN  fgetc(32768,0,3,0)
   \   0000                    EXTERN  fopen
   \   0000                    $DEFFN  fopen(32768,0,6,0)
   \   0000                    EXTERN  fopenA
   \   0000                    $DEFFN  fopenA(32768,0,11,0)
   \   0000                    EXTERN  fputc
   \   0000                    $DEFFN  fputc(32768,0,4,0)
   \   0000                    EXTERN  ftell
   \   0000                    $DEFFN  ftell(32768,0,3,0)
   \   0000                    EXTERN  lastPlayed
   \   0000                    PUBLIC  logOffset
   \   0000                    EXTERN  msg
   \   0000                    EXTERN  myInt2DecStr
   \   0000                    $DEFFN  myInt2DecStr(32768,0,5,0)
   \   0000                    EXTERN  myStrCmpNoCase
   \   0000                    $DEFFN  myStrCmpNoCase(32768,0,6,0)
   \   0000                    EXTERN  numOfCalls
   \   0000                    EXTERN  receivedDTMF
   \   0000                    EXTERN  speakerVolume
   \   0000                    EXTERN  ?L_ADD_L01
   \   0000                    EXTERN  ?L_CMP_L01
   \   0000                    EXTERN  ?ST_AR5_R123_L17
   \   0000                    EXTERN  ?LD_A_R567_DISP_L17
   \   0000                    EXTERN  ?ST_A_R567_DISP_L17
   \   0000                    EXTERN  ?LD_R0123_R567_DISP_L17
   \   0000                    EXTERN  ?STO_R0123_DPTR_L20
   \   0000                    EXTERN  ?STO_R4567_DPTR_L20
   \   0000                    EXTERN  ?LD_R0123_XDPTR_L20
   \   0000                    EXTERN  ?CL8051L_5_20_L17
   \   0000                    RSEG    CODE
      1          /*************************************************************
      2          Fil:            $Id: LogFile.c,v 1.5 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Beskrivning:    Hanterar logfilen och därtill relaterade funktioner
      5          
      6          Skapad:         01-02-08
      7          
      8          Ändrad:         $Date: 2003/11/20 22:08:53 $
      9          
     10          Ägare:          Fredrik Hoffman
     11          
     12          
     13          Att göra:
     14          
     15          Revisionshistoria:
     16                                          $Log: LogFile.c,v $
     17                                          Revision 1.5  2003/11/20 22:08:53  Gemensam
     18                                          Various declarations changes.
     19                                          Still version 0200.
     20                                          
     21                                          Revision 1.4  2003/11/18 19:17:35  Gemensam
     22                                          Added menu option of setting speaker volume (untested)
     23                                          Completely changed header files
     24                                          Version 0200.
     25                                          
     26                                          Revision 1.3  2003/11/13 22:35:44  Gemensam
     27                                          Added watchdog reset at GotoLabel, FindLabel and InsertLabel.
     28                                          Added global variable to contain speaker volume, Default volume set to 50.
     29                                          Version 1.1
     30                                          
     31                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     32                                          Added header information
     33                                          
     34          
     35          *************************************************************/
     36                                  
     37          //////////////////////
     38          // Inkluderingar
     39          
     40          #include <io517a.h>
      1          /*                     - IO517A.H -
      2          
      3             Special header for the Siemens SAB 80C517A/83C517A-5 processors.
      4          
      5             Version 5.20 [IMAF]
      6          
      7          */
      8          
      9          #pragma language=extended
     10          
     11          /* Pre-defined SFR byte addresses: */
     12          
     13          /* CPU */
     14          sfr     ACC    = 0xE0;
     15          sfr     B      = 0xF0;
     16          sfr     SP     = 0x81;
     17          sfr     DPL    = 0x82;
     18          sfr     DPH    = 0x83;
     19          sfr     DPSEL  = 0x92;
     20          sfr     PSW    = 0xD0;
     21          sfr     XPAGE  = 0x91;
     22          sfr     SYSCON = 0xB1;
     23          
     24          /* Timer 0/Timer 1 */
     25          sfr     TCON   = 0x88;
     26          sfr     TMOD   = 0x89;
     27          sfr     TL0    = 0x8A;
     28          sfr     TL1    = 0x8B;
     29          sfr     TH0    = 0x8C;
     30          sfr     TH1    = 0x8D;
     31          
     32          /* CCU */
     33          sfr     CCEN   = 0xC1;
     34          sfr     CC4EN  = 0xC9;
     35          sfr     CCL1   = 0xC2;
     36          sfr     CCH1   = 0xC3;
     37          sfr     CCL2   = 0xC4;
     38          sfr     CCH2   = 0xC5;
     39          sfr     CCL3   = 0xC6;
     40          sfr     CCH3   = 0xC7;
     41          sfr     CCL4   = 0xCE;
     42          sfr     CCH4   = 0xCF;
     43          sfr     CMEN   = 0xF6;
     44          sfr     CML0   = 0xD2;
     45          sfr     CMH0   = 0xD3;
     46          sfr     CML1   = 0xD4;
     47          sfr     CMH1   = 0xD5;
     48          sfr     CML2   = 0xD6;
     49          sfr     CMH2   = 0xD7;
     50          sfr     CML3   = 0xE2;
     51          sfr     CMH3   = 0xE3;
     52          sfr     CML4   = 0xE4;
     53          sfr     CMH4   = 0xE5;
     54          sfr     CML5   = 0xE6;
     55          sfr     CMH5   = 0xE7;
     56          sfr     CML6   = 0xF2;
     57          sfr     CMH6   = 0xF3;
     58          sfr     CML7   = 0xF4;
     59          sfr     CMH7   = 0xF5;
     60          sfr     CMSEL  = 0xF7;
     61          sfr     CRCL   = 0xCA;
     62          sfr     CRCH   = 0xCB;
     63          sfr     CTCON  = 0xE1;
     64          sfr     CTRELL = 0xDE;
     65          sfr     CTRELH = 0xDF;
     66          sfr     TL2    = 0xCC;
     67          sfr     TH2    = 0xCD;
     68          sfr     T2CON  = 0xC8;
     69          sfr     COMSETL= 0xA1;
     70          sfr     COMSETH= 0xA2;
     71          sfr     COMCLRL= 0xA3;
     72          sfr     COMCLRH= 0xA4;
     73          sfr     SETMSK = 0xA5;
     74          sfr     CLRMSK = 0xA6;
     75          
     76          /* Ports */
     77          sfr     P0     = 0x80;
     78          sfr     P1     = 0x90;
     79          sfr     P2     = 0xA0;
     80          sfr     P3     = 0xB0;
     81          sfr     P4     = 0xE8;
     82          sfr     P5     = 0xF8;
     83          sfr     P6     = 0xFA;
     84          sfr     P7     = 0xDB;        /* Analog/Digital Input */
     85          sfr     P8     = 0xDD;        /* Analog/Digital Input, 4 Bit */
     86          
     87          /* Serial Channels */
     88          sfr     PCON   = 0x87;
     89          sfr     S0CON  = 0x98;
     90          sfr     S0BUF  = 0x99;
     91          sfr     S1CON  = 0x9B;
     92          sfr     S1BUF  = 0x9C;
     93          sfr     S0RELL = 0xAA;
     94          sfr     S0RELH = 0xBA;
     95          sfr     S1RELL = 0x9D;
     96          sfr     S1RELH = 0xBB;
     97          
     98          /* A/D Converter */
     99          sfr     ADCON0 = 0xD8;
    100          sfr     ADCON1 = 0xDC;
    101          sfr     ADDATH = 0xD9;
    102          sfr     ADDATL = 0xDA;
    103          
    104          /* MUL/DIV Unit */
    105          sfr     ARCON  = 0xEF;
    106          sfr     MD0    = 0xE9;
    107          sfr     MD1    = 0xEA;
    108          sfr     MD2    = 0xEB;
    109          sfr     MD3    = 0xEC;
    110          sfr     MD4    = 0xED;
    111          sfr     MD5    = 0xEE;
    112          
    113          /* Interrupt System */
    114          sfr     IEN0   = 0xA8;
    115          sfr     IP0    = 0xA9;
    116          sfr     IEN1   = 0xB8;
    117          sfr     IP1    = 0xB9;
    118          sfr     IEN2   = 0x9A;
    119          sfr     IRCON0 = 0xC0;
    120          sfr     IRCON1 = 0xD1;
    121          
    122          
    123          /* Watchdog */
    124          sfr     WDTREL = 0x86;
    125          
    126          
    127          /* Pre-defined SFR bit addresses */
    128          
    129          /*========ADCON0=======*/
    130          
    131          bit     BD     = 0xDF;
    132          bit     CLK    = 0xDE;
    133          bit     ADEX   = 0xDD;
    134          bit     BSY    = 0xDC;
    135          bit     ADM    = 0xDB;
    136          bit     MX2    = 0xDA;
    137          bit     MX1    = 0xD9;
    138          bit     MX0    = 0xD8;
    139          
    140          
    141          /*========IRCON0=======*/
    142          
    143          bit     EXF2   = 0xC7;
    144          bit     TF2    = 0xC6;
    145          bit     IEX6   = 0xC5;
    146          bit     IEX5   = 0xC4;
    147          bit     IEX4   = 0xC3;
    148          bit     IEX3   = 0xC2;
    149          bit     IEX2   = 0xC1;
    150          bit     IADC   = 0xC0;
    151          
    152          /*========T2CON=======*/
    153          
    154          bit     T2PS   = 0xCF;
    155          bit     I3FR   = 0xCE;
    156          bit     I2FR   = 0xCD;
    157          bit     T2R1   = 0xCC;
    158          bit     T2R0   = 0xCB;
    159          bit     T2CM   = 0xCA;
    160          bit     T2I1   = 0xC9;
    161          bit     T2I0   = 0xC8;
    162          
    163          /*========PSW=========*/
    164          
    165          bit     CY     = 0xD7;
    166          bit     AC     = 0xD6;
    167          bit     F0     = 0xD5;
    168          bit     RS1    = 0xD4;
    169          bit     RS0    = 0xD3;
    170          bit     OV     = 0xD2;
    171          bit     F1     = 0xD1;
    172          bit     P      = 0xD0;
    173          
    174          /*========TCON========*/
    175          
    176          bit     TF1    = 0x8F;
    177          bit     TR1    = 0x8E;
    178          bit     TF0    = 0x8D;
    179          bit     TR0    = 0x8C;
    180          bit     IE1    = 0x8B;
    181          bit     IT1    = 0x8A;
    182          bit     IE0    = 0x89;
    183          bit     IT0    = 0x88;
    184          
    185          /*========IEN0========*/
    186          
    187          bit     EAL    = 0xAF;
    188          bit     WDT    = 0xAE;
    189          bit     ET2    = 0xAD;
    190          bit     ES0    = 0xAC;
    191          bit     ET1    = 0xAB;
    192          bit     EX1    = 0xAA;
    193          bit     ET0    = 0xA9;
    194          bit     EX0    = 0xA8;
    195          
    196          /*========IEN1========*/
    197          
    198          bit     EXEN2  = 0xBF;
    199          bit     SWDT   = 0xBE;
    200          bit     EX6    = 0xBD;
    201          bit     EX5    = 0xBC;
    202          bit     EX4    = 0xBB;
    203          bit     EX3    = 0xBA;
    204          bit     EX2    = 0xB9;
    205          bit     EADC   = 0xB8;
    206          
    207          /*========P3=========*/
    208          
    209          bit     RD     = 0xB7;
    210          bit     WR     = 0xB6;
    211          bit     T1     = 0xB5;
    212          bit     T0     = 0xB4;
    213          bit     INT1   = 0xB3;
    214          bit     INT0   = 0xB2;
    215          bit     TXD    = 0xB1;
    216          bit     RXD    = 0xB0;
    217          
    218          /*========S0CON========*/
    219          
    220          bit     SM0    = 0x9F;
    221          bit     SM1    = 0x9E;
    222          bit     SM20   = 0x9D;
    223          bit     REN0   = 0x9C;
    224          bit     TB80   = 0x9B;
    225          bit     RB80   = 0x9A;
    226          bit     TI0    = 0x99;
    227          bit     RI0    = 0x98;
    228          
    229          
    230          /* Interrupt Vector Definitions */
    231          
    232          interrupt [0x03] void EX0_int (void);     /* External Interrupt 0 */
    233          
    234          interrupt [0x0B] void T0_int (void);      /* Timer 0 Overflow */
    235          
    236          interrupt [0x13] void EX1_int (void);     /* External Interrupt 1 */
    237          
    238          interrupt [0x1B] void T1_int (void);      /* Timer 1 Overflow */
    239          
    240          interrupt [0x23] void SCON0_int (void);   /* Serial Port 0 */
    241          
    242          interrupt [0x2B] void T2_int (void);      /* Timer 2 Overflow */
    243          
    244          interrupt [0x2B] void T2EX_int (void);    /* Negative Transition on T2EX */
    245          
    246          interrupt [0x43] void ADC_int (void);     /* ADC Interrupt */
    247          
    248          interrupt [0x4B] void EX2_int (void);     /* External Interrupt 2 */
    249          
    250          interrupt [0x53] void EX3_int (void);     /* External Interrupt 3 */
    251          
    252          interrupt [0x5B] void EX4_int (void);     /* External Interrupt 4 */
    253          
    254          interrupt [0x63] void EX5_int (void);     /* External Interrupt 5 */
    255          
    256          interrupt [0x6B] void EX6_int (void);     /* External Interrupt 6 */
    257          
    258          interrupt [0x83] void SCON1_int (void);   /* Serial Port 1 */
    259          
    260          interrupt [0x93] void ICMP_int (void);    /* Compare match interrupt */
    261          
    262          interrupt [0x9B] void CT_int (void);      /* Compare Timer Overflow */
    263          
    264          interrupt [0xA3] void ICS_int (void);     /* COMSET interrupt */
    265          
    266          interrupt [0xAB] void ICR_int (void);     /* COMCLR interrupt */
    267          
    268          
     41          #include <stdio.h>
      1          /*                      - STDIO.H -
      2          
      3             Subset of ANSI standard I/O function declarations.
      4          
      5             Version: 3.30 04/Nov/94 IHAW
      6          
      7          
      8          */
      9          
     10          #ifndef _STDIO_INCLUDED
     11          #define _STDIO_INCLUDED
     12          
     13          #ifndef NULL
     14          #define NULL    (void *) 0
     15          #endif
     16          
     17          #ifndef EOF
     18          #define EOF     (-1)
     19          #endif
     20          
     21          #ifndef size_t
     22          #if     sizeof((char*)0 - (char*)0) <= sizeof(int)
     23          #define size_t  unsigned int
     24          #else
     25          #define size_t  unsigned long 
     26          #endif
     27          #endif
     28          
     29          /* ===
     30          
     31          #if __TID__ & 0x8000
     32          #pragma function=intrinsic(0)
     33          #endif
     34          
     35          === */
     36          
     37          #ifndef MEMORY_ATTRIBUTE
     38          #define MEMORY_ATTRIBUTE
     39          #endif
     40          
     41          MEMORY_ATTRIBUTE int    puts(const char *__s);
     42          MEMORY_ATTRIBUTE int    putchar(int __value);
     43          MEMORY_ATTRIBUTE int    getchar(void);
     44          MEMORY_ATTRIBUTE int    sprintf(char *__s,const char *__format,...);
     45          MEMORY_ATTRIBUTE int    printf(const char *__format,...);
     46          MEMORY_ATTRIBUTE int    scanf(const char *__format,...);
     47          MEMORY_ATTRIBUTE int    sscanf(const char *__s, const char *__format,...);
     48          MEMORY_ATTRIBUTE char   *gets(char *__s);
     49          
     50          #if __TID__ & 0x8000
     51          #pragma function=default
     52          #endif
     53          
     54          #endif
     55          
     56          
     57          
     42          #include <stdlib.h>
      1          /*                      - STDLIB.H -
      2          
      3             The ANSI-defined 'standard' functions.
      4          
      5             Version: 3.30 04/Nov/94 IHAW
      6          
      7          $Name: V3_33B $
      8          $Log: stdlib.h $
      9          Revision 1.3  1996/06/07 07:11:26  matsp
     10          
     11          Revision 1.2  1996/01/26 16:13:20  matsp
     12          A lot. Converted to Source Integrity
     13          Revision 1.2  1996/01/26 17:13:18  MATSP
     14          Revision 1.4  1996/01/26 16:07:29  MATSP
     15          Revision 1.3  1995/12/04 09:04:11  MATSP
     16          RAND_MAX changed from 32768 to 32767.
     17          */
     18          
     19          #ifndef _STDLIB_INCLUDED
     20          #define _STDLIB_INCLUDED
     21          
     22          #ifndef size_t
     23          #if sizeof((char *)0 - (char *)0) <= sizeof(int)
     24          #define size_t          unsigned int
     25          #else
     26          #define size_t          unsigned long
     27          #endif
     28          #endif
     29          
     30          #ifndef NULL
     31          #define NULL    (void*) 0 
     32          #endif
     33          
     34          typedef struct
     35                  {
     36                    int   quot;
     37                    int   rem;
     38                  } div_t;
     39          
     40          typedef struct
     41                  {
     42                    long int      quot;
     43                    long int      rem;
     44                  } ldiv_t;
     45          
     46          
     47          #define RAND_MAX        32767
     48          
     49          #define EXIT_SUCCESS    0
     50          #define EXIT_FAILURE    1
     51          
     52          #define MB_CUR_MAX      1
     53          
     54          #if __TID__ & 0x8000
     55          #pragma function=intrinsic(0)
     56          #endif
     57          
     58          #ifndef MEMORY_ATTRIBUTE
     59          #define MEMORY_ATTRIBUTE
     60          #endif
     61          
     62          #ifndef PTR_ATTRIBUTE
     63          #define PTR_ATTRIBUTE
     64          #endif
     65          
     66          MEMORY_ATTRIBUTE void   *malloc(size_t __size);
     67          
     68          MEMORY_ATTRIBUTE void   free(void *__ptr);
     69          
     70          MEMORY_ATTRIBUTE void   exit(int __status);
     71          
     72          MEMORY_ATTRIBUTE void   *calloc(unsigned int __nelem, size_t __elsize);
     73          
     74          MEMORY_ATTRIBUTE void   *realloc(void *__ptr, size_t __size);
     75          
     76          MEMORY_ATTRIBUTE int atoi (const char *__nptr);
     77          
     78          MEMORY_ATTRIBUTE long atol (const char *__nptr);
     79          
     80          MEMORY_ATTRIBUTE double atof (const char *__nptr);
     81          
     82          MEMORY_ATTRIBUTE double strtod(const char *__nptr, char **__endptr);
     83          
     84          MEMORY_ATTRIBUTE long int strtol(const char *__nptr, char **__endptr, int __base);
     85          
     86          MEMORY_ATTRIBUTE unsigned long int strtoul(const char *__nptr, char **__endptr, int __base);
     87          
     88          MEMORY_ATTRIBUTE int rand(void);
     89          
     90          MEMORY_ATTRIBUTE void srand(unsigned int __seed);
     91          
     92          MEMORY_ATTRIBUTE void abort(void);
     93          
     94          MEMORY_ATTRIBUTE int abs(int __j);
     95          
     96          MEMORY_ATTRIBUTE div_t div(int __numer, int __denom);
     97          
     98          MEMORY_ATTRIBUTE long int labs(long int __j);
     99          
    100          MEMORY_ATTRIBUTE ldiv_t ldiv(long int __numer, long int __denom);
    101          
    102          MEMORY_ATTRIBUTE void *bsearch(const void *__key, const void *__base,
    103                                  size_t __nmemb, size_t __size,
    104                                  int (*__compar) (const void *, const void *));
    105          
    106          MEMORY_ATTRIBUTE void qsort(void *__base, size_t __nmemb, size_t __size,
    107                                  int (*__compar) (const void *, const void *));
    108          
    109          #if __TID__ & 0x8000
    110          #pragma function=default
    111          #endif
    112          
    113          #endif
    114          
     43          #include <string.h>
      1          /*                       - STRING.H -
      2          
      3             The ANSI 'string' function declarations.
      4                     
      5             Version: 3.30 04/Nov/94 IHAW
      6                             
      7          */
      8          
      9          #ifndef _STRING_INCLUDED
     10          #define _STRING_INCLUDED
     11          
     12          #ifndef NULL
     13          #define NULL    (void*)0     /* changed from char* 93.01.21 ICLM */
     14          #endif
     15          
     16          #ifndef size_t
     17          #if sizeof((char *)0 - (char *)0) <= sizeof(int)
     18          #define size_t          unsigned int
     19          #else
     20          #define size_t          unsigned long
     21          #endif
     22          #endif
     23          
     24          #if __TID__ & 0x8000
     25          #pragma function=intrinsic(0)
     26          #endif
     27          
     28          #ifndef MEMORY_ATTRIBUTE
     29          #define MEMORY_ATTRIBUTE
     30          #endif
     31          
     32          MEMORY_ATTRIBUTE void *memcpy(void *s1, const void *s2, size_t n);
     33          
     34          MEMORY_ATTRIBUTE void *memmove(void *s1, const void *s2, size_t n);
     35          
     36          MEMORY_ATTRIBUTE void *memchr(const void *s, int c, size_t n);
     37          
     38          MEMORY_ATTRIBUTE void *memset(void *s, int c, size_t n);
     39          
     40          MEMORY_ATTRIBUTE int memcmp(const void *s1, const void *s2, size_t n);
     41          
     42          MEMORY_ATTRIBUTE char *strchr(const char *s, int c);
     43          
     44          MEMORY_ATTRIBUTE int strcmp(const char *s1, const char *s2);
     45          
     46          MEMORY_ATTRIBUTE int strncmp(const char *s1, const char *s2, size_t n);
     47          
     48          MEMORY_ATTRIBUTE int strcoll(const char *s1, const char *s2);
     49          
     50          MEMORY_ATTRIBUTE size_t strlen(const char *s);
     51          
     52          MEMORY_ATTRIBUTE size_t strcspn(const char *s1, const char *s2);
     53          
     54          MEMORY_ATTRIBUTE size_t strspn(const char *s1, const char *s2);
     55          
     56          MEMORY_ATTRIBUTE char *strpbrk(const char *s1, const char *s2);
     57          
     58          MEMORY_ATTRIBUTE char *strrchr(const char *s, int c);
     59          
     60          MEMORY_ATTRIBUTE char *strstr(const char *s1, const char *s2);
     61          
     62          MEMORY_ATTRIBUTE char *strcat(char *s1, const char *s2);
     63          
     64          MEMORY_ATTRIBUTE char *strncat(char *s1, const char *s2, size_t n);
     65          
     66          MEMORY_ATTRIBUTE char *strcpy(char *s1, const char *s2);
     67          
     68          MEMORY_ATTRIBUTE char *strncpy(char *s1, const char *s2, size_t n);
     69          
     70          MEMORY_ATTRIBUTE char *strerror(int errnum);
     71          
     72          MEMORY_ATTRIBUTE char *strtok(char *s1, const char *s2);
     73          
     74          MEMORY_ATTRIBUTE size_t strxfrm(char *s1, const char *s2, size_t n);
     75          
     76          #if __TID__ & 0x8000
     77          #pragma function=default
     78          #endif
     79          
     80          #endif
     81          
     82          
     44          #include "LogFile.h"
      1          /********************************************************
      2          Fil:            $Id: LogFile.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Revisionshistoria:
      7                                          $Log: LogFile.h,v $
      8                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          
     18          
     19          ********************************************************/
     20          
     21          #ifndef _LOGFILE_INCLUDED_
     22          #define _LOGFILE_INCLUDED_
     23          
     24          #include "FileSystem.h"
      1          /**************************************************************************************
      2          Fil:            $Id: FileSystem.h,v 1.4 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Kommentarer:    Filhuvudet befinner sig i "Spare" arean tillhörande filens första sida. Huvudet består 
      7                                          av 16 bytes enligt följande lista:
      8                                          0       Huvud       0xAA = Legalt filhuvud, annat tillsvidare odefinierat
      9                                          1-4     Fillängd    Pos 1 = MSB, pos 4 = LSB
     10                                          5-12    Filtitel    Enl "Titel.ext". Om titeln är mindre än 8 tecken avslutas det med nollor
     11                                          13-15   Filext      Enl "Titel.ext". Om ext är mindre än 3 tecken avslutas det med nollor
     12          
     13                                          En nolla skriven i fileName[0] indikerar att
     14                                          filstrukturen är ledig.
     15                  
     16          Revisionshistoria:
     17                                          $Log: FileSystem.h,v $
     18                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     19                                          Various declarations changes.
     20                                          Still version 0200.
     21                                          
     22                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     23                                          Added menu option of setting speaker volume (untested)
     24                                          Completely changed header files
     25                                          Version 0200.
     26                                          
     27                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     28                                          Added header information
     29                                          
     30          
     31          **************************************************************************************/
     32          
     33          #ifndef _FILESYSTEM_INCLUDED_
     34          #define _FILESYSTEM_INCLUDED_
     35          
     36          ///////////////////////////////////
     37          // Definitioner
     38          
     39          #define FS_MAXFILES         8 
     40          #define FS_FILENAMELENGTH   13
     41          #define FS_FLASHSIZE        0x800000
     42          
     43          #define OFF            0
     44          #define READY        1
     45          #define NEMPTY        2
     46          #define WRITING        3
     47          #define OCCUPIED    4
     48          
     49          #define CLE     P4.0                                //Command Latch Enable
     50          #define ALE     P4.1                                //Address Latch Enable
     51          #define WP      P4.2                                //Write Protect
     52          #define SE      P4.3                                //Spare Enable
     53          //#define CE      P4.4                                //Chip Enable
     54          #define FBUSY   P4.5                                //Busy
     55          
     56          #define FREG (*(unsigned char xdata *) 0xE000)
     57          #define FLASH (*(unsigned char xdata *) 0xB000) 
     58          
     59          ///////////////////////////////////
     60          // Strukturer
     61          
     62          struct ST_FILE_HEAD {
     63              unsigned long   length;
     64              char            name[FS_FILENAMELENGTH];
     65          };
     66          #define FILE_HEAD struct ST_FILE_HEAD
     67          
     68          
     69          struct ST_FILE {
     70              char            fileName[FS_FILENAMELENGTH];
     71              unsigned long   startAddress;
     72              unsigned long   length; 
     73              unsigned long   offset; 
     74              char            write;
     75              char            append;
     76          };
     77          #define FILE struct ST_FILE 
     78          
     79          
     80          
     81          ///////////////////////////////////
     82          // Funktioner och procedurer
     83          
     84          extern void            InitializeFileSystem( void );
     85          extern void            InitializeFlash( void );
     86          extern void            SetupReadSeq( void );
     87          extern unsigned char   ReadFLASH( void );
     88          extern void            TerminateReadSeq( void );
     89          extern void            GetDeviceIDRS232(void);
     90          extern void            SetupWriteSeq( void );
     91          extern void            WriteFLASH(unsigned char);
     92          extern void            TerminateWriteSeq( void );
     93          extern void            PerformWriteSeq( void );
     94          extern void            EraseBlock( void );
     95          extern void            WriteFileHead(const char* name, long size);
     96          extern FILE*           fopen(const char* name, const char* def);
     97          extern FILE*               fopenA(const char* name, long maxSize, long offset);
     98          extern void            fputc(FILE* filePtr, char c);
     99          extern void            fputLine(FILE* filePtr, const char* str);
    100          extern void            fupLoad( void );
    101          extern int             fgetc(FILE* filePtr);
    102          extern void            fgetLine(FILE* filePtr, char* str, int maxLen);
    103          extern void            fdownLoad( void );
    104          extern void            fclose(FILE* filePtr);
    105          extern long            ftell(FILE* filePtr);
    106          //void            Rewind(FILE* filePtr);
    107          extern void            fSetPos(FILE* filePtr, long offset);
    108          extern void            ReleaseCurrFile( void );
    109          extern void            EraseAll( void );
    110          extern void            StartDynamic( void );
    111          extern void            EraseDynamic( void );
    112          extern char                        MemUsage( void );
    113          extern void                        Dir( void );
    114          extern void                        Type( void );
    115          extern void                        TypeA( void );
    116          
    117          #endif
     25          
     26          ///////////////////////////////////
     27          // Definitioner
     28          
     29          #define MS_LOG          0x01
     30          #define MS_MENU         0x02
     31          #define MS_TIMEDATE     0x03
     32          #define MS_ERASEQST     0x04
     33          
     34          ///////////////////////////////////
     35          // Strukturer
     36          
     37          
     38          ///////////////////////////////////
     39          // Funktioner och procedurer
     40          
     41          extern void    InitializeLogFile( void );
     42          extern void    CreateLog( void );
     43          extern void    LogMessage(const char* str1, const char* str2);
     44          extern char    BuildCallerList( void );
     45          extern char    FindCall(FILE* fp, int index);
     46          extern char    FindNextCall(FILE* fp);
     47          extern void    GetCallInformation(FILE* fp, char* phoneNumber, char* time, int* noOfMessages);
     48          extern char    PlayThisCall(int callIndex);
     49          extern void    PlayNewMessages( void );
     50          
     51          #endif
     45          #include "calender.h"
      1          /********************************************************
      2          Fil:            $Id: Calender.h,v 1.4 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:52 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Calender.h,v $
      8                                          Revision 1.4  2003/11/20 22:08:52  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.3  2003/11/18 19:17:35  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     18                                          Added header information
     19                                          
     20          
     21          ********************************************************/
     22          
     23          #ifndef _CALENDER_INCLUDED_
     24          #define _CALENDER_INCLUDED_
     25          
     26          ///////////////////////////////////
     27          // Definitioner
     28          
     29          // Non-volatile variabler:
     30          #define NV_ANSWERING_ON 0x08
     31          #define NV_NUM_SIGNALS  0x09
     32          #define NV_PLAYED_MS    0x0A
     33          #define NV_PLAYED_LS    0x0B
     34          #define NV_SPEAKER_VOL  0x0C
     35          //Max adress är 0x3F
     36          
     37          #define SDA    P3.0
     38          #define SCL    P3.1
     39          //#define SDA    P1.5
     40          //#define SCL    P1.6
     41          
     42          
     43          ///////////////////////////////////
     44          // Strukturer
     45          
     46          struct ST_TIME {
     47              char    seconds;
     48              char    minutes;
     49              char    hours;
     50          };
     51          #define TIME struct ST_TIME
     52          
     53          
     54          struct ST_DATE {
     55              char    day;
     56              char    date;
     57              char    month;
     58              char    year;
     59          };
     60          #define DATE struct ST_DATE
     61          
     62          ///////////////////////////////////
     63          // Funktioner och procedurer
     64          
     65          extern void    InitializeCalender( void );
     66          extern char    WOCB(char dat);
     67          extern char    ROCB(char ack);
     68          extern char    WriteCalenderByte(char address, char dat);
     69          extern char    ReadCalenderByte(char address, char* dat);
     70          extern void    GetTimeNow(TIME* tptr);
     71          extern void    GetDateNow(DATE* tptr);
     72          extern void    CreateTimeString(TIME* tptr, char* str);
     73          extern void    CreateDateString(DATE* tptr, char* str);
     74          extern void    CreateDateString2(DATE* tptr, char* str);
     75           
     76          
     77          ///////////////////////////
     78          // Variabler
     79          
     80          
     81          
     82          
     83           
     84          #endif
     46          #include "main.h"
      1          /*************************************************************
      2          Fil:            $Id: Main.h,v 1.10 2003/12/26 16:17:01 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/12/26 16:17:01 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Main.h,v $
      8                                          Revision 1.10  2003/12/26 16:17:01  Gemensam
      9                                          Reinstate 500 ms wait for hang up detection to settle (if not PPD is used).
     10                                          Fixed PPD detection by decreasing phone volume from 63 to 15.
     11                                          Version 0304.
     12                                          
     13                                          Revision 1.9  2003/12/09 20:52:49  Gemensam
     14                                          Commented out PPD detection since the HW not work yet.
     15                                          Ver 0302.
     16                                          
     17                                          Revision 1.8  2003/11/29 22:35:59  Gemensam
     18                                          Fixed problem with to short pulse width on PPD.
     19                                          Ver 0302.
     20                                          
     21                                          Revision 1.7  2003/11/24 22:44:36  Gemensam
     22                                          Fixed PPD, not working yet,
     23                                          New command: speaker volume.
     24                                          Version 0301.
     25                                          
     26                                          Revision 1.6  2003/11/23 21:40:03  Gemensam
     27                                          Parallell phone detection included.
     28                                          Removed obsolete #define's regarding LCD interface.
     29                                          Ver 0300
     30                                          
     31                                          Revision 1.5  2003/11/23 20:29:34  Gemensam
     32                                          Complete and tested volume setting in options menu.
     33                                          Ver 0201
     34                                          
     35                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     36                                          Various declarations changes.
     37                                          Still version 0200.
     38                                          
     39                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     40                                          Added menu option of setting speaker volume (untested)
     41                                          Completely changed header files
     42                                          Version 0200.
     43                                          
     44                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     45                                          Added header information
     46                                          
     47          *************************************************************/
     48          
     49          #ifndef _MAIN_INCLUDED_
     50          #define _MAIN_INCLUDED_
     51          
     52          #include "FileSystem.h"
      1          /**************************************************************************************
      2          Fil:            $Id: FileSystem.h,v 1.4 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Kommentarer:    Filhuvudet befinner sig i "Spare" arean tillhörande filens första sida. Huvudet består 
      7                                          av 16 bytes enligt följande lista:
      8                                          0       Huvud       0xAA = Legalt filhuvud, annat tillsvidare odefinierat
      9                                          1-4     Fillängd    Pos 1 = MSB, pos 4 = LSB
     10                                          5-12    Filtitel    Enl "Titel.ext". Om titeln är mindre än 8 tecken avslutas det med nollor
     11                                          13-15   Filext      Enl "Titel.ext". Om ext är mindre än 3 tecken avslutas det med nollor
     12          
     13                                          En nolla skriven i fileName[0] indikerar att
     14                                          filstrukturen är ledig.
     15                  
     16          Revisionshistoria:
     17                                          $Log: FileSystem.h,v $
     18                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     19                                          Various declarations changes.
     20                                          Still version 0200.
     21                                          
     22                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     23                                          Added menu option of setting speaker volume (untested)
     24                                          Completely changed header files
     25                                          Version 0200.
     26                                          
     27                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     28                                          Added header information
     29                                          
     30          
     31          **************************************************************************************/
     32          
     33          #ifndef _FILESYSTEM_INCLUDED_
     34          #define _FILESYSTEM_INCLUDED_
     35          
     36          ///////////////////////////////////
     37          // Definitioner
     38          
     39          #define FS_MAXFILES         8 
     40          #define FS_FILENAMELENGTH   13
     41          #define FS_FLASHSIZE        0x800000
     42          
     43          #define OFF            0
     44          #define READY        1
     45          #define NEMPTY        2
     46          #define WRITING        3
     47          #define OCCUPIED    4
     48          
     49          #define CLE     P4.0                                //Command Latch Enable
     50          #define ALE     P4.1                                //Address Latch Enable
     51          #define WP      P4.2                                //Write Protect
     52          #define SE      P4.3                                //Spare Enable
     53          //#define CE      P4.4                                //Chip Enable
     54          #define FBUSY   P4.5                                //Busy
     55          
     56          #define FREG (*(unsigned char xdata *) 0xE000)
     57          #define FLASH (*(unsigned char xdata *) 0xB000) 
     58          
     59          ///////////////////////////////////
     60          // Strukturer
     61          
     62          struct ST_FILE_HEAD {
     63              unsigned long   length;
     64              char            name[FS_FILENAMELENGTH];
     65          };
     66          #define FILE_HEAD struct ST_FILE_HEAD
     67          
     68          
     69          struct ST_FILE {
     70              char            fileName[FS_FILENAMELENGTH];
     71              unsigned long   startAddress;
     72              unsigned long   length; 
     73              unsigned long   offset; 
     74              char            write;
     75              char            append;
     76          };
     77          #define FILE struct ST_FILE 
     78          
     79          
     80          
     81          ///////////////////////////////////
     82          // Funktioner och procedurer
     83          
     84          extern void            InitializeFileSystem( void );
     85          extern void            InitializeFlash( void );
     86          extern void            SetupReadSeq( void );
     87          extern unsigned char   ReadFLASH( void );
     88          extern void            TerminateReadSeq( void );
     89          extern void            GetDeviceIDRS232(void);
     90          extern void            SetupWriteSeq( void );
     91          extern void            WriteFLASH(unsigned char);
     92          extern void            TerminateWriteSeq( void );
     93          extern void            PerformWriteSeq( void );
     94          extern void            EraseBlock( void );
     95          extern void            WriteFileHead(const char* name, long size);
     96          extern FILE*           fopen(const char* name, const char* def);
     97          extern FILE*               fopenA(const char* name, long maxSize, long offset);
     98          extern void            fputc(FILE* filePtr, char c);
     99          extern void            fputLine(FILE* filePtr, const char* str);
    100          extern void            fupLoad( void );
    101          extern int             fgetc(FILE* filePtr);
    102          extern void            fgetLine(FILE* filePtr, char* str, int maxLen);
    103          extern void            fdownLoad( void );
    104          extern void            fclose(FILE* filePtr);
    105          extern long            ftell(FILE* filePtr);
    106          //void            Rewind(FILE* filePtr);
    107          extern void            fSetPos(FILE* filePtr, long offset);
    108          extern void            ReleaseCurrFile( void );
    109          extern void            EraseAll( void );
    110          extern void            StartDynamic( void );
    111          extern void            EraseDynamic( void );
    112          extern char                        MemUsage( void );
    113          extern void                        Dir( void );
    114          extern void                        Type( void );
    115          extern void                        TypeA( void );
    116          
    117          #endif
     53          
     54          
     55          ///////////////////////////////////
     56          // Definitioner
     57          
     58          #define VERSION_MENU_STRING     "Telestation 3.5       (c) 2004-09-19 FRHA"
     59          
     60          #define CM_PARSIZE              24
     61          #define CM_NRPAR                16
     62          
     63          #define MAX_LABEL_LEN   8
     64          #define MAX_LABELS      64
     65          
     66          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     67          /*
     68          #define MAX_BATFILES    8
     69          */
     70          
     71          ///////////////////////////////////
     72          // Strukturer
     73          
     74          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     75          /*
     76          struct ST_Label {
     77              char    name[MAX_LABEL_LEN];
     78              long    pos;
     79          };
     80          #define Label struct ST_Label
     81           
     82          struct ST_BatFileObj {
     83              FILE*       fp;                 //Filpekare till bat-filen
     84              Label*      labels;             //Pekare till lista med ingående labels
     85              char        labelIndex;         //Pekar på nästa lediga label
     86              BatFileObj* caller;             //Den batfil som kallade på denna. Om användaren gav kommandot 
     87                                              //skall den inehålla NULL
     88              char        occupied;           //1 om detta objekt används, 0 annars
     89          };    
     90          #define BatFileObj struct ST_BatFileObj
     91          */
     92          
     93          ///////////////////////////////////
     94          // Funktioner och procedurer
     95          
     96          extern void    InitializeComputer1( void );
     97          extern void    InitializePhoneAnsApp( void );
     98          extern void    MainShell( void );
     99          extern char    DecodeAndPerform(const char* cmdStr);
    100          //int     MainCommandInterper(char c);
    101          extern void    Hello( void );
    102          extern void    TestHW( void );
    103          extern void    FlashID( void );
    104          extern void    Erase( void );
    105          extern void    BackRead( void );
    106          extern void    ReadSpare( void );
    107          extern void    WF1( void );
    108          extern void    WF2( void );
    109          extern void    WF3( void );
    110          extern void    RF1( void );
    111          extern void    RF2( void );
    112          extern void    RF3( void );
    113          extern void    CreateLong( void );
    114          extern void    ReadSpare2( void );
    115          extern void    Append( void );
    116          
    117          extern void    SetupBatFile( void );
    118          extern void    ClearLabelList( void );
    119          extern void    ExecuteBatFile(const char* batFileName);
    120          extern char    InsertLabel(const char* name, long pos);
    121          extern int     FindLabel(const char *name);
    122          extern char    GotoLabel(const char* name);
    123          
    124          extern void    myStrCpy(char* dest, const char* src);
    125          extern int     myStrLen(char* str);
    126          extern void    myLong2HexStr(long v, char* str);
    127          extern void    myInt2DecStr(int v, char* str);
    128          extern void    myInt2DecStr00(char v, char* str);
    129          extern int     myStr2Int(const char* str);
    130          extern char    myStrCmpNoCase(const char* s1, const char* s2);
    131          
    132          // Nedan var ett försök till multipla bat-filer, kanske införs senare
    133          /*
    134          void    SetupBatFile( void );
    135          void    ClearLabelList( void );
    136          void    ClearLabelList(Label* list);
    137          BatFileObj*    VacantBatFileObj(FILE* fp);
    138          void    ExecuteBatFile(const char* batFileName);
    139          char    InsertLabel(const char* name, long pos);
    140          char    FindLabel(const char *name, Label* l);
    141          char    GotoLabel(const char* name);
    142          */
    143          
    144          ///////////////////////////
    145          // Globala variabler
    146          
    147          
    148          ///////////////////////////
    149          // Lokala variabler
    150          
    151          
    152          #endif
     47          #include "FileSystem.h"
      1          /**************************************************************************************
      2          Fil:            $Id: FileSystem.h,v 1.4 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Kommentarer:    Filhuvudet befinner sig i "Spare" arean tillhörande filens första sida. Huvudet består 
      7                                          av 16 bytes enligt följande lista:
      8                                          0       Huvud       0xAA = Legalt filhuvud, annat tillsvidare odefinierat
      9                                          1-4     Fillängd    Pos 1 = MSB, pos 4 = LSB
     10                                          5-12    Filtitel    Enl "Titel.ext". Om titeln är mindre än 8 tecken avslutas det med nollor
     11                                          13-15   Filext      Enl "Titel.ext". Om ext är mindre än 3 tecken avslutas det med nollor
     12          
     13                                          En nolla skriven i fileName[0] indikerar att
     14                                          filstrukturen är ledig.
     15                  
     16          Revisionshistoria:
     17                                          $Log: FileSystem.h,v $
     18                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     19                                          Various declarations changes.
     20                                          Still version 0200.
     21                                          
     22                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     23                                          Added menu option of setting speaker volume (untested)
     24                                          Completely changed header files
     25                                          Version 0200.
     26                                          
     27                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     28                                          Added header information
     29                                          
     30          
     31          **************************************************************************************/
     32          
     33          #ifndef _FILESYSTEM_INCLUDED_
     34          #define _FILESYSTEM_INCLUDED_
     35          
     36          ///////////////////////////////////
     37          // Definitioner
     38          
     39          #define FS_MAXFILES         8 
     40          #define FS_FILENAMELENGTH   13
     41          #define FS_FLASHSIZE        0x800000
     42          
     43          #define OFF            0
     44          #define READY        1
     45          #define NEMPTY        2
     46          #define WRITING        3
     47          #define OCCUPIED    4
     48          
     49          #define CLE     P4.0                                //Command Latch Enable
     50          #define ALE     P4.1                                //Address Latch Enable
     51          #define WP      P4.2                                //Write Protect
     52          #define SE      P4.3                                //Spare Enable
     53          //#define CE      P4.4                                //Chip Enable
     54          #define FBUSY   P4.5                                //Busy
     55          
     56          #define FREG (*(unsigned char xdata *) 0xE000)
     57          #define FLASH (*(unsigned char xdata *) 0xB000) 
     58          
     59          ///////////////////////////////////
     60          // Strukturer
     61          
     62          struct ST_FILE_HEAD {
     63              unsigned long   length;
     64              char            name[FS_FILENAMELENGTH];
     65          };
     66          #define FILE_HEAD struct ST_FILE_HEAD
     67          
     68          
     69          struct ST_FILE {
     70              char            fileName[FS_FILENAMELENGTH];
     71              unsigned long   startAddress;
     72              unsigned long   length; 
     73              unsigned long   offset; 
     74              char            write;
     75              char            append;
     76          };
     77          #define FILE struct ST_FILE 
     78          
     79          
     80          
     81          ///////////////////////////////////
     82          // Funktioner och procedurer
     83          
     84          extern void            InitializeFileSystem( void );
     85          extern void            InitializeFlash( void );
     86          extern void            SetupReadSeq( void );
     87          extern unsigned char   ReadFLASH( void );
     88          extern void            TerminateReadSeq( void );
     89          extern void            GetDeviceIDRS232(void);
     90          extern void            SetupWriteSeq( void );
     91          extern void            WriteFLASH(unsigned char);
     92          extern void            TerminateWriteSeq( void );
     93          extern void            PerformWriteSeq( void );
     94          extern void            EraseBlock( void );
     95          extern void            WriteFileHead(const char* name, long size);
     96          extern FILE*           fopen(const char* name, const char* def);
     97          extern FILE*               fopenA(const char* name, long maxSize, long offset);
     98          extern void            fputc(FILE* filePtr, char c);
     99          extern void            fputLine(FILE* filePtr, const char* str);
    100          extern void            fupLoad( void );
    101          extern int             fgetc(FILE* filePtr);
    102          extern void            fgetLine(FILE* filePtr, char* str, int maxLen);
    103          extern void            fdownLoad( void );
    104          extern void            fclose(FILE* filePtr);
    105          extern long            ftell(FILE* filePtr);
    106          //void            Rewind(FILE* filePtr);
    107          extern void            fSetPos(FILE* filePtr, long offset);
    108          extern void            ReleaseCurrFile( void );
    109          extern void            EraseAll( void );
    110          extern void            StartDynamic( void );
    111          extern void            EraseDynamic( void );
    112          extern char                        MemUsage( void );
    113          extern void                        Dir( void );
    114          extern void                        Type( void );
    115          extern void                        TypeA( void );
    116          
    117          #endif
     48          #include "ErrorCodes.h"
      1          /***********************************************
      2          Fil:            $Id: ErrorCodes.h,v 1.3 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:52 $
      5          
      6          Revisionshistoria:
      7                                          $Log: ErrorCodes.h,v $
      8                                          Revision 1.3  2003/11/20 22:08:52  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     13                                          Added header information
     14                                          
     15          
     16          
     17          ***********************************************/
     18          
     19          #ifndef _ERRORCODES_INCLUDED_
     20          #define _ERRORCODES_INCLUDED_
     21          
     22          
     23          //Felkoder
     24          
     25          //Generellt
     26          #define EM_NOERROR          0x00
     27          
     28          
     29          
     30          //Filsystem
     31          #define EM_FILEEXISTS       0x10
     32          #define EM_FILENOTEXISTS    0x11
     33          #define EM_OUTOFFILEMEMORY  0x12
     34          #define EM_TOOMANYFILES     0x13
     35          #define EM_FILEOPEN         0x14
     36          #define EM_FILENOTOPEN      0x15
     37          #define EM_FILEREADONLY     0x16
     38          #define EM_FILEWRITEONLY    0x17
     39          #define EM_WRITEFILEOPEN    0x18
     40          
     41          //Phone
     42          #define EM_TOOMANYTIMERS    0x19
     43          
     44          //BAtfiles
     45          #define EM_TOOMANYBATFILES  0x20
     46          #define EM_REDEFLABELATTEMPT    0x21
     47          #define EM_TOOMANYLABELS    0x22
     48          #define EM_NOLABEL          0x23
     49          
     50          
     51          //PhoneAns
     52          #define EM_PARAMETER_SYNTAX    0x24
     53          
     54          #endif
     49          #include "RS232.h"
      1          /********************************************************
      2          Fil:            $Id: RS232.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Revisionshistoria:
      7                                          $Log: RS232.h,v $
      8                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          
     18          
     19          ********************************************************/
     20          
     21          #ifndef _RS232_INCLUDED_
     22          #define _RS232_INCLUDED_
     23          
     24          ///////////////////////////////////
     25          // Definitioner
     26          
     27          
     28          ///////////////////////////////////
     29          // Strukturer
     30          
     31          
     32          ///////////////////////////////////
     33          // Funktioner och procedurer
     34          
     35          extern void             InitializeRS232( void );
     36          extern void             SendRS232(char tecken);
     37          extern void             SendStringRS232(const char *str);
     38          extern void             SendStringEOLRS232(const char *str);
     39          extern char             WaitAndReceiveRS232( void );
     40          extern char             WaitAndReceiveTimeout( void );
     41          extern int      ReceiveLineRS232(char* str, int maxLen);
     42          
     43          #endif
     50          #include "Wav.h"
      1          /********************************************************
      2          Fil:            $Id: wav.h,v 1.1 2003/11/23 20:29:34 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/23 20:29:34 $
      5          
      6          Revisionshistoria:
      7                                          $Log: wav.h,v $
      8                                          Revision 1.1  2003/11/23 20:29:34  Gemensam
      9                                          Complete and tested volume setting in options menu.
     10                                          Ver 0201
     11                                          
     12                                          
     13          
     14          ********************************************************/
     15          
     16          #ifndef _WAV_INCLUDED_
     17          #define _WAV_INCLUDED_
     18          
     19          ///////////////////////////////////
     20          // Definitioner
     21          
     22          #define WS_NO_OP        0x00
     23          #define WS_REC          0x01
     24          #define WS_PLAY         0x02
     25          #define WS_ECHO         0x03
     26          #define WS_TONE         0x04
     27          #define WS_PORT1        0x05
     28           
     29          #define DAC0 (*(unsigned char xdata *) 0xA000)
     30          #define DAC1 (*(unsigned char xdata *) 0xA001)
     31          #define DAC2 (*(unsigned char xdata *) 0xA002)
     32          #define DAC3 (*(unsigned char xdata *) 0xA003)
     33          
     34          #define WAVBUFSIZE  512
     35          
     36          //#define SPEAKER_ON  P1.5 = 1
     37          //#define SPEAKER_OFF  P1.5 = 0
     38          
     39          ///////////////////////////////////
     40          // Strukturer
     41          
     42          
     43          ///////////////////////////////////
     44          // Funktioner och procedurer
     45          
     46          extern void    InitializeWAV( void );
     47          extern void    SetupMic( void );
     48          extern void    SetupPhoneIn( void );
     49          extern void    RecMicFile(const char* fileName);
     50          extern void    RecPhoneFile(const char* fileName);
     51          extern void    RecFile(const char* fileName);
     52          extern void    PlayFile(const char* fileName);
     53          extern void    EchoMic( void );
     54          extern void    EchoPhone( void );
     55          extern void    Echo( void );
     56          extern void    WavTone( void );
     57           
     58          #endif
     51          #include "DTMF.h"
      1          /*************************************************************
      2          Fil:            $Id: DTMF.h,v 1.2 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Beskrivning:    Header fil till DTMF.c
      5          
      6          Skapad:         03-11-18
      7          
      8          Ändrad:         $Date: 2003/11/20 22:08:52 $
      9          
     10          Ägare:          Fredrik Hoffman
     11          
     12          
     13          Att göra:
     14          
     15          Revisionshistoria:
     16                                          $Log: DTMF.h,v $
     17                                          Revision 1.2  2003/11/20 22:08:52  Gemensam
     18                                          Various declarations changes.
     19                                          Still version 0200.
     20                                          
     21                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     22                                          Added menu option of setting speaker volume (untested)
     23                                          Completely changed header files
     24                                          Version 0200.
     25                                          
     26          
     27          *************************************************************/
     28          
     29          #ifndef _DTMF_INCLUDED_
     30          #define _DTMF_INCLUDED_
     31          
     32          ///////////////////////////////////
     33          // Definitioner
     34          
     35          #define DTMF_TRANS      (*(unsigned char xdata *) 0x9000)
     36          #define DTMF_READ       (*(unsigned char xdata *) 0x9000)
     37          #define DTMF_CONTROL    (*(unsigned char xdata *) 0x9001)
     38          #define DTMF_STATUS     (*(unsigned char xdata *) 0x9001)
     39           
     40          ///////////////////////////////////
     41          // Funktioner och procedurer
     42          
     43          extern void    InitializeDTMF( void );
     44          extern void    MakeDTMFTones(const char *tones);
     45          extern char    DecodeDTMF(char c);
     46          extern char    DecodeReceivedDTMF( void );
     47          extern void    ResetDTMFIndex( void );
     48          extern char    GetNextDTMF( void );
     49           
     50          #endif
     52          #include "Phone.h"
      1          /********************************************************
      2          Fil:            $Id: Phone.h,v 1.6 2003/12/26 16:17:01 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/12/26 16:17:01 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Phone.h,v $
      8                                          Revision 1.6  2003/12/26 16:17:01  Gemensam
      9                                          Reinstate 500 ms wait for hang up detection to settle (if not PPD is used).
     10                                          Fixed PPD detection by decreasing phone volume from 63 to 15.
     11                                          Version 0304.
     12                                          
     13                                          Revision 1.5  2003/11/29 22:36:00  Gemensam
     14                                          Fixed problem with to short pulse width on PPD.
     15                                          Ver 0302.
     16                                          
     17                                          Revision 1.4  2003/11/24 22:44:36  Gemensam
     18                                          Fixed PPD, not working yet,
     19                                          New command: speaker volume.
     20                                          Version 0301.
     21                                          
     22                                          Revision 1.3  2003/11/23 21:40:03  Gemensam
     23                                          Parallell phone detection included.
     24                                          Removed obsolete #define's regarding LCD interface.
     25                                          Ver 0300
     26                                          
     27                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
     28                                          Various declarations changes.
     29                                          Still version 0200.
     30                                          
     31                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     32                                          Added menu option of setting speaker volume (untested)
     33                                          Completely changed header files
     34                                          Version 0200.
     35                                          
     36                                          
     37          
     38          ********************************************************/
     39          
     40          #ifndef _PHONE_INCLUDED_
     41          #define _PHONE_INCLUDED_
     42          
     43          ///////////////////////////////////
     44          // Definitioner
     45          
     46          //PS = Phone Signals
     47          #define PS_RV                                           P1.2
     48          #define PS_LC                                           P1.7
     49          #define PS_LCD                                          P1.1
     50          #define PS_PPD                                          P1.0
     51          
     52          #define WRS_POS_EDGE_TRIGG          10
     53          #define WRS_NEG_EDGE_TRIGG          10
     54          #define WRS_POST_SIGNAL_LIMIT       20
     55          #define WRS_SIGNAL_MIN_INTERVALL    300
     56          #define WRS_SIGNAL_MAX_INTERVALL    600
     57          
     58          /* Examples of timeouts
     59          Lift phone:             Play:
     60          1E5                             11
     61          209                             163
     62          20C                             11
     63          200                             4
     64          216                             E8      
     65          1F3                             F5
     66          */
     67          
     68          #define P_PPD_PW                                        0x190
     69          #define P_RIPPLE_FILTER_TIMEOUT         10
     70          
     71          #define DEFAULT_PHONE_OUT_VOLUME        15
     72          
     73          ///////////////////////////////////
     74          // Strukturer
     75          
     76          
     77          ///////////////////////////////////
     78          // Funktioner och procedurer
     79          
     80          extern void    InitializePhone( void );
     81          extern void    HangUp( void );
     82          extern void    LiftPhone( void );
     83          
     84          #ifdef  __PPD_ON__
     85          extern void        ClearPPDRipple( void );
     86          #endif
     87          
     88          extern void    MonitorRingSignal( void );
     89          extern int         WaitForRingSignals(int  nSignals);
     90          
     91          #endif
     53          #include "Timer.h"
      1          /********************************************************
      2          Fil:            $Id: Timer.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Timer.h,v $
      8                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          
     18          
     19          ********************************************************/
     20          
     21          #ifndef _TIMER_INCLUDED_
     22          #define _TIMER_INCLUDED_
     23          
     24          ///////////////////////////////////
     25          // Definitioner
     26          
     27          #define TM_MAX_TIMERS   5
     28          
     29          ///////////////////////////////////
     30          // Strukturer
     31          
     32          
     33          ///////////////////////////////////
     34          // Funktioner och procedurer
     35          
     36          extern void    InitializeTimer( void );
     37          extern char    StartTimer(unsigned int tenMillisecTimeout);
     38          extern void    KillTimer(char  timerIndex);
     39          extern char    TimedOut(char timerIndex);
     40          extern void    WaitFor(unsigned int tenMillisec);
     41           
     42          #endif
     54          #include "PhoneAns.h"
      1          /********************************************************
      2          Fil:            $Id: PhoneAns.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Revisionshistoria:
      7                                          $Log: PhoneAns.h,v $
      8                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          
     18          
     19          ********************************************************/
     20          
     21          #ifndef _PHONEANS_INCLUDED_
     22          #define _PHONEANS_INCLUDED_
     23          
     24          #include "Main.h"
      1          /*************************************************************
      2          Fil:            $Id: Main.h,v 1.10 2003/12/26 16:17:01 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/12/26 16:17:01 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Main.h,v $
      8                                          Revision 1.10  2003/12/26 16:17:01  Gemensam
      9                                          Reinstate 500 ms wait for hang up detection to settle (if not PPD is used).
     10                                          Fixed PPD detection by decreasing phone volume from 63 to 15.
     11                                          Version 0304.
     12                                          
     13                                          Revision 1.9  2003/12/09 20:52:49  Gemensam
     14                                          Commented out PPD detection since the HW not work yet.
     15                                          Ver 0302.
     16                                          
     17                                          Revision 1.8  2003/11/29 22:35:59  Gemensam
     18                                          Fixed problem with to short pulse width on PPD.
     19                                          Ver 0302.
     20                                          
     21                                          Revision 1.7  2003/11/24 22:44:36  Gemensam
     22                                          Fixed PPD, not working yet,
     23                                          New command: speaker volume.
     24                                          Version 0301.
     25                                          
     26                                          Revision 1.6  2003/11/23 21:40:03  Gemensam
     27                                          Parallell phone detection included.
     28                                          Removed obsolete #define's regarding LCD interface.
     29                                          Ver 0300
     30                                          
     31                                          Revision 1.5  2003/11/23 20:29:34  Gemensam
     32                                          Complete and tested volume setting in options menu.
     33                                          Ver 0201
     34                                          
     35                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     36                                          Various declarations changes.
     37                                          Still version 0200.
     38                                          
     39                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     40                                          Added menu option of setting speaker volume (untested)
     41                                          Completely changed header files
     42                                          Version 0200.
     43                                          
     44                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     45                                          Added header information
     46                                          
     47          *************************************************************/
     48          
     49          #ifndef _MAIN_INCLUDED_
     50          #define _MAIN_INCLUDED_
     51          
     52          #include "FileSystem.h"
     53          
     54          
     55          ///////////////////////////////////
     56          // Definitioner
     57          
     58          #define VERSION_MENU_STRING     "Telestation 3.5       (c) 2004-09-19 FRHA"
     59          
     60          #define CM_PARSIZE              24
     61          #define CM_NRPAR                16
     62          
     63          #define MAX_LABEL_LEN   8
     64          #define MAX_LABELS      64
     65          
     66          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     67          /*
     68          #define MAX_BATFILES    8
     69          */
     70          
     71          ///////////////////////////////////
     72          // Strukturer
     73          
     74          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     75          /*
     76          struct ST_Label {
     77              char    name[MAX_LABEL_LEN];
     78              long    pos;
     79          };
     80          #define Label struct ST_Label
     81           
     82          struct ST_BatFileObj {
     83              FILE*       fp;                 //Filpekare till bat-filen
     84              Label*      labels;             //Pekare till lista med ingående labels
     85              char        labelIndex;         //Pekar på nästa lediga label
     86              BatFileObj* caller;             //Den batfil som kallade på denna. Om användaren gav kommandot 
     87                                              //skall den inehålla NULL
     88              char        occupied;           //1 om detta objekt används, 0 annars
     89          };    
     90          #define BatFileObj struct ST_BatFileObj
     91          */
     92          
     93          ///////////////////////////////////
     94          // Funktioner och procedurer
     95          
     96          extern void    InitializeComputer1( void );
     97          extern void    InitializePhoneAnsApp( void );
     98          extern void    MainShell( void );
     99          extern char    DecodeAndPerform(const char* cmdStr);
    100          //int     MainCommandInterper(char c);
    101          extern void    Hello( void );
    102          extern void    TestHW( void );
    103          extern void    FlashID( void );
    104          extern void    Erase( void );
    105          extern void    BackRead( void );
    106          extern void    ReadSpare( void );
    107          extern void    WF1( void );
    108          extern void    WF2( void );
    109          extern void    WF3( void );
    110          extern void    RF1( void );
    111          extern void    RF2( void );
    112          extern void    RF3( void );
    113          extern void    CreateLong( void );
    114          extern void    ReadSpare2( void );
    115          extern void    Append( void );
    116          
    117          extern void    SetupBatFile( void );
    118          extern void    ClearLabelList( void );
    119          extern void    ExecuteBatFile(const char* batFileName);
    120          extern char    InsertLabel(const char* name, long pos);
    121          extern int     FindLabel(const char *name);
    122          extern char    GotoLabel(const char* name);
    123          
    124          extern void    myStrCpy(char* dest, const char* src);
    125          extern int     myStrLen(char* str);
    126          extern void    myLong2HexStr(long v, char* str);
    127          extern void    myInt2DecStr(int v, char* str);
    128          extern void    myInt2DecStr00(char v, char* str);
    129          extern int     myStr2Int(const char* str);
    130          extern char    myStrCmpNoCase(const char* s1, const char* s2);
    131          
    132          // Nedan var ett försök till multipla bat-filer, kanske införs senare
    133          /*
    134          void    SetupBatFile( void );
    135          void    ClearLabelList( void );
    136          void    ClearLabelList(Label* list);
    137          BatFileObj*    VacantBatFileObj(FILE* fp);
    138          void    ExecuteBatFile(const char* batFileName);
    139          char    InsertLabel(const char* name, long pos);
    140          char    FindLabel(const char *name, Label* l);
    141          char    GotoLabel(const char* name);
    142          */
    143          
    144          ///////////////////////////
    145          // Globala variabler
    146          
    147          
    148          ///////////////////////////
    149          // Lokala variabler
    150          
    151          
    152          #endif
     25          #include "Calender.h"
      1          /********************************************************
      2          Fil:            $Id: Calender.h,v 1.4 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:52 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Calender.h,v $
      8                                          Revision 1.4  2003/11/20 22:08:52  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.3  2003/11/18 19:17:35  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     18                                          Added header information
     19                                          
     20          
     21          ********************************************************/
     22          
     23          #ifndef _CALENDER_INCLUDED_
     24          #define _CALENDER_INCLUDED_
     25          
     26          ///////////////////////////////////
     27          // Definitioner
     28          
     29          // Non-volatile variabler:
     30          #define NV_ANSWERING_ON 0x08
     31          #define NV_NUM_SIGNALS  0x09
     32          #define NV_PLAYED_MS    0x0A
     33          #define NV_PLAYED_LS    0x0B
     34          #define NV_SPEAKER_VOL  0x0C
     35          //Max adress är 0x3F
     36          
     37          #define SDA    P3.0
     38          #define SCL    P3.1
     39          //#define SDA    P1.5
     40          //#define SCL    P1.6
     41          
     42          
     43          ///////////////////////////////////
     44          // Strukturer
     45          
     46          struct ST_TIME {
     47              char    seconds;
     48              char    minutes;
     49              char    hours;
     50          };
     51          #define TIME struct ST_TIME
     52          
     53          
     54          struct ST_DATE {
     55              char    day;
     56              char    date;
     57              char    month;
     58              char    year;
     59          };
     60          #define DATE struct ST_DATE
     61          
     62          ///////////////////////////////////
     63          // Funktioner och procedurer
     64          
     65          extern void    InitializeCalender( void );
     66          extern char    WOCB(char dat);
     67          extern char    ROCB(char ack);
     68          extern char    WriteCalenderByte(char address, char dat);
     69          extern char    ReadCalenderByte(char address, char* dat);
     70          extern void    GetTimeNow(TIME* tptr);
     71          extern void    GetDateNow(DATE* tptr);
     72          extern void    CreateTimeString(TIME* tptr, char* str);
     73          extern void    CreateDateString(DATE* tptr, char* str);
     74          extern void    CreateDateString2(DATE* tptr, char* str);
     75           
     76          
     77          ///////////////////////////
     78          // Variabler
     79          
     80          
     81          
     82          
     83           
     84          #endif
     26          
     27          ///////////////////////////////////
     28          // Definitioner
     29          
     30          #define MS_LOG          0x01
     31          #define MS_MENU         0x02
     32          #define MS_TIMEDATE     0x03
     33          #define MS_ERASEQST     0x04
     34          #define MS_MEMO         0x05
     35          
     36          #define PB_MAXENTRIES   512
     37          #define PB_POSTSIZE     32
     38          
     39          ///////////////////////////////////
     40          // Strukturer
     41          
     42          
     43          ///////////////////////////////////
     44          // Funktioner och procedurer
     45          
     46          extern void    InitializePhoneAns( void );
     47          extern void    WaitForCall( void );
     48          extern void    CorrectDate(char changedDate);
     49          extern void    RecordCallerMessage( void );
     50          extern void    AskQuestionMsg( void );
     51          extern void    EnterCode( void );
     52          extern void    SetupUpQLabels( void );
     53          extern void    LabelCopy(char* dest, const char* src);
     54          extern void    CreateUniqueFilename(char* str);
     55          extern void    ShowTimeDateSet( void );
     56          extern void    ShowEraseQuest( void );
     57          extern void    ReadPhoneBookFile( void );
     58          extern void    LookUpCaller(char* number, char* name,  char* category);
     59          extern void    IntitializeMemo( void );
     60          extern void    RecordMemo( void );
     61          extern void    PlayMemo( void );
     62          extern void    CreateMemoFileName(int index, char* str);
     63          extern char    CategoryHit(char* str, char category);
     64          
     65          #endif
     55          #include "DPOT.h"
      1          /*************************************************************
      2          Fil:            $Id: DPot.h,v 1.2 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Beskrivning:    Header fil till DPot.c
      5          
      6          Skapad:         03-11-17
      7          
      8          Ändrad:         $Date: 2003/11/20 22:08:52 $
      9          
     10          Ägare:          Fredrik Hoffman
     11          
     12          
     13          Att göra:
     14          
     15          Kommentarer:
     16          
     17              Varje pot har fyra nonvolatile register. Dessa definieras härmed enligt följande:
     18              *   0 = Zero Wiper  = 0
     19              *   1 = Variable Wiper  = ?
     20              *   2 = Oanvänd = X
     21              *   3 = Full Wiper = 255
     22              Vid initialiseringen skall värden för Zero och Full skrivas in i NV-registererna
     23              Sedan skall Wiper på alla pottar sättas till Zero.
     24          
     25          Revisionshistoria:
     26                                          $Log: DPot.h,v $
     27                                          Revision 1.2  2003/11/20 22:08:52  Gemensam
     28                                          Various declarations changes.
     29                                          Still version 0200.
     30                                          
     31                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     32                                          Added menu option of setting speaker volume (untested)
     33                                          Completely changed header files
     34                                          Version 0200.
     35                                          
     36          
     37          *************************************************************/
     38          
     39          #ifndef _DPOT_INCLUDED_
     40          #define _DPOT_INCLUDED_
     41          
     42          ///////////////////////////////////
     43          // Definitioner
     44          
     45          #define DPCL    P3.3
     46          #define DPDA    P3.4
     47           
     48          #define POT_PHONE_OUT   0x00
     49          #define POT_PHONE_IN    0x03
     50          #define POT_SPEAKER     0x01
     51          #define POT_DTMF        0x02
     52          
     53          #define DEFAULT_SPEAKER_VOLUME  50
     54          
     55          ///////////////////////////////////
     56          // Funktioner och procedurer
     57          
     58          extern void    InitializeDPot( void );
     59          extern void    RPWait( void );
     60          extern char    WOEPB(char dat);
     61          extern char    ROEPB(char ack);
     62          extern char    SetDPWiper(char pot, char value);
     63          extern char    ReadDPWiper(char pot, char* dat);
     64           
     65          extern void    SpeakerVolume(char volume);
     66          extern void    PhoneInVolume(char volume);
     67          extern void    PhoneOutVolume(char volume);
     68          extern void    DTMFVolume(char volume);
     69          
     70          #endif
     56          #include "LCD.h"
      1          /********************************************************
      2          Fil:            $Id: LCD.h,v 1.4 2003/11/23 21:40:03 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/23 21:40:03 $
      5          
      6          Revisionshistoria:
      7                                          $Log: LCD.h,v $
      8                                          Revision 1.4  2003/11/23 21:40:03  Gemensam
      9                                          Parallell phone detection included.
     10                                          Removed obsolete #define's regarding LCD interface.
     11                                          Ver 0300
     12                                          
     13                                          Revision 1.3  2003/11/23 20:29:34  Gemensam
     14                                          Complete and tested volume setting in options menu.
     15                                          Ver 0201
     16                                          
     17                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
     18                                          Various declarations changes.
     19                                          Still version 0200.
     20                                          
     21                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     22                                          Added menu option of setting speaker volume (untested)
     23                                          Completely changed header files
     24                                          Version 0200.
     25                                          
     26                                          
     27          
     28          ********************************************************/
     29          
     30          #ifndef _LCD_INCLUDED_
     31          #define _LCD_INCLUDED_
     32          
     33          ///////////////////////////////////
     34          // Definitioner
     35          
     36          #define LCD_DATA      (*(unsigned char xdata *) 0x8000)
     37          #define LCD_INSTR     (*(unsigned char xdata *) 0x8001)
     38          #define LCD_BUSY      (*(unsigned char xdata *) 0x8001)
     39          
     40          #define DISPBUFFERSIZE  50
     41          // DISPBUFFERSIZE är antalet samtal i dispBuffer (samtalsindexerat)
     42          #define DISPCALLSIZE  40
     43          // DISPCALLSIZE är antalet byte per samtalsrad
     44           
     45          #define LCD_CHAR_PER_ROW        42
     46          
     47          #define MENU_LEFT_COLUMN        4
     48          
     49          #define MENU_ITEM_SPKR_VOL      0
     50          #define MENU_ITEM_ANS_ONOFF     1
     51          #define MENU_ITEM_MEMO          2
     52          #define MENU_ITEM_TIMEDATE      3
     53          #define MENU_ITEM_NUMSIG        4
     54          #define MENU_ITEM_ERASE         5
     55          #define MENU_NUM_OF_ITEMS       6
     56          
     57          
     58          ///////////////////////////////////
     59          // Strukturer
     60          
     61          
     62          ///////////////////////////////////
     63          // Funktioner och procedurer
     64          
     65          extern void    InitializeLCD( void );
     66          extern void    ClearDisp( void );
     67          extern void    DispString(char* str);
     68          extern void    SetLCDReg(char regNr, char d);
     69          extern void    LogCursorAt(int newCursorPos, char updateAlways);
     70          extern void    FillDispBuffer(void);
     71          extern void    DispInfoBox(char* str1, char* str2);
     72          extern void    DisplayMenu(char* menuStr);
     73          extern void    DispMemUsage( void );
     74          extern void    OptionCursorAt(int  newCursorPos);
     75          extern void    DispOptionsMenu(char answerOn, char numSignals);
     76          extern void    DispSetTimeDate(char cursor, char year, char month, char day, char hour, char minute);
     77          extern void    DispSetTimeDateHead( void );
     78          extern void    DispEraseQuest( void );
     79          extern void    DispMemoScreen( void );
     80          
     81          #endif
     57          #include "Keyboard.h"
      1          /*************************************************************
      2          Fil:            $Id: Keyboard.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Beskrivning:    Header fil till Keyboard.c
      5          
      6          Skapad:         03-11-18
      7          
      8          Ändrad:         $Date: 2003/11/20 22:08:53 $
      9          
     10          Ägare:          Fredrik Hoffman
     11          
     12          
     13          Att göra:
     14          
     15          Kommentarer:
     16          
     17          Revisionshistoria:
     18                                          $Log: Keyboard.h,v $
     19                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
     20                                          Various declarations changes.
     21                                          Still version 0200.
     22                                          
     23                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     24                                          Added menu option of setting speaker volume (untested)
     25                                          Completely changed header files
     26                                          Version 0200.
     27                                          
     28          
     29          *************************************************************/
     30          
     31          #ifndef _KEYBOARD_INCLUDED_
     32          #define _KEYBOARD_INCLUDED_
     33          
     34          ///////////////////////////////////
     35          // Definitioner
     36          
     37          #define KEYBOARD    (*(unsigned char xdata *) 0xC000)
     38          #define KEY_CLK     P1.6
     39          #define KEY_IRQ     P1.4
     40          
     41          #define KS_IDLE         0x00
     42          #define KS_WAITFIRST    0x01
     43          #define KS_WAITMULTI    0x02
     44          
     45          #define FIRST_KEY_TIMEOUT   10
     46          #define MULTI_KEY_TIMEOUT   2
     47           
     48          
     49          ///////////////////////////////////
     50          // Funktioner och procedurer
     51          
     52          extern void    InitializeKeyboard( void );
     53          extern void    KeyboardOn( void );
     54          extern void    KeyboardOff( void );
     55           
     56          #endif
     58          
     59          
     60          //////////////////////
     61          // Globala variabler
     62          
     63          extern xdata char       msg[100];
     64          extern xdata int        numOfCalls;
     65          extern xdata char       speakerVolume;
     66          extern xdata char       receivedDTMF;           //Innehåller den senaste mottagna DTMF-signalen
     67                                                                                          //från avbrottsrutinen. Om inget tagits emot sätts
     68                                                                                          //den till 0. För att få ett användbart värde skall
     69                                                                                          //funktionen DecodeDTMF() köras.
     70          extern xdata int        lastPlayed;                     //Kronologindexerad
     71          
     72          xdata long                      logOffset;                      //Nästa skrivposition i Log-filen 
     73          xdata int                       callIndex[1024];        //Innehåller positionen i logfilen där resp
     74                                                                                          //samtalsnummer ligger. Index 0 är det äldsta 
     75                                                                                          //samtalet, 1 är det näst äldsta osv (kronologindexerad)
     76          
     77          
     78          //////////////////////
     79          // Lokala variabler
     80          
     81          
     82          //////////////////////
     83          // Kod
     84          
     85          void    InitializeLogFile( void )
     86          {       
   \   0000            InitializeLogFile:
     87              logOffset = -1;
   \   0000  900000            MOV     DPTR,#logOffset
   \   0003  74FF              MOV     A,#255
   \   0005  F0                MOVX    @DPTR,A
   \   0006  A3                INC     DPTR
   \   0007  F0                MOVX    @DPTR,A
   \   0008  A3                INC     DPTR
   \   0009  F0                MOVX    @DPTR,A
   \   000A  A3                INC     DPTR
   \   000B  F0                MOVX    @DPTR,A
     88          }
   \   000C  22                RET
     89          
     90          void    CreateLog( void )
     91          {
   \   000D            CreateLog:
   \   000D  900000            MOV     DPTR,#$LOCBX CreateLog+22
   \   0010  D0E0              POP     ACC
   \   0012  F0                MOVX    @DPTR,A
   \   0013  A3                INC     DPTR
   \   0014  D0E0              POP     ACC
   \   0016  F0                MOVX    @DPTR,A
     92          
     93              xdata DATE    dateNow;
     94              xdata TIME    timeNow;
     95              xdata char    timeStr[15];
     96          
     97              SendStringEOLRS232("Starting logfile...");
   \   0017  7D00              MOV     R5,#LOW(?0000)
   \   0019  7E00              MOV     R6,#HIGH(?0000)
   \   001B  7F02              MOV     R7,#2
   \   001D  120000            LCALL   $REFFN SendStringEOLRS232
     98              GetDateNow(&dateNow);
   \   0020  7D00              MOV     R5,#LOW $LOCBX CreateLog
   \   0022  7E00              MOV     R6,#HIGH $LOCBX CreateLog
   \   0024  7F01              MOV     R7,#1
   \   0026  120000            LCALL   $REFFN GetDateNow
     99              CreateDateString2(&dateNow, msg);
   \   0029  7F01              MOV     R7,#1
   \   002B  900000            MOV     DPTR,#$PRMBX CreateDateString2+3
   \   002E  EF                MOV     A,R7
   \   002F  F0                MOVX    @DPTR,A
   \   0030  A3                INC     DPTR
   \   0031  7400              MOV     A,#HIGH(msg)
   \   0033  F0                MOVX    @DPTR,A
   \   0034  A3                INC     DPTR
   \   0035  7400              MOV     A,#LOW(msg)
   \   0037  F0                MOVX    @DPTR,A
   \   0038  7D00              MOV     R5,#LOW $LOCBX CreateLog
   \   003A  7E00              MOV     R6,#HIGH $LOCBX CreateLog
   \   003C  120000            LCALL   $REFFN CreateDateString2
    100              msg[6] = ' ';
   \   003F  7420              MOV     A,#32
   \   0041  900006            MOV     DPTR,#msg+6
   \   0044  F0                MOVX    @DPTR,A
    101              GetTimeNow(&timeNow);
   \   0045  7D00              MOV     R5,#LOW ($LOCBX CreateLog+4)
   \   0047  7E00              MOV     R6,#HIGH ($LOCBX CreateLog+4)
   \   0049  7F01              MOV     R7,#1
   \   004B  120000            LCALL   $REFFN GetTimeNow
    102              WDT = 1;
   \   004E  D2AE              SETB    IE.6
    103              SWDT = 1;
   \   0050  D2BE              SETB    IP.6
    104              CreateTimeString(&timeNow, timeStr);
   \   0052  7F01              MOV     R7,#1
   \   0054  900000            MOV     DPTR,#$PRMBX CreateTimeString+3
   \   0057  EF                MOV     A,R7
   \   0058  F0                MOVX    @DPTR,A
   \   0059  A3                INC     DPTR
   \   005A  7400              MOV     A,#HIGH ($LOCBX CreateLog+7)
   \   005C  F0                MOVX    @DPTR,A
   \   005D  A3                INC     DPTR
   \   005E  7400              MOV     A,#LOW ($LOCBX CreateLog+7)
   \   0060  F0                MOVX    @DPTR,A
   \   0061  7D00              MOV     R5,#LOW ($LOCBX CreateLog+4)
   \   0063  7E00              MOV     R6,#HIGH ($LOCBX CreateLog+4)
   \   0065  120000            LCALL   $REFFN CreateTimeString
    105          
    106              msg[7] = timeStr[0];
   \   0068  900000            MOV     DPTR,#$LOCBX CreateLog+7
   \   006B  E0                MOVX    A,@DPTR
   \   006C  900007            MOV     DPTR,#msg+7
   \   006F  F0                MOVX    @DPTR,A
    107              msg[8] = timeStr[1];
   \   0070  900000            MOV     DPTR,#$LOCBX CreateLog+8
   \   0073  E0                MOVX    A,@DPTR
   \   0074  900008            MOV     DPTR,#msg+8
   \   0077  F0                MOVX    @DPTR,A
    108              msg[9] = timeStr[2];
   \   0078  900000            MOV     DPTR,#$LOCBX CreateLog+9
   \   007B  E0                MOVX    A,@DPTR
   \   007C  900009            MOV     DPTR,#msg+9
   \   007F  F0                MOVX    @DPTR,A
    109              msg[10] = timeStr[3];
   \   0080  900000            MOV     DPTR,#$LOCBX CreateLog+10
   \   0083  E0                MOVX    A,@DPTR
   \   0084  90000A            MOV     DPTR,#msg+10
   \   0087  F0                MOVX    @DPTR,A
    110              msg[11] = timeStr[4];
   \   0088  900000            MOV     DPTR,#$LOCBX CreateLog+11
   \   008B  E0                MOVX    A,@DPTR
   \   008C  90000B            MOV     DPTR,#msg+11
   \   008F  F0                MOVX    @DPTR,A
    111              msg[12] = 0x00; 
   \   0090  E4                CLR     A
   \   0091  A3                INC     DPTR
   \   0092  F0                MOVX    @DPTR,A
    112          
    113              SendStringEOLRS232("Writing rows 1");
   \   0093  7D14              MOV     R5,#LOW(?0001)
   \   0095  7E00              MOV     R6,#HIGH(?0001)
   \   0097  7F02              MOV     R7,#2
   \   0099  120000            LCALL   $REFFN SendStringEOLRS232
    114           
    115              WDT = 1;
   \   009C  D2AE              SETB    IE.6
    116              SWDT = 1;
   \   009E  D2BE              SETB    IP.6
    117              LogMessage("NWC", "Start of log");
   \   00A0  7F02              MOV     R7,#2
   \   00A2  900000            MOV     DPTR,#$PRMBX LogMessage+3
   \   00A5  EF                MOV     A,R7
   \   00A6  F0                MOVX    @DPTR,A
   \   00A7  A3                INC     DPTR
   \   00A8  7400              MOV     A,#HIGH(?0003)
   \   00AA  F0                MOVX    @DPTR,A
   \   00AB  A3                INC     DPTR
   \   00AC  7427              MOV     A,#LOW(?0003)
   \   00AE  F0                MOVX    @DPTR,A
   \   00AF  7D23              MOV     R5,#LOW(?0002)
   \   00B1  7E00              MOV     R6,#HIGH(?0002)
   \   00B3  120000            LCALL   $REFFN LogMessage
    118          
    119              SendStringEOLRS232("Writing rows 2");
   \   00B6  7D34              MOV     R5,#LOW(?0004)
   \   00B8  7E00              MOV     R6,#HIGH(?0004)
   \   00BA  7F02              MOV     R7,#2
   \   00BC  120000            LCALL   $REFFN SendStringEOLRS232
    120           
    121              WDT = 1;
   \   00BF  D2AE              SETB    IE.6
    122              SWDT = 1;
   \   00C1  D2BE              SETB    IP.6
    123              LogMessage("TIM", msg);
   \   00C3  7F01              MOV     R7,#1
   \   00C5  900000            MOV     DPTR,#$PRMBX LogMessage+3
   \   00C8  EF                MOV     A,R7
   \   00C9  F0                MOVX    @DPTR,A
   \   00CA  A3                INC     DPTR
   \   00CB  7400              MOV     A,#HIGH(msg)
   \   00CD  F0                MOVX    @DPTR,A
   \   00CE  A3                INC     DPTR
   \   00CF  7400              MOV     A,#LOW(msg)
   \   00D1  F0                MOVX    @DPTR,A
   \   00D2  7D43              MOV     R5,#LOW(?0005)
   \   00D4  7E00              MOV     R6,#HIGH(?0005)
   \   00D6  0F                INC     R7
   \   00D7  120000            LCALL   $REFFN LogMessage
    124          
    125              SendStringEOLRS232("Writing rows 3");
   \   00DA  7D47              MOV     R5,#LOW(?0006)
   \   00DC  7E00              MOV     R6,#HIGH(?0006)
   \   00DE  7F02              MOV     R7,#2
   \   00E0  120000            LCALL   $REFFN SendStringEOLRS232
    126          
    127              WDT = 1;
   \   00E3  D2AE              SETB    IE.6
    128              SWDT = 1;
   \   00E5  D2BE              SETB    IP.6
    129              LogMessage("END", NULL);
   \   00E7  900000            MOV     DPTR,#$PRMBX LogMessage+3
   \   00EA  E4                CLR     A
   \   00EB  F0                MOVX    @DPTR,A
   \   00EC  A3                INC     DPTR
   \   00ED  F0                MOVX    @DPTR,A
   \   00EE  A3                INC     DPTR
   \   00EF  F0                MOVX    @DPTR,A
   \   00F0  7D56              MOV     R5,#LOW(?0007)
   \   00F2  7E00              MOV     R6,#HIGH(?0007)
   \   00F4  7F02              MOV     R7,#2
   \   00F6  120000            LCALL   $REFFN LogMessage
    130          
    131              SendStringEOLRS232("Logfile created");
    132          }
   \   00F9  7D5A              MOV     R5,#LOW(?0008)
   \   00FB  7E00              MOV     R6,#HIGH(?0008)
   \   00FD  7F02              MOV     R7,#2
   \   00FF  120000            LCALL   $REFFN SendStringEOLRS232
   \   0102  900000            MOV     DPTR,#$LOCBX CreateLog+22
   \   0105  E0                MOVX    A,@DPTR
   \   0106  F8                MOV     R0,A
   \   0107  A3                INC     DPTR
   \   0108  E0                MOVX    A,@DPTR
   \   0109  C0E0              PUSH    ACC
   \   010B  E8                MOV     A,R0
   \   010C  C0E0              PUSH    ACC
   \   010E  22                RET
    133          
    134          
    135          
    136          void    LogMessage(const char* str1, const char* str2)
    137          /*
    138              Skriver en rad i logfilen "Log.txt" både str1 och str2 skrivs ut med mellanslag mellan
    139              Raden avslutas med ny rad
    140          */
    141          {
   \   010F            LogMessage:
   \   010F  900000            MOV     DPTR,#$LOCBX LogMessage+5
   \   0112  D0E0              POP     ACC
   \   0114  F0                MOVX    @DPTR,A
   \   0115  A3                INC     DPTR
   \   0116  D0E0              POP     ACC
   \   0118  F0                MOVX    @DPTR,A
    142              xdata FILE*   fp;
    143              xdata int     i;
    144              
    145              fp = fopenA("Log.txt", 32768, logOffset);
   \   0119  A3                INC     DPTR
   \   011A  EF                MOV     A,R7
   \   011B  F0                MOVX    @DPTR,A
   \   011C  A3                INC     DPTR
   \   011D  EE                MOV     A,R6
   \   011E  F0                MOVX    @DPTR,A
   \   011F  A3                INC     DPTR
   \   0120  ED                MOV     A,R5
   \   0121  F0                MOVX    @DPTR,A
   \   0122  900000            MOV     DPTR,#logOffset
   \   0125  120000            LCALL   ?LD_R0123_XDPTR_L20
   \   0128  900000            MOV     DPTR,#$PRMBX fopenA+7
   \   012B  120000            LCALL   ?STO_R0123_DPTR_L20
   \   012E  900000            MOV     DPTR,#$PRMBX fopenA+3
   \   0131  E4                CLR     A
   \   0132  F0                MOVX    @DPTR,A
   \   0133  A3                INC     DPTR
   \   0134  F0                MOVX    @DPTR,A
   \   0135  A3                INC     DPTR
   \   0136  7480              MOV     A,#128
   \   0138  F0                MOVX    @DPTR,A
   \   0139  A3                INC     DPTR
   \   013A  E4                CLR     A
   \   013B  F0                MOVX    @DPTR,A
   \   013C  7D6A              MOV     R5,#LOW(?0009)
   \   013E  7E00              MOV     R6,#HIGH(?0009)
   \   0140  7F02              MOV     R7,#2
   \   0142  120000            LCALL   $REFFN fopenA
    146              
    147              if (fp) {
   \   0145  900000            MOV     DPTR,#$LOCBX LogMessage
   \   0148  EF                MOV     A,R7
   \   0149  F0                MOVX    @DPTR,A
   \   014A  A3                INC     DPTR
   \   014B  EE                MOV     A,R6
   \   014C  F0                MOVX    @DPTR,A
   \   014D  A3                INC     DPTR
   \   014E  ED                MOV     A,R5
   \   014F  F0                MOVX    @DPTR,A
   \   0150  4E                ORL     A,R6
   \   0151  7003              JNZ     $+5
   \   0153  020282            LJMP    ?0011
   \   0156            ?0010:
    148                  if (str1 != NULL) {
   \   0156  900000            MOV     DPTR,#$LOCBX LogMessage+7
   \   0159  E0                MOVX    A,@DPTR
   \   015A  FF                MOV     R7,A
   \   015B  A3                INC     DPTR
   \   015C  E0                MOVX    A,@DPTR
   \   015D  FE                MOV     R6,A
   \   015E  A3                INC     DPTR
   \   015F  E0                MOVX    A,@DPTR
   \   0160  FD                MOV     R5,A
   \   0161  4E                ORL     A,R6
   \   0162  6051              JZ      ?0013
   \   0164            ?0012:
    149                      i = 0;
   \   0164  900000            MOV     DPTR,#$LOCBX LogMessage+3
   \   0167  E4                CLR     A
   \   0168  F0                MOVX    @DPTR,A
   \   0169  A3                INC     DPTR
   \   016A  F0                MOVX    @DPTR,A
   \   016B            ?0015:
    150                      while (str1[i] != 0x00) {
   \   016B  900000            MOV     DPTR,#$LOCBX LogMessage+7
   \   016E  E0                MOVX    A,@DPTR
   \   016F  FF                MOV     R7,A
   \   0170  A3                INC     DPTR
   \   0171  E0                MOVX    A,@DPTR
   \   0172  FE                MOV     R6,A
   \   0173  A3                INC     DPTR
   \   0174  E0                MOVX    A,@DPTR
   \   0175  FD                MOV     R5,A
   \   0176  900000            MOV     DPTR,#$LOCBX LogMessage+3
   \   0179  E0                MOVX    A,@DPTR
   \   017A  FC                MOV     R4,A
   \   017B  A3                INC     DPTR
   \   017C  E0                MOVX    A,@DPTR
   \   017D  F582              MOV     DPL,A
   \   017F  8C83              MOV     DPH,R4
   \   0181  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0184  602F              JZ      ?0014
   \   0186            ?0016:
    151                          WDT = 1;
   \   0186  D2AE              SETB    IE.6
    152                          SWDT = 1;
   \   0188  D2BE              SETB    IP.6
    153                          fputc(fp, str1[i++]);
   \   018A  900000            MOV     DPTR,#$LOCBX LogMessage+3
   \   018D  E0                MOVX    A,@DPTR
   \   018E  FB                MOV     R3,A
   \   018F  A3                INC     DPTR
   \   0190  E0                MOVX    A,@DPTR
   \   0191  FA                MOV     R2,A
   \   0192  E0                MOVX    A,@DPTR
   \   0193  04                INC     A
   \   0194  F0                MOVX    @DPTR,A
   \   0195  900000            MOV     DPTR,#$LOCBX LogMessage+3
   \   0198  7003              JNZ     ?0134
   \   019A  E0                MOVX    A,@DPTR
   \   019B  04                INC     A
   \   019C  F0                MOVX    @DPTR,A
   \   019D            ?0134:
   \   019D  8A82              MOV     DPL,R2
   \   019F  8B83              MOV     DPH,R3
   \   01A1  120000            LCALL   ?LD_A_R567_DISP_L17
   \   01A4  FC                MOV     R4,A
   \   01A5  900000            MOV     DPTR,#$LOCBX LogMessage
   \   01A8  E0                MOVX    A,@DPTR
   \   01A9  FF                MOV     R7,A
   \   01AA  A3                INC     DPTR
   \   01AB  E0                MOVX    A,@DPTR
   \   01AC  FE                MOV     R6,A
   \   01AD  A3                INC     DPTR
   \   01AE  E0                MOVX    A,@DPTR
   \   01AF  FD                MOV     R5,A
   \   01B0  120000            LCALL   $REFFN fputc
    154                      }
    155          //            SendStringEOLRS232(str1);
    156                  }
   \   01B3  80B6              SJMP    ?0015
   \   01B5            ?0014:
   \   01B5            ?0013:
    157                  if (str2 != NULL) {
   \   01B5  900000            MOV     DPTR,#$LOCBX LogMessage+10
   \   01B8  E0                MOVX    A,@DPTR
   \   01B9  FF                MOV     R7,A
   \   01BA  A3                INC     DPTR
   \   01BB  E0                MOVX    A,@DPTR
   \   01BC  FE                MOV     R6,A
   \   01BD  A3                INC     DPTR
   \   01BE  E0                MOVX    A,@DPTR
   \   01BF  FD                MOV     R5,A
   \   01C0  4E                ORL     A,R6
   \   01C1  6061              JZ      ?0018
   \   01C3            ?0017:
    158                      fputc(fp, ' ');
   \   01C3  900000            MOV     DPTR,#$LOCBX LogMessage
   \   01C6  E0                MOVX    A,@DPTR
   \   01C7  FF                MOV     R7,A
   \   01C8  A3                INC     DPTR
   \   01C9  E0                MOVX    A,@DPTR
   \   01CA  FE                MOV     R6,A
   \   01CB  A3                INC     DPTR
   \   01CC  E0                MOVX    A,@DPTR
   \   01CD  FD                MOV     R5,A
   \   01CE  7C20              MOV     R4,#32
   \   01D0  120000            LCALL   $REFFN fputc
    159                      i = 0;
   \   01D3  900000            MOV     DPTR,#$LOCBX LogMessage+3
   \   01D6  E4                CLR     A
   \   01D7  F0                MOVX    @DPTR,A
   \   01D8  A3                INC     DPTR
   \   01D9  F0                MOVX    @DPTR,A
   \   01DA            ?0020:
    160                      while (str2[i] != 0x00) {
   \   01DA  900000            MOV     DPTR,#$LOCBX LogMessage+10
   \   01DD  E0                MOVX    A,@DPTR
   \   01DE  FF                MOV     R7,A
   \   01DF  A3                INC     DPTR
   \   01E0  E0                MOVX    A,@DPTR
   \   01E1  FE                MOV     R6,A
   \   01E2  A3                INC     DPTR
   \   01E3  E0                MOVX    A,@DPTR
   \   01E4  FD                MOV     R5,A
   \   01E5  900000            MOV     DPTR,#$LOCBX LogMessage+3
   \   01E8  E0                MOVX    A,@DPTR
   \   01E9  FC                MOV     R4,A
   \   01EA  A3                INC     DPTR
   \   01EB  E0                MOVX    A,@DPTR
   \   01EC  F582              MOV     DPL,A
   \   01EE  8C83              MOV     DPH,R4
   \   01F0  120000            LCALL   ?LD_A_R567_DISP_L17
   \   01F3  602F              JZ      ?0019
   \   01F5            ?0021:
    161                          WDT = 1;
   \   01F5  D2AE              SETB    IE.6
    162                          SWDT = 1;
   \   01F7  D2BE              SETB    IP.6
    163                          fputc(fp, str2[i++]);
   \   01F9  900000            MOV     DPTR,#$LOCBX LogMessage+3
   \   01FC  E0                MOVX    A,@DPTR
   \   01FD  FB                MOV     R3,A
   \   01FE  A3                INC     DPTR
   \   01FF  E0                MOVX    A,@DPTR
   \   0200  FA                MOV     R2,A
   \   0201  E0                MOVX    A,@DPTR
   \   0202  04                INC     A
   \   0203  F0                MOVX    @DPTR,A
   \   0204  900000            MOV     DPTR,#$LOCBX LogMessage+3
   \   0207  7003              JNZ     ?0135
   \   0209  E0                MOVX    A,@DPTR
   \   020A  04                INC     A
   \   020B  F0                MOVX    @DPTR,A
   \   020C            ?0135:
   \   020C  8A82              MOV     DPL,R2
   \   020E  8B83              MOV     DPH,R3
   \   0210  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0213  FC                MOV     R4,A
   \   0214  900000            MOV     DPTR,#$LOCBX LogMessage
   \   0217  E0                MOVX    A,@DPTR
   \   0218  FF                MOV     R7,A
   \   0219  A3                INC     DPTR
   \   021A  E0                MOVX    A,@DPTR
   \   021B  FE                MOV     R6,A
   \   021C  A3                INC     DPTR
   \   021D  E0                MOVX    A,@DPTR
   \   021E  FD                MOV     R5,A
   \   021F  120000            LCALL   $REFFN fputc
    164                      }
    165          //            SendStringEOLRS232(str2);
    166                  }
   \   0222  80B6              SJMP    ?0020
   \   0224            ?0019:
   \   0224            ?0018:
    167                  fputc(fp, '\r');
   \   0224  900000            MOV     DPTR,#$LOCBX LogMessage
   \   0227  E0                MOVX    A,@DPTR
   \   0228  FF                MOV     R7,A
   \   0229  A3                INC     DPTR
   \   022A  E0                MOVX    A,@DPTR
   \   022B  FE                MOV     R6,A
   \   022C  A3                INC     DPTR
   \   022D  E0                MOVX    A,@DPTR
   \   022E  FD                MOV     R5,A
   \   022F  7C0D              MOV     R4,#13
   \   0231  120000            LCALL   $REFFN fputc
    168                  fputc(fp, '\n');
   \   0234  900000            MOV     DPTR,#$LOCBX LogMessage
   \   0237  E0                MOVX    A,@DPTR
   \   0238  FF                MOV     R7,A
   \   0239  A3                INC     DPTR
   \   023A  E0                MOVX    A,@DPTR
   \   023B  FE                MOV     R6,A
   \   023C  A3                INC     DPTR
   \   023D  E0                MOVX    A,@DPTR
   \   023E  FD                MOV     R5,A
   \   023F  7C0A              MOV     R4,#10
   \   0241  120000            LCALL   $REFFN fputc
    169                  
    170                  if (fp->offset > 30000) {
   \   0244  900000            MOV     DPTR,#$LOCBX LogMessage
   \   0247  E0                MOVX    A,@DPTR
   \   0248  FF                MOV     R7,A
   \   0249  A3                INC     DPTR
   \   024A  E0                MOVX    A,@DPTR
   \   024B  FE                MOV     R6,A
   \   024C  A3                INC     DPTR
   \   024D  E0                MOVX    A,@DPTR
   \   024E  FD                MOV     R5,A
   \   024F  900015            MOV     DPTR,#21
   \   0252  120000            LCALL   ?LD_R0123_R567_DISP_L17
   \   0255  E4                CLR     A
   \   0256  FE                MOV     R6,A
   \   0257  FF                MOV     R7,A
   \   0258  7C30              MOV     R4,#48
   \   025A  7D75              MOV     R5,#117
   \   025C  740B              MOV     A,#11
   \   025E  120000            LCALL   ?L_CMP_L01
   \   0261  7009              JNZ     ?0023
   \   0263            ?0022:
    171                      //Varna att filen håller på att ta slut
    172                      SendStringEOLRS232("Log.txt low");
   \   0263  7D72              MOV     R5,#LOW(?0024)
   \   0265  7E00              MOV     R6,#HIGH(?0024)
   \   0267  7F02              MOV     R7,#2
   \   0269  120000            LCALL   $REFFN SendStringEOLRS232
   \   026C            ?0023:
    173                  }
    174                  logOffset = ftell(fp);
   \   026C  900000            MOV     DPTR,#$LOCBX LogMessage
   \   026F  E0                MOVX    A,@DPTR
   \   0270  FF                MOV     R7,A
   \   0271  A3                INC     DPTR
   \   0272  E0                MOVX    A,@DPTR
   \   0273  FE                MOV     R6,A
   \   0274  A3                INC     DPTR
   \   0275  E0                MOVX    A,@DPTR
   \   0276  FD                MOV     R5,A
   \   0277  120000            LCALL   $REFFN ftell
   \   027A  900000            MOV     DPTR,#logOffset
   \   027D  120000            LCALL   ?STO_R4567_DPTR_L20
    175              } else {
   \   0280  8009              SJMP    ?0025
   \   0282            ?0011:
    176                  SendStringEOLRS232("Could not open log file");
   \   0282  7D7E              MOV     R5,#LOW(?0026)
   \   0284  7E00              MOV     R6,#HIGH(?0026)
   \   0286  7F02              MOV     R7,#2
   \   0288  120000            LCALL   $REFFN SendStringEOLRS232
   \   028B            ?0025:
    177              }
    178              fclose(fp);
   \   028B  900000            MOV     DPTR,#$LOCBX LogMessage
   \   028E  E0                MOVX    A,@DPTR
   \   028F  FF                MOV     R7,A
   \   0290  A3                INC     DPTR
   \   0291  E0                MOVX    A,@DPTR
   \   0292  FE                MOV     R6,A
   \   0293  A3                INC     DPTR
   \   0294  E0                MOVX    A,@DPTR
   \   0295  FD                MOV     R5,A
   \   0296  120000            LCALL   $REFFN fclose
    179          
    180              WDT = 1;
   \   0299  D2AE              SETB    IE.6
    181              SWDT = 1;
   \   029B  D2BE              SETB    IP.6
    182          
    183          }
   \   029D  900000            MOV     DPTR,#$LOCBX LogMessage+5
   \   02A0  E0                MOVX    A,@DPTR
   \   02A1  F8                MOV     R0,A
   \   02A2  A3                INC     DPTR
   \   02A3  E0                MOVX    A,@DPTR
   \   02A4  C0E0              PUSH    ACC
   \   02A6  E8                MOV     A,R0
   \   02A7  C0E0              PUSH    ACC
   \   02A9  22                RET
    184          
    185          
    186          char    BuildCallerList( void )
    187          //Retunerar 1 om logfilen gick att öppna och läsa
    188          //retunerar 0 annars
    189          {
   \   02AA            BuildCallerList:
   \   02AA  900000            MOV     DPTR,#$LOCBX BuildCallerList+7
   \   02AD  D0E0              POP     ACC
   \   02AF  F0                MOVX    @DPTR,A
   \   02B0  A3                INC     DPTR
   \   02B1  D0E0              POP     ACC
   \   02B3  F0                MOVX    @DPTR,A
    190              xdata FILE*   fp;
    191              xdata long    t;
    192          
    193              numOfCalls = 0;
   \   02B4  900000            MOV     DPTR,#numOfCalls
   \   02B7  E4                CLR     A
   \   02B8  F0                MOVX    @DPTR,A
   \   02B9  A3                INC     DPTR
   \   02BA  F0                MOVX    @DPTR,A
    194              fp = fopen("Log.txt", "r");
   \   02BB  7F02              MOV     R7,#2
   \   02BD  900000            MOV     DPTR,#$PRMBX fopen+3
   \   02C0  EF                MOV     A,R7
   \   02C1  F0                MOVX    @DPTR,A
   \   02C2  A3                INC     DPTR
   \   02C3  7400              MOV     A,#HIGH(?0027)
   \   02C5  F0                MOVX    @DPTR,A
   \   02C6  A3                INC     DPTR
   \   02C7  7496              MOV     A,#LOW(?0027)
   \   02C9  F0                MOVX    @DPTR,A
   \   02CA  7D6A              MOV     R5,#LOW(?0009)
   \   02CC  7E00              MOV     R6,#HIGH(?0009)
   \   02CE  120000            LCALL   $REFFN fopen
    195          
    196              if (fp) {    
   \   02D1  900000            MOV     DPTR,#$LOCBX BuildCallerList
   \   02D4  EF                MOV     A,R7
   \   02D5  F0                MOVX    @DPTR,A
   \   02D6  A3                INC     DPTR
   \   02D7  EE                MOV     A,R6
   \   02D8  F0                MOVX    @DPTR,A
   \   02D9  A3                INC     DPTR
   \   02DA  ED                MOV     A,R5
   \   02DB  F0                MOVX    @DPTR,A
   \   02DC  4E                ORL     A,R6
   \   02DD  7003              JNZ     $+5
   \   02DF  02038E            LJMP    ?0029
   \   02E2            ?0028:
   \   02E2            ?0031:
    197                  while( FindNextCall(fp) ) {
   \   02E2  900000            MOV     DPTR,#$LOCBX BuildCallerList
   \   02E5  E0                MOVX    A,@DPTR
   \   02E6  FF                MOV     R7,A
   \   02E7  A3                INC     DPTR
   \   02E8  E0                MOVX    A,@DPTR
   \   02E9  FE                MOV     R6,A
   \   02EA  A3                INC     DPTR
   \   02EB  E0                MOVX    A,@DPTR
   \   02EC  FD                MOV     R5,A
   \   02ED  120000            LCALL   $REFFN FindNextCall
   \   02F0  EC                MOV     A,R4
   \   02F1  6041              JZ      ?0030
   \   02F3            ?0032:
    198                      t = ftell(fp);
   \   02F3  900000            MOV     DPTR,#$LOCBX BuildCallerList
   \   02F6  E0                MOVX    A,@DPTR
   \   02F7  FF                MOV     R7,A
   \   02F8  A3                INC     DPTR
   \   02F9  E0                MOVX    A,@DPTR
   \   02FA  FE                MOV     R6,A
   \   02FB  A3                INC     DPTR
   \   02FC  E0                MOVX    A,@DPTR
   \   02FD  FD                MOV     R5,A
   \   02FE  120000            LCALL   $REFFN ftell
    199          /*
    200                  SendStringRS232("Index: ");
    201                  myInt2DecStr(numOfCalls, msg);
    202                  SendStringRS232(msg);
    203                  SendStringRS232(" Address: ");
    204                  myLong2HexStr(t & 0xFFFF, msg);
    205                  SendStringEOLRS232(msg);
    206          */
    207                      callIndex[numOfCalls++] = t & 0xFFFF;
   \   0301  900000            MOV     DPTR,#$LOCBX BuildCallerList+3
   \   0304  120000            LCALL   ?STO_R4567_DPTR_L20
   \   0307  900000            MOV     DPTR,#numOfCalls
   \   030A  E0                MOVX    A,@DPTR
   \   030B  FF                MOV     R7,A
   \   030C  A3                INC     DPTR
   \   030D  E0                MOVX    A,@DPTR
   \   030E  FE                MOV     R6,A
   \   030F  E0                MOVX    A,@DPTR
   \   0310  04                INC     A
   \   0311  F0                MOVX    @DPTR,A
   \   0312  900000            MOV     DPTR,#numOfCalls
   \   0315  7003              JNZ     ?0136
   \   0317  E0                MOVX    A,@DPTR
   \   0318  04                INC     A
   \   0319  F0                MOVX    @DPTR,A
   \   031A            ?0136:
   \   031A  EE                MOV     A,R6
   \   031B  25E0              ADD     A,ACC
   \   031D  CF                XCH     A,R7
   \   031E  33                RLC     A
   \   031F  CF                XCH     A,R7
   \   0320  2404              ADD     A,#LOW(callIndex)
   \   0322  F582              MOV     DPL,A
   \   0324  EF                MOV     A,R7
   \   0325  3400              ADDC    A,#HIGH(callIndex)
   \   0327  F583              MOV     DPH,A
   \   0329  ED                MOV     A,R5
   \   032A  F0                MOVX    @DPTR,A
   \   032B  A3                INC     DPTR
   \   032C  EC                MOV     A,R4
   \   032D  F0                MOVX    @DPTR,A
    208                      WDT = 1;
   \   032E  D2AE              SETB    IE.6
    209                      SWDT = 1;
   \   0330  D2BE              SETB    IP.6
   \   0332  80AE              SJMP    ?0031
   \   0334            ?0030:
    210                  }
    211          
    212                  logOffset = ftell(fp) - 1;
   \   0334  900000            MOV     DPTR,#$LOCBX BuildCallerList
   \   0337  E0                MOVX    A,@DPTR
   \   0338  FF                MOV     R7,A
   \   0339  A3                INC     DPTR
   \   033A  E0                MOVX    A,@DPTR
   \   033B  FE                MOV     R6,A
   \   033C  A3                INC     DPTR
   \   033D  E0                MOVX    A,@DPTR
   \   033E  FD                MOV     R5,A
   \   033F  120000            LCALL   $REFFN ftell
   \   0342  74FF              MOV     A,#255
   \   0344  F8                MOV     R0,A
   \   0345  F9                MOV     R1,A
   \   0346  FA                MOV     R2,A
   \   0347  FB                MOV     R3,A
   \   0348  120000            LCALL   ?L_ADD_L01
   \   034B  900000            MOV     DPTR,#logOffset
   \   034E  120000            LCALL   ?STO_R4567_DPTR_L20
    213                  fclose(fp);
   \   0351  900000            MOV     DPTR,#$LOCBX BuildCallerList
   \   0354  E0                MOVX    A,@DPTR
   \   0355  FF                MOV     R7,A
   \   0356  A3                INC     DPTR
   \   0357  E0                MOVX    A,@DPTR
   \   0358  FE                MOV     R6,A
   \   0359  A3                INC     DPTR
   \   035A  E0                MOVX    A,@DPTR
   \   035B  FD                MOV     R5,A
   \   035C  120000            LCALL   $REFFN fclose
    214                  myInt2DecStr(numOfCalls, msg);
   \   035F  7401              MOV     A,#1
   \   0361  900000            MOV     DPTR,#$PRMBX myInt2DecStr+2
   \   0364  F0                MOVX    @DPTR,A
   \   0365  A3                INC     DPTR
   \   0366  7400              MOV     A,#HIGH(msg)
   \   0368  F0                MOVX    @DPTR,A
   \   0369  A3                INC     DPTR
   \   036A  7400              MOV     A,#LOW(msg)
   \   036C  F0                MOVX    @DPTR,A
   \   036D  900000            MOV     DPTR,#numOfCalls
   \   0370  E0                MOVX    A,@DPTR
   \   0371  FD                MOV     R5,A
   \   0372  A3                INC     DPTR
   \   0373  E0                MOVX    A,@DPTR
   \   0374  FC                MOV     R4,A
   \   0375  120000            LCALL   $REFFN myInt2DecStr
    215                  SendStringRS232("nCalls: ");
   \   0378  7D98              MOV     R5,#LOW(?0033)
   \   037A  7E00              MOV     R6,#HIGH(?0033)
   \   037C  7F02              MOV     R7,#2
   \   037E  120000            LCALL   $REFFN SendStringRS232
    216                  SendStringEOLRS232(msg);
   \   0381  7D00              MOV     R5,#LOW(msg)
   \   0383  7E00              MOV     R6,#HIGH(msg)
   \   0385  7F01              MOV     R7,#1
   \   0387  120000            LCALL   $REFFN SendStringEOLRS232
    217                  return 1; 
    218              } else {
   \   038A  7C01              MOV     R4,#1
   \   038C  8002              SJMP    ?0034
   \   038E            ?0029:
    219                  return 0;
   \   038E  7C00              MOV     R4,#0
    220              }
   \   0390            ?0034:
    221          }
   \   0390  900000            MOV     DPTR,#$LOCBX BuildCallerList+7
   \   0393  E0                MOVX    A,@DPTR
   \   0394  F8                MOV     R0,A
   \   0395  A3                INC     DPTR
   \   0396  E0                MOVX    A,@DPTR
   \   0397  C0E0              PUSH    ACC
   \   0399  E8                MOV     A,R0
   \   039A  C0E0              PUSH    ACC
   \   039C  22                RET
    222          
    223          
    224          
    225          
    226          
    227          char    FindCall(FILE* fp, int index)
    228          //Hittar den index:de uppringningen. Retunerar 1 om den hittas, eller 0 om den inte hittas.
    229          //Retunerar 0 om logfilen inte kan öppnas (om den inte finns)
    230          {
   \   039D            FindCall:
   \   039D  900000            MOV     DPTR,#$LOCBX FindCall
   \   03A0  D0E0              POP     ACC
   \   03A2  F0                MOVX    @DPTR,A
   \   03A3  A3                INC     DPTR
   \   03A4  D0E0              POP     ACC
   \   03A6  F0                MOVX    @DPTR,A
    231              if ((index < 0) || (index > numOfCalls)) return 0;
   \   03A7  A3                INC     DPTR
   \   03A8  EF                MOV     A,R7
   \   03A9  F0                MOVX    @DPTR,A
   \   03AA  A3                INC     DPTR
   \   03AB  EE                MOV     A,R6
   \   03AC  F0                MOVX    @DPTR,A
   \   03AD  A3                INC     DPTR
   \   03AE  ED                MOV     A,R5
   \   03AF  F0                MOVX    @DPTR,A
   \   03B0  A3                INC     DPTR
   \   03B1  E0                MOVX    A,@DPTR
   \   03B2  33                RLC     A
   \   03B3  4018              JC      ?0035
   \   03B5  E0                MOVX    A,@DPTR
   \   03B6  FB                MOV     R3,A
   \   03B7  A3                INC     DPTR
   \   03B8  E0                MOVX    A,@DPTR
   \   03B9  FA                MOV     R2,A
   \   03BA  900001            MOV     DPTR,#numOfCalls+1
   \   03BD  E0                MOVX    A,@DPTR
   \   03BE  C3                CLR     C
   \   03BF  9A                SUBB    A,R2
   \   03C0  900000            MOV     DPTR,#numOfCalls
   \   03C3  E0                MOVX    A,@DPTR
   \   03C4  6480              XRL     A,#128
   \   03C6  CB                XCH     A,R3
   \   03C7  6480              XRL     A,#128
   \   03C9  CB                XCH     A,R3
   \   03CA  9B                SUBB    A,R3
   \   03CB  5004              JNC     ?0036
   \   03CD            ?0037:
   \   03CD            ?0038:
   \   03CD            ?0035:
   \   03CD  7C00              MOV     R4,#0
   \   03CF  803E              SJMP    ?0041
   \   03D1            ?0036:
    232           
    233              if (fp) {
   \   03D1  ED                MOV     A,R5
   \   03D2  4E                ORL     A,R6
   \   03D3  6038              JZ      ?0040
   \   03D5            ?0039:
    234                  fSetPos(fp, callIndex[index]);
   \   03D5  900000            MOV     DPTR,#$LOCBX FindCall+5
   \   03D8  E0                MOVX    A,@DPTR
   \   03D9  FD                MOV     R5,A
   \   03DA  A3                INC     DPTR
   \   03DB  E0                MOVX    A,@DPTR
   \   03DC  25E0              ADD     A,ACC
   \   03DE  CD                XCH     A,R5
   \   03DF  33                RLC     A
   \   03E0  CD                XCH     A,R5
   \   03E1  2404              ADD     A,#LOW(callIndex)
   \   03E3  F582              MOV     DPL,A
   \   03E5  ED                MOV     A,R5
   \   03E6  3400              ADDC    A,#HIGH(callIndex)
   \   03E8  F583              MOV     DPH,A
   \   03EA  E0                MOVX    A,@DPTR
   \   03EB  FD                MOV     R5,A
   \   03EC  A3                INC     DPTR
   \   03ED  E0                MOVX    A,@DPTR
   \   03EE  FC                MOV     R4,A
   \   03EF  ED                MOV     A,R5
   \   03F0  33                RLC     A
   \   03F1  95E0              SUBB    A,ACC
   \   03F3  FE                MOV     R6,A
   \   03F4  FF                MOV     R7,A
   \   03F5  900000            MOV     DPTR,#$PRMBX fSetPos+3
   \   03F8  120000            LCALL   ?STO_R4567_DPTR_L20
   \   03FB  900000            MOV     DPTR,#$LOCBX FindCall+2
   \   03FE  E0                MOVX    A,@DPTR
   \   03FF  FF                MOV     R7,A
   \   0400  A3                INC     DPTR
   \   0401  E0                MOVX    A,@DPTR
   \   0402  FE                MOV     R6,A
   \   0403  A3                INC     DPTR
   \   0404  E0                MOVX    A,@DPTR
   \   0405  FD                MOV     R5,A
   \   0406  120000            LCALL   $REFFN fSetPos
    235          /*  
    236                  SendStringRS232("Index: ");
    237                  myInt2DecStr(index, msg);
    238                  SendStringRS232(msg);
    239                  SendStringRS232(" Address: ");
    240                  myLong2HexStr(callIndex[index], msg);
    241                  SendStringEOLRS232(msg);
    242          */
    243                  return 1;
    244              } else {
   \   0409  7C01              MOV     R4,#1
   \   040B  8002              SJMP    ?0041
   \   040D            ?0040:
    245                  return 0;
   \   040D  7C00              MOV     R4,#0
    246              }
   \   040F            ?0041:
    247          }
   \   040F  900000            MOV     DPTR,#$LOCBX FindCall
   \   0412  E0                MOVX    A,@DPTR
   \   0413  F8                MOV     R0,A
   \   0414  A3                INC     DPTR
   \   0415  E0                MOVX    A,@DPTR
   \   0416  C0E0              PUSH    ACC
   \   0418  E8                MOV     A,R0
   \   0419  C0E0              PUSH    ACC
   \   041B  22                RET
    248           
    249          
    250          char    FindNextCall(FILE* fp)
    251          //Hittar nästa uppringning. Retunerar 1 om någon hittas, annars 0.
    252          //OBS!: Kräver att logfilen är öppen i variabeln logFilePtr.
    253          {
   \   041C            FindNextCall:
   \   041C  900000            MOV     DPTR,#$LOCBX FindNextCall+3
   \   041F  D0E0              POP     ACC
   \   0421  F0                MOVX    @DPTR,A
   \   0422  A3                INC     DPTR
   \   0423  D0E0              POP     ACC
   \   0425  F0                MOVX    @DPTR,A
    254              xdata char    newCallFound = 0;
    255              xdata int     c = 0x00;
    256          
    257              newCallFound = 0;
   \   0426  900000            MOV     DPTR,#$LOCBX FindNextCall+1
   \   0429  E4                CLR     A
   \   042A  F0                MOVX    @DPTR,A
   \   042B  A3                INC     DPTR
   \   042C  F0                MOVX    @DPTR,A
   \   042D  900000            MOV     DPTR,#$LOCBX FindNextCall
   \   0430  F0                MOVX    @DPTR,A
   \   0431  900000            MOV     DPTR,#$LOCBX FindNextCall+5
   \   0434  EF                MOV     A,R7
   \   0435  F0                MOVX    @DPTR,A
   \   0436  A3                INC     DPTR
   \   0437  EE                MOV     A,R6
   \   0438  F0                MOVX    @DPTR,A
   \   0439  A3                INC     DPTR
   \   043A  ED                MOV     A,R5
   \   043B  F0                MOVX    @DPTR,A
   \   043C            ?0043:
    258              while ((!newCallFound) && (c != 0xFF)) {
   \   043C  900000            MOV     DPTR,#$LOCBX FindNextCall
   \   043F  E0                MOVX    A,@DPTR
   \   0440  6003              JZ      $+5
   \   0442  0204EF            LJMP    ?0042
   \   0445  A3                INC     DPTR
   \   0446  A3                INC     DPTR
   \   0447  E0                MOVX    A,@DPTR
   \   0448  04                INC     A
   \   0449  7009              JNZ     ?0137
   \   044B  900000            MOV     DPTR,#$LOCBX FindNextCall+1
   \   044E  E0                MOVX    A,@DPTR
   \   044F  7003              JNZ     $+5
   \   0451  0204EF            LJMP    ?0042
   \   0454            ?0137:
   \   0454            ?0046:
   \   0454            ?0045:
   \   0454            ?0044:
   \   0454            ?0048:
    259                  while ((c != 'N') && (c != 0xFF)) {
   \   0454  900000            MOV     DPTR,#$LOCBX FindNextCall+2
   \   0457  E0                MOVX    A,@DPTR
   \   0458  644E              XRL     A,#78
   \   045A  7006              JNZ     ?0138
   \   045C  900000            MOV     DPTR,#$LOCBX FindNextCall+1
   \   045F  E0                MOVX    A,@DPTR
   \   0460  6025              JZ      ?0047
   \   0462            ?0138:
   \   0462  900000            MOV     DPTR,#$LOCBX FindNextCall+2
   \   0465  E0                MOVX    A,@DPTR
   \   0466  04                INC     A
   \   0467  7006              JNZ     ?0139
   \   0469  900000            MOV     DPTR,#$LOCBX FindNextCall+1
   \   046C  E0                MOVX    A,@DPTR
   \   046D  6018              JZ      ?0047
   \   046F            ?0139:
   \   046F            ?0051:
   \   046F            ?0050:
   \   046F            ?0049:
    260                      c = fgetc(fp);
   \   046F  900000            MOV     DPTR,#$LOCBX FindNextCall+5
   \   0472  E0                MOVX    A,@DPTR
   \   0473  FF                MOV     R7,A
   \   0474  A3                INC     DPTR
   \   0475  E0                MOVX    A,@DPTR
   \   0476  FE                MOV     R6,A
   \   0477  A3                INC     DPTR
   \   0478  E0                MOVX    A,@DPTR
   \   0479  FD                MOV     R5,A
   \   047A  120000            LCALL   $REFFN fgetc
   \   047D  900000            MOV     DPTR,#$LOCBX FindNextCall+1
   \   0480  ED                MOV     A,R5
   \   0481  F0                MOVX    @DPTR,A
   \   0482  A3                INC     DPTR
   \   0483  EC                MOV     A,R4
   \   0484  F0                MOVX    @DPTR,A
   \   0485  80CD              SJMP    ?0048
   \   0487            ?0047:
    261                  }
    262                  if (c == 'N') {
   \   0487  900000            MOV     DPTR,#$LOCBX FindNextCall+2
   \   048A  E0                MOVX    A,@DPTR
   \   048B  644E              XRL     A,#78
   \   048D  7004              JNZ     ?0140
   \   048F  900000            MOV     DPTR,#$LOCBX FindNextCall+1
   \   0492  E0                MOVX    A,@DPTR
   \   0493            ?0140:
   \   0493  7057              JNZ     ?0053
   \   0495            ?0052:
    263                      if ((c = fgetc(fp)) == 'W')
   \   0495  900000            MOV     DPTR,#$LOCBX FindNextCall+5
   \   0498  E0                MOVX    A,@DPTR
   \   0499  FF                MOV     R7,A
   \   049A  A3                INC     DPTR
   \   049B  E0                MOVX    A,@DPTR
   \   049C  FE                MOV     R6,A
   \   049D  A3                INC     DPTR
   \   049E  E0                MOVX    A,@DPTR
   \   049F  FD                MOV     R5,A
   \   04A0  120000            LCALL   $REFFN fgetc
   \   04A3  900000            MOV     DPTR,#$LOCBX FindNextCall+1
   \   04A6  ED                MOV     A,R5
   \   04A7  F0                MOVX    @DPTR,A
   \   04A8  A3                INC     DPTR
   \   04A9  EC                MOV     A,R4
   \   04AA  F0                MOVX    @DPTR,A
   \   04AB  6457              XRL     A,#87
   \   04AD  4D                ORL     A,R5
   \   04AE  703C              JNZ     ?0055
   \   04B0            ?0054:
    264                          if ((c = fgetc(fp)) == 'C') 
   \   04B0  900000            MOV     DPTR,#$LOCBX FindNextCall+5
   \   04B3  E0                MOVX    A,@DPTR
   \   04B4  FF                MOV     R7,A
   \   04B5  A3                INC     DPTR
   \   04B6  E0                MOVX    A,@DPTR
   \   04B7  FE                MOV     R6,A
   \   04B8  A3                INC     DPTR
   \   04B9  E0                MOVX    A,@DPTR
   \   04BA  FD                MOV     R5,A
   \   04BB  120000            LCALL   $REFFN fgetc
   \   04BE  900000            MOV     DPTR,#$LOCBX FindNextCall+1
   \   04C1  ED                MOV     A,R5
   \   04C2  F0                MOVX    @DPTR,A
   \   04C3  A3                INC     DPTR
   \   04C4  EC                MOV     A,R4
   \   04C5  F0                MOVX    @DPTR,A
   \   04C6  6443              XRL     A,#67
   \   04C8  4D                ORL     A,R5
   \   04C9  7021              JNZ     ?0057
   \   04CB            ?0056:
    265                              if ((c = fgetc(fp)) == ' ') newCallFound = 1;
   \   04CB  900000            MOV     DPTR,#$LOCBX FindNextCall+5
   \   04CE  E0                MOVX    A,@DPTR
   \   04CF  FF                MOV     R7,A
   \   04D0  A3                INC     DPTR
   \   04D1  E0                MOVX    A,@DPTR
   \   04D2  FE                MOV     R6,A
   \   04D3  A3                INC     DPTR
   \   04D4  E0                MOVX    A,@DPTR
   \   04D5  FD                MOV     R5,A
   \   04D6  120000            LCALL   $REFFN fgetc
   \   04D9  900000            MOV     DPTR,#$LOCBX FindNextCall+1
   \   04DC  ED                MOV     A,R5
   \   04DD  F0                MOVX    @DPTR,A
   \   04DE  A3                INC     DPTR
   \   04DF  EC                MOV     A,R4
   \   04E0  F0                MOVX    @DPTR,A
   \   04E1  6420              XRL     A,#32
   \   04E3  4D                ORL     A,R5
   \   04E4  7006              JNZ     ?0059
   \   04E6            ?0058:
   \   04E6  7401              MOV     A,#1
   \   04E8  900000            MOV     DPTR,#$LOCBX FindNextCall
   \   04EB  F0                MOVX    @DPTR,A
   \   04EC            ?0059:
   \   04EC            ?0057:
   \   04EC            ?0055:
   \   04EC            ?0053:
   \   04EC  02043C            LJMP    ?0043
   \   04EF            ?0042:
    266                  }
    267              }
    268              return newCallFound;
   \   04EF  900000            MOV     DPTR,#$LOCBX FindNextCall
   \   04F2  E0                MOVX    A,@DPTR
   \   04F3  FC                MOV     R4,A
    269          }
   \   04F4  900000            MOV     DPTR,#$LOCBX FindNextCall+3
   \   04F7  E0                MOVX    A,@DPTR
   \   04F8  F8                MOV     R0,A
   \   04F9  A3                INC     DPTR
   \   04FA  E0                MOVX    A,@DPTR
   \   04FB  C0E0              PUSH    ACC
   \   04FD  E8                MOV     A,R0
   \   04FE  C0E0              PUSH    ACC
   \   0500  22                RET
    270          
    271          void    GetCallInformation(FILE* fp, char* phoneNumber, char* time, int* noOfMessages)
    272          {
   \   0501            GetCallInformation:
   \   0501  900000            MOV     DPTR,#$LOCBX GetCallInformation+11
   \   0504  D0E0              POP     ACC
   \   0506  F0                MOVX    @DPTR,A
   \   0507  A3                INC     DPTR
   \   0508  D0E0              POP     ACC
   \   050A  F0                MOVX    @DPTR,A
    273              xdata char    c;
    274              xdata char    done;
    275              xdata int     i;
    276              xdata char    logCode[5];
    277              xdata int     nom = 0;
    278          
    279              i = 0;
   \   050B  900000            MOV     DPTR,#$LOCBX GetCallInformation+9
   \   050E  E4                CLR     A
   \   050F  F0                MOVX    @DPTR,A
   \   0510  A3                INC     DPTR
   \   0511  F0                MOVX    @DPTR,A
   \   0512  900000            MOV     DPTR,#$LOCBX GetCallInformation+2
   \   0515  F0                MOVX    @DPTR,A
   \   0516  A3                INC     DPTR
   \   0517  F0                MOVX    @DPTR,A
   \   0518  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   051B  EF                MOV     A,R7
   \   051C  F0                MOVX    @DPTR,A
   \   051D  A3                INC     DPTR
   \   051E  EE                MOV     A,R6
   \   051F  F0                MOVX    @DPTR,A
   \   0520  A3                INC     DPTR
   \   0521  ED                MOV     A,R5
   \   0522  F0                MOVX    @DPTR,A
   \   0523            ?0061:
    280          
    281              while (((c = fgetc(fp)) != '\r') && (c != 0xFF)) {
   \   0523  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   0526  E0                MOVX    A,@DPTR
   \   0527  FF                MOV     R7,A
   \   0528  A3                INC     DPTR
   \   0529  E0                MOVX    A,@DPTR
   \   052A  FE                MOV     R6,A
   \   052B  A3                INC     DPTR
   \   052C  E0                MOVX    A,@DPTR
   \   052D  FD                MOV     R5,A
   \   052E  120000            LCALL   $REFFN fgetc
   \   0531  EC                MOV     A,R4
   \   0532  900000            MOV     DPTR,#$LOCBX GetCallInformation
   \   0535  F0                MOVX    @DPTR,A
   \   0536  640D              XRL     A,#13
   \   0538  6030              JZ      ?0060
   \   053A  EC                MOV     A,R4
   \   053B  04                INC     A
   \   053C  602C              JZ      ?0060
   \   053E            ?0064:
   \   053E            ?0063:
   \   053E            ?0062:
    282                  phoneNumber[i++] = c;
   \   053E  900000            MOV     DPTR,#$LOCBX GetCallInformation+16
   \   0541  E0                MOVX    A,@DPTR
   \   0542  FF                MOV     R7,A
   \   0543  A3                INC     DPTR
   \   0544  E0                MOVX    A,@DPTR
   \   0545  FE                MOV     R6,A
   \   0546  A3                INC     DPTR
   \   0547  E0                MOVX    A,@DPTR
   \   0548  FD                MOV     R5,A
   \   0549  900000            MOV     DPTR,#$LOCBX GetCallInformation+2
   \   054C  E0                MOVX    A,@DPTR
   \   054D  FB                MOV     R3,A
   \   054E  A3                INC     DPTR
   \   054F  E0                MOVX    A,@DPTR
   \   0550  FA                MOV     R2,A
   \   0551  E0                MOVX    A,@DPTR
   \   0552  04                INC     A
   \   0553  F0                MOVX    @DPTR,A
   \   0554  900000            MOV     DPTR,#$LOCBX GetCallInformation+2
   \   0557  7003              JNZ     ?0141
   \   0559  E0                MOVX    A,@DPTR
   \   055A  04                INC     A
   \   055B  F0                MOVX    @DPTR,A
   \   055C            ?0141:
   \   055C  8A82              MOV     DPL,R2
   \   055E  8B83              MOV     DPH,R3
   \   0560  EC                MOV     A,R4
   \   0561  120000            LCALL   ?ST_A_R567_DISP_L17
    283                  WDT = 1;
   \   0564  D2AE              SETB    IE.6
    284                  SWDT = 1;
   \   0566  D2BE              SETB    IP.6
   \   0568  80B9              SJMP    ?0061
   \   056A            ?0060:
    285              }
    286              
    287              if (c == 0xFF) {
   \   056A  EC                MOV     A,R4
   \   056B  04                INC     A
   \   056C  7009              JNZ     ?0066
   \   056E            ?0065:
    288                  SendStringEOLRS232("ERROR: End of Log file reached");
   \   056E  7DA1              MOV     R5,#LOW(?0067)
   \   0570  7E00              MOV     R6,#HIGH(?0067)
   \   0572  7F02              MOV     R7,#2
   \   0574  120000            LCALL   $REFFN SendStringEOLRS232
   \   0577            ?0066:
    289              }
    290          
    291              phoneNumber[i++] = 0;
   \   0577  900000            MOV     DPTR,#$LOCBX GetCallInformation+16
   \   057A  E0                MOVX    A,@DPTR
   \   057B  FF                MOV     R7,A
   \   057C  A3                INC     DPTR
   \   057D  E0                MOVX    A,@DPTR
   \   057E  FE                MOV     R6,A
   \   057F  A3                INC     DPTR
   \   0580  E0                MOVX    A,@DPTR
   \   0581  FD                MOV     R5,A
   \   0582  900000            MOV     DPTR,#$LOCBX GetCallInformation+2
   \   0585  E0                MOVX    A,@DPTR
   \   0586  FB                MOV     R3,A
   \   0587  A3                INC     DPTR
   \   0588  E0                MOVX    A,@DPTR
   \   0589  FA                MOV     R2,A
   \   058A  E0                MOVX    A,@DPTR
   \   058B  04                INC     A
   \   058C  F0                MOVX    @DPTR,A
   \   058D  900000            MOV     DPTR,#$LOCBX GetCallInformation+2
   \   0590  7003              JNZ     ?0142
   \   0592  E0                MOVX    A,@DPTR
   \   0593  04                INC     A
   \   0594  F0                MOVX    @DPTR,A
   \   0595            ?0142:
   \   0595  8A82              MOV     DPL,R2
   \   0597  8B83              MOV     DPH,R3
   \   0599  E4                CLR     A
   \   059A  120000            LCALL   ?ST_A_R567_DISP_L17
    292          
    293              fgetc(fp);                                      //Ät upp '\n'-tecknet
   \   059D  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   05A0  E0                MOVX    A,@DPTR
   \   05A1  FF                MOV     R7,A
   \   05A2  A3                INC     DPTR
   \   05A3  E0                MOVX    A,@DPTR
   \   05A4  FE                MOV     R6,A
   \   05A5  A3                INC     DPTR
   \   05A6  E0                MOVX    A,@DPTR
   \   05A7  FD                MOV     R5,A
   \   05A8  120000            LCALL   $REFFN fgetc
    294          
    295              done = 0;
   \   05AB  E4                CLR     A
   \   05AC  900000            MOV     DPTR,#$LOCBX GetCallInformation+1
   \   05AF  F0                MOVX    @DPTR,A
   \   05B0            ?0069:
    296          
    297              while (!done) {
   \   05B0  900000            MOV     DPTR,#$LOCBX GetCallInformation+1
   \   05B3  E0                MOVX    A,@DPTR
   \   05B4  6003              JZ      $+5
   \   05B6  020798            LJMP    ?0068
   \   05B9            ?0070:
    298              
    299                  WDT = 1;
   \   05B9  D2AE              SETB    IE.6
    300                  SWDT = 1;
   \   05BB  D2BE              SETB    IP.6
    301              
    302                  logCode[0] = fgetc(fp);
   \   05BD  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   05C0  E0                MOVX    A,@DPTR
   \   05C1  FF                MOV     R7,A
   \   05C2  A3                INC     DPTR
   \   05C3  E0                MOVX    A,@DPTR
   \   05C4  FE                MOV     R6,A
   \   05C5  A3                INC     DPTR
   \   05C6  E0                MOVX    A,@DPTR
   \   05C7  FD                MOV     R5,A
   \   05C8  120000            LCALL   $REFFN fgetc
   \   05CB  EC                MOV     A,R4
   \   05CC  900000            MOV     DPTR,#$LOCBX GetCallInformation+4
   \   05CF  F0                MOVX    @DPTR,A
    303                  logCode[1] = fgetc(fp);
   \   05D0  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   05D3  E0                MOVX    A,@DPTR
   \   05D4  FF                MOV     R7,A
   \   05D5  A3                INC     DPTR
   \   05D6  E0                MOVX    A,@DPTR
   \   05D7  FE                MOV     R6,A
   \   05D8  A3                INC     DPTR
   \   05D9  E0                MOVX    A,@DPTR
   \   05DA  FD                MOV     R5,A
   \   05DB  120000            LCALL   $REFFN fgetc
   \   05DE  EC                MOV     A,R4
   \   05DF  900000            MOV     DPTR,#$LOCBX GetCallInformation+5
   \   05E2  F0                MOVX    @DPTR,A
    304                  logCode[2] = fgetc(fp);
   \   05E3  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   05E6  E0                MOVX    A,@DPTR
   \   05E7  FF                MOV     R7,A
   \   05E8  A3                INC     DPTR
   \   05E9  E0                MOVX    A,@DPTR
   \   05EA  FE                MOV     R6,A
   \   05EB  A3                INC     DPTR
   \   05EC  E0                MOVX    A,@DPTR
   \   05ED  FD                MOV     R5,A
   \   05EE  120000            LCALL   $REFFN fgetc
   \   05F1  EC                MOV     A,R4
   \   05F2  900000            MOV     DPTR,#$LOCBX GetCallInformation+6
   \   05F5  F0                MOVX    @DPTR,A
    305                  logCode[3] = 0;
   \   05F6  E4                CLR     A
   \   05F7  A3                INC     DPTR
   \   05F8  F0                MOVX    @DPTR,A
    306                  fgetc(fp);
   \   05F9  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   05FC  E0                MOVX    A,@DPTR
   \   05FD  FF                MOV     R7,A
   \   05FE  A3                INC     DPTR
   \   05FF  E0                MOVX    A,@DPTR
   \   0600  FE                MOV     R6,A
   \   0601  A3                INC     DPTR
   \   0602  E0                MOVX    A,@DPTR
   \   0603  FD                MOV     R5,A
   \   0604  120000            LCALL   $REFFN fgetc
    307              
    308                  if (!myStrCmpNoCase(logCode, "TIM")) {
   \   0607  7F02              MOV     R7,#2
   \   0609  900000            MOV     DPTR,#$PRMBX myStrCmpNoCase+3
   \   060C  EF                MOV     A,R7
   \   060D  F0                MOVX    @DPTR,A
   \   060E  A3                INC     DPTR
   \   060F  7400              MOV     A,#HIGH(?0005)
   \   0611  F0                MOVX    @DPTR,A
   \   0612  A3                INC     DPTR
   \   0613  7443              MOV     A,#LOW(?0005)
   \   0615  F0                MOVX    @DPTR,A
   \   0616  7D00              MOV     R5,#LOW ($LOCBX GetCallInformation+4)
   \   0618  7E00              MOV     R6,#HIGH ($LOCBX GetCallInformation+4)
   \   061A  1F                DEC     R7
   \   061B  120000            LCALL   $REFFN myStrCmpNoCase
   \   061E  BC007D            CJNE    R4,#0,?0072
   \   0621            ?0071:
    309                      i = 0;
   \   0621  900000            MOV     DPTR,#$LOCBX GetCallInformation+2
   \   0624  E4                CLR     A
   \   0625  F0                MOVX    @DPTR,A
   \   0626  A3                INC     DPTR
   \   0627  F0                MOVX    @DPTR,A
   \   0628            ?0074:
    310                      while ((c = fgetc(fp)) != '\r') {
   \   0628  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   062B  E0                MOVX    A,@DPTR
   \   062C  FF                MOV     R7,A
   \   062D  A3                INC     DPTR
   \   062E  E0                MOVX    A,@DPTR
   \   062F  FE                MOV     R6,A
   \   0630  A3                INC     DPTR
   \   0631  E0                MOVX    A,@DPTR
   \   0632  FD                MOV     R5,A
   \   0633  120000            LCALL   $REFFN fgetc
   \   0636  EC                MOV     A,R4
   \   0637  900000            MOV     DPTR,#$LOCBX GetCallInformation
   \   063A  F0                MOVX    @DPTR,A
   \   063B  640D              XRL     A,#13
   \   063D  6028              JZ      ?0073
   \   063F            ?0075:
    311                          time[i++] = c;
   \   063F  900000            MOV     DPTR,#$LOCBX GetCallInformation+19
   \   0642  E0                MOVX    A,@DPTR
   \   0643  FF                MOV     R7,A
   \   0644  A3                INC     DPTR
   \   0645  E0                MOVX    A,@DPTR
   \   0646  FE                MOV     R6,A
   \   0647  A3                INC     DPTR
   \   0648  E0                MOVX    A,@DPTR
   \   0649  FD                MOV     R5,A
   \   064A  900000            MOV     DPTR,#$LOCBX GetCallInformation+2
   \   064D  E0                MOVX    A,@DPTR
   \   064E  FB                MOV     R3,A
   \   064F  A3                INC     DPTR
   \   0650  E0                MOVX    A,@DPTR
   \   0651  FA                MOV     R2,A
   \   0652  E0                MOVX    A,@DPTR
   \   0653  04                INC     A
   \   0654  F0                MOVX    @DPTR,A
   \   0655  900000            MOV     DPTR,#$LOCBX GetCallInformation+2
   \   0658  7003              JNZ     ?0143
   \   065A  E0                MOVX    A,@DPTR
   \   065B  04                INC     A
   \   065C  F0                MOVX    @DPTR,A
   \   065D            ?0143:
   \   065D  8A82              MOV     DPL,R2
   \   065F  8B83              MOV     DPH,R3
   \   0661  EC                MOV     A,R4
   \   0662  120000            LCALL   ?ST_A_R567_DISP_L17
   \   0665  80C1              SJMP    ?0074
   \   0667            ?0073:
    312                      }
    313                      time[i++] = 0;
   \   0667  900000            MOV     DPTR,#$LOCBX GetCallInformation+19
   \   066A  E0                MOVX    A,@DPTR
   \   066B  FF                MOV     R7,A
   \   066C  A3                INC     DPTR
   \   066D  E0                MOVX    A,@DPTR
   \   066E  FE                MOV     R6,A
   \   066F  A3                INC     DPTR
   \   0670  E0                MOVX    A,@DPTR
   \   0671  FD                MOV     R5,A
   \   0672  900000            MOV     DPTR,#$LOCBX GetCallInformation+2
   \   0675  E0                MOVX    A,@DPTR
   \   0676  FB                MOV     R3,A
   \   0677  A3                INC     DPTR
   \   0678  E0                MOVX    A,@DPTR
   \   0679  FA                MOV     R2,A
   \   067A  E0                MOVX    A,@DPTR
   \   067B  04                INC     A
   \   067C  F0                MOVX    @DPTR,A
   \   067D  900000            MOV     DPTR,#$LOCBX GetCallInformation+2
   \   0680  7003              JNZ     ?0144
   \   0682  E0                MOVX    A,@DPTR
   \   0683  04                INC     A
   \   0684  F0                MOVX    @DPTR,A
   \   0685            ?0144:
   \   0685  8A82              MOV     DPL,R2
   \   0687  8B83              MOV     DPH,R3
   \   0689  E4                CLR     A
   \   068A  120000            LCALL   ?ST_A_R567_DISP_L17
    314                      fgetc(fp);                                      //Ät upp '\n'-tecknet
   \   068D  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   0690  E0                MOVX    A,@DPTR
   \   0691  FF                MOV     R7,A
   \   0692  A3                INC     DPTR
   \   0693  E0                MOVX    A,@DPTR
   \   0694  FE                MOV     R6,A
   \   0695  A3                INC     DPTR
   \   0696  E0                MOVX    A,@DPTR
   \   0697  FD                MOV     R5,A
   \   0698  120000            LCALL   $REFFN fgetc
   \   069B  020795            LJMP    ?0076
   \   069E            ?0072:
    315                  } else if (!myStrCmpNoCase(logCode, "RCM")) {
   \   069E  7F02              MOV     R7,#2
   \   06A0  900000            MOV     DPTR,#$PRMBX myStrCmpNoCase+3
   \   06A3  EF                MOV     A,R7
   \   06A4  F0                MOVX    @DPTR,A
   \   06A5  A3                INC     DPTR
   \   06A6  7400              MOV     A,#HIGH(?0079)
   \   06A8  F0                MOVX    @DPTR,A
   \   06A9  A3                INC     DPTR
   \   06AA  74C0              MOV     A,#LOW(?0079)
   \   06AC  F0                MOVX    @DPTR,A
   \   06AD  7D00              MOV     R5,#LOW ($LOCBX GetCallInformation+4)
   \   06AF  7E00              MOV     R6,#HIGH ($LOCBX GetCallInformation+4)
   \   06B1  1F                DEC     R7
   \   06B2  120000            LCALL   $REFFN myStrCmpNoCase
   \   06B5  BC0035            CJNE    R4,#0,?0078
   \   06B8            ?0077:
    316                      nom++;
   \   06B8  900000            MOV     DPTR,#$LOCBX GetCallInformation+10
   \   06BB  E0                MOVX    A,@DPTR
   \   06BC  04                INC     A
   \   06BD  F0                MOVX    @DPTR,A
   \   06BE  900000            MOV     DPTR,#$LOCBX GetCallInformation+9
   \   06C1  7003              JNZ     ?0145
   \   06C3  E0                MOVX    A,@DPTR
   \   06C4  04                INC     A
   \   06C5  F0                MOVX    @DPTR,A
   \   06C6            ?0145:
   \   06C6            ?0081:
    317                      while (fgetc(fp) != '\r');
   \   06C6  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   06C9  E0                MOVX    A,@DPTR
   \   06CA  FF                MOV     R7,A
   \   06CB  A3                INC     DPTR
   \   06CC  E0                MOVX    A,@DPTR
   \   06CD  FE                MOV     R6,A
   \   06CE  A3                INC     DPTR
   \   06CF  E0                MOVX    A,@DPTR
   \   06D0  FD                MOV     R5,A
   \   06D1  120000            LCALL   $REFFN fgetc
   \   06D4  EC                MOV     A,R4
   \   06D5  640D              XRL     A,#13
   \   06D7  4D                ORL     A,R5
   \   06D8  6002              JZ      ?0080
   \   06DA            ?0082:
   \   06DA  80EA              SJMP    ?0081
   \   06DC            ?0080:
    318                      fgetc(fp);                                  //Ät upp '\n'-tecknet
   \   06DC  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   06DF  E0                MOVX    A,@DPTR
   \   06E0  FF                MOV     R7,A
   \   06E1  A3                INC     DPTR
   \   06E2  E0                MOVX    A,@DPTR
   \   06E3  FE                MOV     R6,A
   \   06E4  A3                INC     DPTR
   \   06E5  E0                MOVX    A,@DPTR
   \   06E6  FD                MOV     R5,A
   \   06E7  120000            LCALL   $REFFN fgetc
   \   06EA  020795            LJMP    ?0083
   \   06ED            ?0078:
    319                  } else if (!myStrCmpNoCase(logCode, "END")) {
   \   06ED  7F02              MOV     R7,#2
   \   06EF  900000            MOV     DPTR,#$PRMBX myStrCmpNoCase+3
   \   06F2  EF                MOV     A,R7
   \   06F3  F0                MOVX    @DPTR,A
   \   06F4  A3                INC     DPTR
   \   06F5  7400              MOV     A,#HIGH(?0007)
   \   06F7  F0                MOVX    @DPTR,A
   \   06F8  A3                INC     DPTR
   \   06F9  7456              MOV     A,#LOW(?0007)
   \   06FB  F0                MOVX    @DPTR,A
   \   06FC  7D00              MOV     R5,#LOW ($LOCBX GetCallInformation+4)
   \   06FE  7E00              MOV     R6,#HIGH ($LOCBX GetCallInformation+4)
   \   0700  1F                DEC     R7
   \   0701  120000            LCALL   $REFFN myStrCmpNoCase
   \   0704  BC0009            CJNE    R4,#0,?0085
   \   0707            ?0084:
    320                      done = 1;
   \   0707  7401              MOV     A,#1
   \   0709  900000            MOV     DPTR,#$LOCBX GetCallInformation+1
   \   070C  F0                MOVX    @DPTR,A
   \   070D  020795            LJMP    ?0086
   \   0710            ?0085:
    321                  } else if (!myStrCmpNoCase(logCode, "DSC")) {
   \   0710  7F02              MOV     R7,#2
   \   0712  900000            MOV     DPTR,#$PRMBX myStrCmpNoCase+3
   \   0715  EF                MOV     A,R7
   \   0716  F0                MOVX    @DPTR,A
   \   0717  A3                INC     DPTR
   \   0718  7400              MOV     A,#HIGH(?0089)
   \   071A  F0                MOVX    @DPTR,A
   \   071B  A3                INC     DPTR
   \   071C  74C4              MOV     A,#LOW(?0089)
   \   071E  F0                MOVX    @DPTR,A
   \   071F  7D00              MOV     R5,#LOW ($LOCBX GetCallInformation+4)
   \   0721  7E00              MOV     R6,#HIGH ($LOCBX GetCallInformation+4)
   \   0723  1F                DEC     R7
   \   0724  120000            LCALL   $REFFN myStrCmpNoCase
   \   0727  BC0008            CJNE    R4,#0,?0088
   \   072A            ?0087:
    322                      done = 1;
   \   072A  7401              MOV     A,#1
   \   072C  900000            MOV     DPTR,#$LOCBX GetCallInformation+1
   \   072F  F0                MOVX    @DPTR,A
   \   0730  8063              SJMP    ?0090
   \   0732            ?0088:
    323                  } else if (logCode[0] == 0xFF) {
   \   0732  900000            MOV     DPTR,#$LOCBX GetCallInformation+4
   \   0735  E0                MOVX    A,@DPTR
   \   0736  04                INC     A
   \   0737  7008              JNZ     ?0092
   \   0739            ?0091:
    324                      done = 1;
   \   0739  7401              MOV     A,#1
   \   073B  900000            MOV     DPTR,#$LOCBX GetCallInformation+1
   \   073E  F0                MOVX    @DPTR,A
   \   073F  8054              SJMP    ?0093
   \   0741            ?0092:
    325                  } else if (fp->offset >= fp->length) {
   \   0741  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   0744  E0                MOVX    A,@DPTR
   \   0745  FF                MOV     R7,A
   \   0746  A3                INC     DPTR
   \   0747  E0                MOVX    A,@DPTR
   \   0748  FE                MOV     R6,A
   \   0749  A3                INC     DPTR
   \   074A  E0                MOVX    A,@DPTR
   \   074B  FD                MOV     R5,A
   \   074C  900015            MOV     DPTR,#21
   \   074F  120000            LCALL   ?LD_R0123_R567_DISP_L17
   \   0752  EB                MOV     A,R3
   \   0753  C0E0              PUSH    ACC
   \   0755  EA                MOV     A,R2
   \   0756  C0E0              PUSH    ACC
   \   0758  E9                MOV     A,R1
   \   0759  C0E0              PUSH    ACC
   \   075B  E8                MOV     A,R0
   \   075C  C0E0              PUSH    ACC
   \   075E  900011            MOV     DPTR,#17
   \   0761  120000            LCALL   ?LD_R0123_R567_DISP_L17
   \   0764  D0E0              POP     ACC
   \   0766  FC                MOV     R4,A
   \   0767  D0E0              POP     ACC
   \   0769  FD                MOV     R5,A
   \   076A  D0E0              POP     ACC
   \   076C  FE                MOV     R6,A
   \   076D  D0E0              POP     ACC
   \   076F  FF                MOV     R7,A
   \   0770  7403              MOV     A,#3
   \   0772  120000            LCALL   ?L_CMP_L01
   \   0775  7008              JNZ     ?0095
   \   0777            ?0094:
    326                      done = 1;
   \   0777  7401              MOV     A,#1
   \   0779  900000            MOV     DPTR,#$LOCBX GetCallInformation+1
   \   077C  F0                MOVX    @DPTR,A
    327                  } else {
   \   077D  8016              SJMP    ?0096
   \   077F            ?0095:
   \   077F            ?0098:
    328                      while (fgetc(fp) != '\n');
   \   077F  900000            MOV     DPTR,#$LOCBX GetCallInformation+13
   \   0782  E0                MOVX    A,@DPTR
   \   0783  FF                MOV     R7,A
   \   0784  A3                INC     DPTR
   \   0785  E0                MOVX    A,@DPTR
   \   0786  FE                MOV     R6,A
   \   0787  A3                INC     DPTR
   \   0788  E0                MOVX    A,@DPTR
   \   0789  FD                MOV     R5,A
   \   078A  120000            LCALL   $REFFN fgetc
   \   078D  EC                MOV     A,R4
   \   078E  640A              XRL     A,#10
   \   0790  4D                ORL     A,R5
   \   0791  6002              JZ      ?0097
   \   0793            ?0099:
    329                  }
   \   0793  80EA              SJMP    ?0098
   \   0795            ?0097:
   \   0795            ?0096:
   \   0795            ?0093:
   \   0795            ?0090:
   \   0795            ?0086:
   \   0795            ?0083:
   \   0795            ?0076:
   \   0795  0205B0            LJMP    ?0069
   \   0798            ?0068:
    330              }    
    331              *noOfMessages = nom; 
   \   0798  900000            MOV     DPTR,#$LOCBX GetCallInformation+9
   \   079B  E0                MOVX    A,@DPTR
   \   079C  FD                MOV     R5,A
   \   079D  A3                INC     DPTR
   \   079E  E0                MOVX    A,@DPTR
   \   079F  FC                MOV     R4,A
   \   07A0  900000            MOV     DPTR,#$LOCBX GetCallInformation+22
   \   07A3  E0                MOVX    A,@DPTR
   \   07A4  FB                MOV     R3,A
   \   07A5  A3                INC     DPTR
   \   07A6  E0                MOVX    A,@DPTR
   \   07A7  FA                MOV     R2,A
   \   07A8  A3                INC     DPTR
   \   07A9  E0                MOVX    A,@DPTR
   \   07AA  F9                MOV     R1,A
   \   07AB  EC                MOV     A,R4
   \   07AC  120000            LCALL   ?ST_AR5_R123_L17
    332          }
   \   07AF  900000            MOV     DPTR,#$LOCBX GetCallInformation+11
   \   07B2  E0                MOVX    A,@DPTR
   \   07B3  F8                MOV     R0,A
   \   07B4  A3                INC     DPTR
   \   07B5  E0                MOVX    A,@DPTR
   \   07B6  C0E0              PUSH    ACC
   \   07B8  E8                MOV     A,R0
   \   07B9  C0E0              PUSH    ACC
   \   07BB  22                RET
    333          
    334          
    335          char    PlayThisCall(int clIndex)
    336          //Retunerar 1 om callIndex motsvarar ett existaerande meddelande, 0 annars
    337          //clIndex är kronologindexerad
    338          {
   \   07BC            PlayThisCall:
   \   07BC  900000            MOV     DPTR,#$LOCBX PlayThisCall+42
   \   07BF  D0E0              POP     ACC
   \   07C1  F0                MOVX    @DPTR,A
   \   07C2  A3                INC     DPTR
   \   07C3  D0E0              POP     ACC
   \   07C5  F0                MOVX    @DPTR,A
    339              xdata char      file[30];
    340              xdata char      done;
    341              xdata char      c;
    342              xdata char      logCode[5];
    343              xdata int       i;
    344              xdata FILE*     fp;
    345          
    346              fp = fopen("Log.txt", "r");
   \   07C6  A3                INC     DPTR
   \   07C7  ED                MOV     A,R5
   \   07C8  F0                MOVX    @DPTR,A
   \   07C9  A3                INC     DPTR
   \   07CA  EC                MOV     A,R4
   \   07CB  F0                MOVX    @DPTR,A
   \   07CC  7402              MOV     A,#2
   \   07CE  900000            MOV     DPTR,#$PRMBX fopen+3
   \   07D1  F0                MOVX    @DPTR,A
   \   07D2  A3                INC     DPTR
   \   07D3  7400              MOV     A,#HIGH(?0027)
   \   07D5  F0                MOVX    @DPTR,A
   \   07D6  A3                INC     DPTR
   \   07D7  7496              MOV     A,#LOW(?0027)
   \   07D9  F0                MOVX    @DPTR,A
   \   07DA  7D6A              MOV     R5,#LOW(?0009)
   \   07DC  7E00              MOV     R6,#HIGH(?0009)
   \   07DE  7F02              MOV     R7,#2
   \   07E0  120000            LCALL   $REFFN fopen
    347          
    348              if (FindCall(fp, clIndex)) {
   \   07E3  900000            MOV     DPTR,#$LOCBX PlayThisCall+39
   \   07E6  EF                MOV     A,R7
   \   07E7  F0                MOVX    @DPTR,A
   \   07E8  A3                INC     DPTR
   \   07E9  EE                MOV     A,R6
   \   07EA  F0                MOVX    @DPTR,A
   \   07EB  A3                INC     DPTR
   \   07EC  ED                MOV     A,R5
   \   07ED  F0                MOVX    @DPTR,A
   \   07EE  900000            MOV     DPTR,#$LOCBX PlayThisCall+44
   \   07F1  E0                MOVX    A,@DPTR
   \   07F2  FB                MOV     R3,A
   \   07F3  A3                INC     DPTR
   \   07F4  E0                MOVX    A,@DPTR
   \   07F5  900000            MOV     DPTR,#$PRMBX FindCall+3
   \   07F8  CB                XCH     A,R3
   \   07F9  F0                MOVX    @DPTR,A
   \   07FA  A3                INC     DPTR
   \   07FB  CB                XCH     A,R3
   \   07FC  F0                MOVX    @DPTR,A
   \   07FD  120000            LCALL   $REFFN FindCall
   \   0800  EC                MOV     A,R4
   \   0801  7003              JNZ     $+5
   \   0803  0209F2            LJMP    ?0101
   \   0806            ?0100:
   \   0806            ?0103:
    349                  while ((c = fgetc(fp)) != '\n');        //Äter upp telefonnummret
   \   0806  900000            MOV     DPTR,#$LOCBX PlayThisCall+39
   \   0809  E0                MOVX    A,@DPTR
   \   080A  FF                MOV     R7,A
   \   080B  A3                INC     DPTR
   \   080C  E0                MOVX    A,@DPTR
   \   080D  FE                MOV     R6,A
   \   080E  A3                INC     DPTR
   \   080F  E0                MOVX    A,@DPTR
   \   0810  FD                MOV     R5,A
   \   0811  120000            LCALL   $REFFN fgetc
   \   0814  EC                MOV     A,R4
   \   0815  900000            MOV     DPTR,#$LOCBX PlayThisCall+31
   \   0818  F0                MOVX    @DPTR,A
   \   0819  640A              XRL     A,#10
   \   081B  6002              JZ      ?0102
   \   081D            ?0104:
   \   081D  80E7              SJMP    ?0103
   \   081F            ?0102:
    350                  
    351                  done = 0;
   \   081F  E4                CLR     A
   \   0820  900000            MOV     DPTR,#$LOCBX PlayThisCall+30
   \   0823  F0                MOVX    @DPTR,A
   \   0824            ?0106:
    352                  
    353                  while (!done) {
   \   0824  900000            MOV     DPTR,#$LOCBX PlayThisCall+30
   \   0827  E0                MOVX    A,@DPTR
   \   0828  6003              JZ      $+5
   \   082A  0209EC            LJMP    ?0105
   \   082D            ?0107:
    354          
    355                      logCode[0] = fgetc(fp);
   \   082D  900000            MOV     DPTR,#$LOCBX PlayThisCall+39
   \   0830  E0                MOVX    A,@DPTR
   \   0831  FF                MOV     R7,A
   \   0832  A3                INC     DPTR
   \   0833  E0                MOVX    A,@DPTR
   \   0834  FE                MOV     R6,A
   \   0835  A3                INC     DPTR
   \   0836  E0                MOVX    A,@DPTR
   \   0837  FD                MOV     R5,A
   \   0838  120000            LCALL   $REFFN fgetc
   \   083B  EC                MOV     A,R4
   \   083C  900000            MOV     DPTR,#$LOCBX PlayThisCall+32
   \   083F  F0                MOVX    @DPTR,A
    356                      logCode[1] = fgetc(fp);
   \   0840  900000            MOV     DPTR,#$LOCBX PlayThisCall+39
   \   0843  E0                MOVX    A,@DPTR
   \   0844  FF                MOV     R7,A
   \   0845  A3                INC     DPTR
   \   0846  E0                MOVX    A,@DPTR
   \   0847  FE                MOV     R6,A
   \   0848  A3                INC     DPTR
   \   0849  E0                MOVX    A,@DPTR
   \   084A  FD                MOV     R5,A
   \   084B  120000            LCALL   $REFFN fgetc
   \   084E  EC                MOV     A,R4
   \   084F  900000            MOV     DPTR,#$LOCBX PlayThisCall+33
   \   0852  F0                MOVX    @DPTR,A
    357                      logCode[2] = fgetc(fp);
   \   0853  900000            MOV     DPTR,#$LOCBX PlayThisCall+39
   \   0856  E0                MOVX    A,@DPTR
   \   0857  FF                MOV     R7,A
   \   0858  A3                INC     DPTR
   \   0859  E0                MOVX    A,@DPTR
   \   085A  FE                MOV     R6,A
   \   085B  A3                INC     DPTR
   \   085C  E0                MOVX    A,@DPTR
   \   085D  FD                MOV     R5,A
   \   085E  120000            LCALL   $REFFN fgetc
   \   0861  EC                MOV     A,R4
   \   0862  900000            MOV     DPTR,#$LOCBX PlayThisCall+34
   \   0865  F0                MOVX    @DPTR,A
    358                      logCode[3] = 0;
   \   0866  E4                CLR     A
   \   0867  A3                INC     DPTR
   \   0868  F0                MOVX    @DPTR,A
    359                      fgetc(fp);
   \   0869  900000            MOV     DPTR,#$LOCBX PlayThisCall+39
   \   086C  E0                MOVX    A,@DPTR
   \   086D  FF                MOV     R7,A
   \   086E  A3                INC     DPTR
   \   086F  E0                MOVX    A,@DPTR
   \   0870  FE                MOV     R6,A
   \   0871  A3                INC     DPTR
   \   0872  E0                MOVX    A,@DPTR
   \   0873  FD                MOV     R5,A
   \   0874  120000            LCALL   $REFFN fgetc
    360              
    361                      if (!myStrCmpNoCase(logCode, "RCM")) {
   \   0877  7F02              MOV     R7,#2
   \   0879  900000            MOV     DPTR,#$PRMBX myStrCmpNoCase+3
   \   087C  EF                MOV     A,R7
   \   087D  F0                MOVX    @DPTR,A
   \   087E  A3                INC     DPTR
   \   087F  7400              MOV     A,#HIGH(?0079)
   \   0881  F0                MOVX    @DPTR,A
   \   0882  A3                INC     DPTR
   \   0883  74C0              MOV     A,#LOW(?0079)
   \   0885  F0                MOVX    @DPTR,A
   \   0886  7D00              MOV     R5,#LOW ($LOCBX PlayThisCall+32)
   \   0888  7E00              MOV     R6,#HIGH ($LOCBX PlayThisCall+32)
   \   088A  1F                DEC     R7
   \   088B  120000            LCALL   $REFFN myStrCmpNoCase
   \   088E  BC0002            CJNE    R4,#0,$+5
   \   0891  8003              SJMP    $+5
   \   0893  020941            LJMP    ?0109
   \   0896            ?0108:
    362                          i = 0;
   \   0896  900000            MOV     DPTR,#$LOCBX PlayThisCall+37
   \   0899  E4                CLR     A
   \   089A  F0                MOVX    @DPTR,A
   \   089B  A3                INC     DPTR
   \   089C  F0                MOVX    @DPTR,A
   \   089D            ?0111:
    363                          while ((c = fgetc(fp)) != '\r') {
   \   089D  900000            MOV     DPTR,#$LOCBX PlayThisCall+39
   \   08A0  E0                MOVX    A,@DPTR
   \   08A1  FF                MOV     R7,A
   \   08A2  A3                INC     DPTR
   \   08A3  E0                MOVX    A,@DPTR
   \   08A4  FE                MOV     R6,A
   \   08A5  A3                INC     DPTR
   \   08A6  E0                MOVX    A,@DPTR
   \   08A7  FD                MOV     R5,A
   \   08A8  120000            LCALL   $REFFN fgetc
   \   08AB  EC                MOV     A,R4
   \   08AC  900000            MOV     DPTR,#$LOCBX PlayThisCall+31
   \   08AF  F0                MOVX    @DPTR,A
   \   08B0  640D              XRL     A,#13
   \   08B2  6021              JZ      ?0110
   \   08B4            ?0112:
    364                              file[i++] = c;
   \   08B4  900000            MOV     DPTR,#$LOCBX PlayThisCall+37
   \   08B7  E0                MOVX    A,@DPTR
   \   08B8  FF                MOV     R7,A
   \   08B9  A3                INC     DPTR
   \   08BA  E0                MOVX    A,@DPTR
   \   08BB  FE                MOV     R6,A
   \   08BC  E0                MOVX    A,@DPTR
   \   08BD  04                INC     A
   \   08BE  F0                MOVX    @DPTR,A
   \   08BF  900000            MOV     DPTR,#$LOCBX PlayThisCall+37
   \   08C2  7003              JNZ     ?0146
   \   08C4  E0                MOVX    A,@DPTR
   \   08C5  04                INC     A
   \   08C6  F0                MOVX    @DPTR,A
   \   08C7            ?0146:
   \   08C7  EE                MOV     A,R6
   \   08C8  2400              ADD     A,#LOW $LOCBX PlayThisCall
   \   08CA  F582              MOV     DPL,A
   \   08CC  E4                CLR     A
   \   08CD  3400              ADDC    A,#HIGH $LOCBX PlayThisCall
   \   08CF  F583              MOV     DPH,A
   \   08D1  EC                MOV     A,R4
   \   08D2  F0                MOVX    @DPTR,A
   \   08D3  80C8              SJMP    ?0111
   \   08D5            ?0110:
    365                          }
    366                          file[i++] = 0;
   \   08D5  900000            MOV     DPTR,#$LOCBX PlayThisCall+37
   \   08D8  E0                MOVX    A,@DPTR
   \   08D9  FD                MOV     R5,A
   \   08DA  A3                INC     DPTR
   \   08DB  E0                MOVX    A,@DPTR
   \   08DC  FC                MOV     R4,A
   \   08DD  E0                MOVX    A,@DPTR
   \   08DE  04                INC     A
   \   08DF  F0                MOVX    @DPTR,A
   \   08E0  900000            MOV     DPTR,#$LOCBX PlayThisCall+37
   \   08E3  7003              JNZ     ?0147
   \   08E5  E0                MOVX    A,@DPTR
   \   08E6  04                INC     A
   \   08E7  F0                MOVX    @DPTR,A
   \   08E8            ?0147:
   \   08E8  EC                MOV     A,R4
   \   08E9  2400              ADD     A,#LOW $LOCBX PlayThisCall
   \   08EB  F582              MOV     DPL,A
   \   08ED  E4                CLR     A
   \   08EE  3400              ADDC    A,#HIGH $LOCBX PlayThisCall
   \   08F0  F583              MOV     DPH,A
   \   08F2  E4                CLR     A
   \   08F3  F0                MOVX    @DPTR,A
    367                          fgetc(fp);                                      //Ät upp '\n'-tecknet
   \   08F4  900000            MOV     DPTR,#$LOCBX PlayThisCall+39
   \   08F7  E0                MOVX    A,@DPTR
   \   08F8  FF                MOV     R7,A
   \   08F9  A3                INC     DPTR
   \   08FA  E0                MOVX    A,@DPTR
   \   08FB  FE                MOV     R6,A
   \   08FC  A3                INC     DPTR
   \   08FD  E0                MOVX    A,@DPTR
   \   08FE  FD                MOV     R5,A
   \   08FF  120000            LCALL   $REFFN fgetc
    368          
    369                          DispInfoBox("Now playing:", file);
   \   0902  7F01              MOV     R7,#1
   \   0904  900000            MOV     DPTR,#$PRMBX DispInfoBox+3
   \   0907  EF                MOV     A,R7
   \   0908  F0                MOVX    @DPTR,A
   \   0909  A3                INC     DPTR
   \   090A  7400              MOV     A,#HIGH $LOCBX PlayThisCall
   \   090C  F0                MOVX    @DPTR,A
   \   090D  A3                INC     DPTR
   \   090E  7400              MOV     A,#LOW $LOCBX PlayThisCall
   \   0910  F0                MOVX    @DPTR,A
   \   0911  7DC8              MOV     R5,#LOW(?0113)
   \   0913  7E00              MOV     R6,#HIGH(?0113)
   \   0915  0F                INC     R7
   \   0916  120000            LCALL   $REFFN DispInfoBox
    370                          SpeakerVolume(speakerVolume);
   \   0919  900000            MOV     DPTR,#speakerVolume
   \   091C  E0                MOVX    A,@DPTR
   \   091D  FC                MOV     R4,A
   \   091E  120000            LCALL   $REFFN SpeakerVolume
    371                          PhoneInVolume(0);
   \   0921  7C00              MOV     R4,#0
   \   0923  120000            LCALL   $REFFN PhoneInVolume
    372                          PlayFile(file);   
   \   0926  7D00              MOV     R5,#LOW $LOCBX PlayThisCall
   \   0928  7E00              MOV     R6,#HIGH $LOCBX PlayThisCall
   \   092A  7F01              MOV     R7,#1
   \   092C  120000            LCALL   $REFFN PlayFile
    373                          SpeakerVolume(0);
   \   092F  7C00              MOV     R4,#0
   \   0931  120000            LCALL   $REFFN SpeakerVolume
    374                          PhoneInVolume(63);
   \   0934  7C3F              MOV     R4,#63
   \   0936  120000            LCALL   $REFFN PhoneInVolume
    375                          receivedDTMF = 0;
   \   0939  E4                CLR     A
   \   093A  900000            MOV     DPTR,#receivedDTMF
   \   093D  F0                MOVX    @DPTR,A
   \   093E  0209E9            LJMP    ?0114
   \   0941            ?0109:
    376          
    377                      } else if (!myStrCmpNoCase(logCode, "END")) {
   \   0941  7F02              MOV     R7,#2
   \   0943  900000            MOV     DPTR,#$PRMBX myStrCmpNoCase+3
   \   0946  EF                MOV     A,R7
   \   0947  F0                MOVX    @DPTR,A
   \   0948  A3                INC     DPTR
   \   0949  7400              MOV     A,#HIGH(?0007)
   \   094B  F0                MOVX    @DPTR,A
   \   094C  A3                INC     DPTR
   \   094D  7456              MOV     A,#LOW(?0007)
   \   094F  F0                MOVX    @DPTR,A
   \   0950  7D00              MOV     R5,#LOW ($LOCBX PlayThisCall+32)
   \   0952  7E00              MOV     R6,#HIGH ($LOCBX PlayThisCall+32)
   \   0954  1F                DEC     R7
   \   0955  120000            LCALL   $REFFN myStrCmpNoCase
   \   0958  BC0009            CJNE    R4,#0,?0116
   \   095B            ?0115:
    378                          done = 1;
   \   095B  7401              MOV     A,#1
   \   095D  900000            MOV     DPTR,#$LOCBX PlayThisCall+30
   \   0960  F0                MOVX    @DPTR,A
   \   0961  0209E9            LJMP    ?0117
   \   0964            ?0116:
    379                      } else if (!myStrCmpNoCase(logCode, "DSC")) {
   \   0964  7F02              MOV     R7,#2
   \   0966  900000            MOV     DPTR,#$PRMBX myStrCmpNoCase+3
   \   0969  EF                MOV     A,R7
   \   096A  F0                MOVX    @DPTR,A
   \   096B  A3                INC     DPTR
   \   096C  7400              MOV     A,#HIGH(?0089)
   \   096E  F0                MOVX    @DPTR,A
   \   096F  A3                INC     DPTR
   \   0970  74C4              MOV     A,#LOW(?0089)
   \   0972  F0                MOVX    @DPTR,A
   \   0973  7D00              MOV     R5,#LOW ($LOCBX PlayThisCall+32)
   \   0975  7E00              MOV     R6,#HIGH ($LOCBX PlayThisCall+32)
   \   0977  1F                DEC     R7
   \   0978  120000            LCALL   $REFFN myStrCmpNoCase
   \   097B  BC0008            CJNE    R4,#0,?0119
   \   097E            ?0118:
    380                          done = 1;
   \   097E  7401              MOV     A,#1
   \   0980  900000            MOV     DPTR,#$LOCBX PlayThisCall+30
   \   0983  F0                MOVX    @DPTR,A
   \   0984  8063              SJMP    ?0120
   \   0986            ?0119:
    381                      } else if (logCode[0] == 0xFF) {
   \   0986  900000            MOV     DPTR,#$LOCBX PlayThisCall+32
   \   0989  E0                MOVX    A,@DPTR
   \   098A  04                INC     A
   \   098B  7008              JNZ     ?0122
   \   098D            ?0121:
    382                          done = 1;
   \   098D  7401              MOV     A,#1
   \   098F  900000            MOV     DPTR,#$LOCBX PlayThisCall+30
   \   0992  F0                MOVX    @DPTR,A
   \   0993  8054              SJMP    ?0123
   \   0995            ?0122:
    383                      } else if (fp->offset >= fp->length) {
   \   0995  900000            MOV     DPTR,#$LOCBX PlayThisCall+39
   \   0998  E0                MOVX    A,@DPTR
   \   0999  FF                MOV     R7,A
   \   099A  A3                INC     DPTR
   \   099B  E0                MOVX    A,@DPTR
   \   099C  FE                MOV     R6,A
   \   099D  A3                INC     DPTR
   \   099E  E0                MOVX    A,@DPTR
   \   099F  FD                MOV     R5,A
   \   09A0  900015            MOV     DPTR,#21
   \   09A3  120000            LCALL   ?LD_R0123_R567_DISP_L17
   \   09A6  EB                MOV     A,R3
   \   09A7  C0E0              PUSH    ACC
   \   09A9  EA                MOV     A,R2
   \   09AA  C0E0              PUSH    ACC
   \   09AC  E9                MOV     A,R1
   \   09AD  C0E0              PUSH    ACC
   \   09AF  E8                MOV     A,R0
   \   09B0  C0E0              PUSH    ACC
   \   09B2  900011            MOV     DPTR,#17
   \   09B5  120000            LCALL   ?LD_R0123_R567_DISP_L17
   \   09B8  D0E0              POP     ACC
   \   09BA  FC                MOV     R4,A
   \   09BB  D0E0              POP     ACC
   \   09BD  FD                MOV     R5,A
   \   09BE  D0E0              POP     ACC
   \   09C0  FE                MOV     R6,A
   \   09C1  D0E0              POP     ACC
   \   09C3  FF                MOV     R7,A
   \   09C4  7403              MOV     A,#3
   \   09C6  120000            LCALL   ?L_CMP_L01
   \   09C9  7008              JNZ     ?0125
   \   09CB            ?0124:
    384                          done = 1;
   \   09CB  7401              MOV     A,#1
   \   09CD  900000            MOV     DPTR,#$LOCBX PlayThisCall+30
   \   09D0  F0                MOVX    @DPTR,A
    385                      } else {
   \   09D1  8016              SJMP    ?0126
   \   09D3            ?0125:
   \   09D3            ?0128:
    386                          while (fgetc(fp) != '\n');
   \   09D3  900000            MOV     DPTR,#$LOCBX PlayThisCall+39
   \   09D6  E0                MOVX    A,@DPTR
   \   09D7  FF                MOV     R7,A
   \   09D8  A3                INC     DPTR
   \   09D9  E0                MOVX    A,@DPTR
   \   09DA  FE                MOV     R6,A
   \   09DB  A3                INC     DPTR
   \   09DC  E0                MOVX    A,@DPTR
   \   09DD  FD                MOV     R5,A
   \   09DE  120000            LCALL   $REFFN fgetc
   \   09E1  EC                MOV     A,R4
   \   09E2  640A              XRL     A,#10
   \   09E4  4D                ORL     A,R5
   \   09E5  6002              JZ      ?0127
   \   09E7            ?0129:
    387                      }
   \   09E7  80EA              SJMP    ?0128
   \   09E9            ?0127:
   \   09E9            ?0126:
   \   09E9            ?0123:
   \   09E9            ?0120:
   \   09E9            ?0117:
   \   09E9            ?0114:
   \   09E9  020824            LJMP    ?0106
   \   09EC            ?0105:
    388                  }
    389                  c = 1;
   \   09EC  7401              MOV     A,#1
   \   09EE  A3                INC     DPTR
   \   09EF  F0                MOVX    @DPTR,A
    390              } else {
   \   09F0  8005              SJMP    ?0130
   \   09F2            ?0101:
    391                  c = 0;
   \   09F2  E4                CLR     A
   \   09F3  900000            MOV     DPTR,#$LOCBX PlayThisCall+31
   \   09F6  F0                MOVX    @DPTR,A
   \   09F7            ?0130:
    392              }
    393              fclose(fp);
   \   09F7  900000            MOV     DPTR,#$LOCBX PlayThisCall+39
   \   09FA  E0                MOVX    A,@DPTR
   \   09FB  FF                MOV     R7,A
   \   09FC  A3                INC     DPTR
   \   09FD  E0                MOVX    A,@DPTR
   \   09FE  FE                MOV     R6,A
   \   09FF  A3                INC     DPTR
   \   0A00  E0                MOVX    A,@DPTR
   \   0A01  FD                MOV     R5,A
   \   0A02  120000            LCALL   $REFFN fclose
    394              return c;
    395          }
   \   0A05  900000            MOV     DPTR,#$LOCBX PlayThisCall+31
   \   0A08  E0                MOVX    A,@DPTR
   \   0A09  FC                MOV     R4,A
   \   0A0A  900000            MOV     DPTR,#$LOCBX PlayThisCall+42
   \   0A0D  E0                MOVX    A,@DPTR
   \   0A0E  F8                MOV     R0,A
   \   0A0F  A3                INC     DPTR
   \   0A10  E0                MOVX    A,@DPTR
   \   0A11  C0E0              PUSH    ACC
   \   0A13  E8                MOV     A,R0
   \   0A14  C0E0              PUSH    ACC
   \   0A16  22                RET
    396          
    397          
    398          void    PlayNewMessages( void )
    399          {
   \   0A17            PlayNewMessages:
   \   0A17  900000            MOV     DPTR,#$LOCBX PlayNewMessages+2
   \   0A1A  D0E0              POP     ACC
   \   0A1C  F0                MOVX    @DPTR,A
   \   0A1D  A3                INC     DPTR
   \   0A1E  D0E0              POP     ACC
   \   0A20  F0                MOVX    @DPTR,A
    400              xdata int i;
    401          
    402              i = lastPlayed;
   \   0A21  900000            MOV     DPTR,#lastPlayed
   \   0A24  E0                MOVX    A,@DPTR
   \   0A25  FD                MOV     R5,A
   \   0A26  A3                INC     DPTR
   \   0A27  E0                MOVX    A,@DPTR
   \   0A28  900000            MOV     DPTR,#$LOCBX PlayNewMessages
   \   0A2B  CD                XCH     A,R5
   \   0A2C  F0                MOVX    @DPTR,A
   \   0A2D  A3                INC     DPTR
   \   0A2E  CD                XCH     A,R5
   \   0A2F  F0                MOVX    @DPTR,A
   \   0A30            ?0133:
    403                   
    404              do {
    405                  i++;
   \   0A30  900000            MOV     DPTR,#$LOCBX PlayNewMessages+1
   \   0A33  E0                MOVX    A,@DPTR
   \   0A34  04                INC     A
   \   0A35  F0                MOVX    @DPTR,A
   \   0A36  900000            MOV     DPTR,#$LOCBX PlayNewMessages
   \   0A39  7003              JNZ     ?0148
   \   0A3B  E0                MOVX    A,@DPTR
   \   0A3C  04                INC     A
   \   0A3D  F0                MOVX    @DPTR,A
   \   0A3E            ?0148:
    406                  WDT = 1;
   \   0A3E  D2AE              SETB    IE.6
    407                  SWDT = 1;
   \   0A40  D2BE              SETB    IP.6
    408              } while (PlayThisCall(i));
   \   0A42  E0                MOVX    A,@DPTR
   \   0A43  FD                MOV     R5,A
   \   0A44  A3                INC     DPTR
   \   0A45  E0                MOVX    A,@DPTR
   \   0A46  FC                MOV     R4,A
   \   0A47  120000            LCALL   $REFFN PlayThisCall
   \   0A4A  BC00E3            CJNE    R4,#0,?0133
   \   0A4D            ?0131:
    409              
    410          }
   \   0A4D  900000            MOV     DPTR,#$LOCBX PlayNewMessages+2
   \   0A50  E0                MOVX    A,@DPTR
   \   0A51  F8                MOV     R0,A
   \   0A52  A3                INC     DPTR
   \   0A53  E0                MOVX    A,@DPTR
   \   0A54  C0E0              PUSH    ACC
   \   0A56  E8                MOV     A,R0
   \   0A57  C0E0              PUSH    ACC
   \   0A59  22                RET
    411          
    412          
    413          
    414          
    415          
    416          
    417          
    418          
    419          
    420          
    421          
    422           
   \   0000                    RSEG    CSTR
   \   0000            ?0000:
   \   0000  53746172          DB      'Starting logfile...',0
   \   0004  74696E67
   \   0008  206C6F67
   \   000C  66696C65
   \   0010  2E2E2E00
   \   0014            ?0001:
   \   0014  57726974          DB      'Writing rows 1',0
   \   0018  696E6720
   \   001C  726F7773
   \   0020  203100
   \   0023            ?0002:
   \   0023  4E574300          DB      'NWC',0
   \   0027            ?0003:
   \   0027  53746172          DB      'Start of log',0
   \   002B  74206F66
   \   002F  206C6F67
   \   0033  00
   \   0034            ?0004:
   \   0034  57726974          DB      'Writing rows 2',0
   \   0038  696E6720
   \   003C  726F7773
   \   0040  203200
   \   0043            ?0005:
   \   0043  54494D00          DB      'TIM',0
   \   0047            ?0006:
   \   0047  57726974          DB      'Writing rows 3',0
   \   004B  696E6720
   \   004F  726F7773
   \   0053  203300
   \   0056            ?0007:
   \   0056  454E4400          DB      'END',0
   \   005A            ?0008:
   \   005A  4C6F6766          DB      'Logfile created',0
   \   005E  696C6520
   \   0062  63726561
   \   0066  74656400
   \   006A            ?0009:
   \   006A  4C6F672E          DB      'Log.txt',0
   \   006E  74787400
   \   0072            ?0024:
   \   0072  4C6F672E          DB      'Log.txt low',0
   \   0076  74787420
   \   007A  6C6F7700
   \   007E            ?0026:
   \   007E  436F756C          DB      'Could not open log file',0
   \   0082  64206E6F
   \   0086  74206F70
   \   008A  656E206C
   \   008E  6F672066
   \   0092  696C6500
   \   0096            ?0027:
   \   0096  7200              DB      'r',0
   \   0098            ?0033:
   \   0098  6E43616C          DB      'nCalls: ',0
   \   009C  6C733A20
   \   00A0  00
   \   00A1            ?0067:
   \   00A1  4552524F          DB      'ERROR: End of Log file reached',0
   \   00A5  523A2045
   \   00A9  6E64206F
   \   00AD  66204C6F
   \   00B1  67206669
   \   00B5  6C652072
   \   00B9  65616368
   \   00BD  656400
   \   00C0            ?0079:
   \   00C0  52434D00          DB      'RCM',0
   \   00C4            ?0089:
   \   00C4  44534300          DB      'DSC',0
   \   00C8            ?0113:
   \   00C8  4E6F7720          DB      'Now playing:',0
   \   00CC  706C6179
   \   00D0  696E673A
   \   00D4  00
   \   0000                    RSEG    X_UDATA
   \   0000            logOffset:
   \   0004                    DS      4
   \   0004            callIndex:
   \   0804                    DS      2048
   \   0804                    END


                                       S Y M B O L - T A B L E
                                       =======================


            #include file(s):

       [1]       c:\iar\ew\8051\inc\io517a.h
       [2]       c:\iar\ew\8051\inc\stdio.h
       [3]       c:\iar\ew\8051\inc\stdlib.h
       [4]       c:\iar\ew\8051\inc\string.h
       [5]       logfile.h
       [6]       filesystem.h
       [7]       calender.h
       [8]       main.h
       [9]       filesystem.h
      [10]       filesystem.h
      [11]       errorcodes.h
      [12]       rs232.h
      [13]       wav.h
      [14]       dtmf.h
      [15]       phone.h
      [16]       timer.h
      [17]       phoneans.h
      [18]       main.h
      [19]       calender.h
      [20]       dpot.h
      [21]       lcd.h
      [22]       keyboard.h


            Symbol                     Type     Mem     Class   Defline   Refline(s)
            ------                     ----     ---     -----   -------   ----------

?0000                                 array    code    static       97         97
?0001                                 array    code    static      113        113
?0002                                 array    code    static      117        117
?0003                                 array    code    static      117        117
?0004                                 array    code    static      119        119
?0005                                 array    code    static      123        123      308
?0006                                 array    code    static      125        125
?0007                                 array    code    static      129        129      319      377
?0008                                 array    code    static      131        131
?0009                                 array    code    static      145        145      194      346
?0024                                 array    code    static      172        172
?0026                                 array    code    static      176        176
?0027                                 array    code    static      194        194      346
?0033                                 array    code    static      215        215
?0067                                 array    code    static      288        288
?0079                                 array    code    static      315        315      361
?0089                                 array    code    static      321        321      379
?0113                                 array    code    static      369        369
AC                                      bit             ---      166:1  
ACC                                     sfr             ---       14:1  
ADCON0                                  sfr             ---       99:1  
ADCON1                                  sfr             ---      100:1  
ADDATH                                  sfr             ---      101:1  
ADDATL                                  sfr             ---      102:1  
ADEX                                    bit             ---      133:1  
ADM                                     bit             ---      135:1  
ARCON                                   sfr             ---      105:1  
B                                       sfr             ---       15:1  
BD                                      bit             ---      131:1  
BSY                                     bit             ---      134:1  
BuildCallerList                    function    code    public      189       44:5
CC4EN                                   sfr             ---       34:1  
CCEN                                    sfr             ---       33:1  
CCH1                                    sfr             ---       36:1  
CCH2                                    sfr             ---       38:1  
CCH3                                    sfr             ---       40:1  
CCH4                                    sfr             ---       42:1  
CCL1                                    sfr             ---       35:1  
CCL2                                    sfr             ---       37:1  
CCL3                                    sfr             ---       39:1  
CCL4                                    sfr             ---       41:1  
CLK                                     bit             ---      132:1  
CLRMSK                                  sfr             ---       74:1  
CMEN                                    sfr             ---       43:1  
CMH0                                    sfr             ---       45:1  
CMH1                                    sfr             ---       47:1  
CMH2                                    sfr             ---       49:1  
CMH3                                    sfr             ---       51:1  
CMH4                                    sfr             ---       53:1  
CMH5                                    sfr             ---       55:1  
CMH6                                    sfr             ---       57:1  
CMH7                                    sfr             ---       59:1  
CML0                                    sfr             ---       44:1  
CML1                                    sfr             ---       46:1  
CML2                                    sfr             ---       48:1  
CML3                                    sfr             ---       50:1  
CML4                                    sfr             ---       52:1  
CML5                                    sfr             ---       54:1  
CML6                                    sfr             ---       56:1  
CML7                                    sfr             ---       58:1  
CMSEL                                   sfr             ---       60:1  
COMCLRH                                 sfr             ---       72:1  
COMCLRL                                 sfr             ---       71:1  
COMSETH                                 sfr             ---       70:1  
COMSETL                                 sfr             ---       69:1  
CRCH                                    sfr             ---       62:1  
CRCL                                    sfr             ---       61:1  
CTCON                                   sfr             ---       63:1  
CTRELH                                  sfr             ---       65:1  
CTRELL                                  sfr             ---       64:1  
CY                                      bit             ---      165:1  
CreateDateString2                  function    code    extern     74:7         99
CreateLog                          function    code    public       91       42:5
CreateTimeString                   function    code    extern     72:7        104
DPH                                     sfr             ---       18:1  
DPL                                     sfr             ---       17:1  
DPSEL                                   sfr             ---       19:1  
DispInfoBox                        function    code    extern    71:21        369
EADC                                    bit             ---      205:1  
EAL                                     bit             ---      187:1  
ES0                                     bit             ---      190:1  
ET0                                     bit             ---      193:1  
ET1                                     bit             ---      191:1  
ET2                                     bit             ---      189:1  
EX0                                     bit             ---      194:1  
EX1                                     bit             ---      192:1  
EX2                                     bit             ---      204:1  
EX3                                     bit             ---      203:1  
EX4                                     bit             ---      202:1  
EX5                                     bit             ---      201:1  
EX6                                     bit             ---      200:1  
EXEN2                                   bit             ---      198:1  
EXF2                                    bit             ---      143:1  
F0                                      bit             ---      167:1  
F1                                      bit             ---      171:1  
FindCall                           function    code    public      230       45:5      348
FindNextCall                       function    code    public      253        197     46:5
GetCallInformation                 function    code    public      272       47:5
GetDateNow                         function    code    extern     71:7         98
GetTimeNow                         function    code    extern     70:7        101
I2FR                                    bit             ---      156:1  
I3FR                                    bit             ---      155:1  
IADC                                    bit             ---      150:1  
IE0                                     bit             ---      182:1  
IE1                                     bit             ---      180:1  
IEN0                                    sfr             ---      114:1  
IEN1                                    sfr             ---      116:1  
IEN2                                    sfr             ---      118:1  
IEX2                                    bit             ---      149:1  
IEX3                                    bit             ---      148:1  
IEX4                                    bit             ---      147:1  
IEX5                                    bit             ---      146:1  
IEX6                                    bit             ---      145:1  
INT0                                    bit             ---      214:1  
INT1                                    bit             ---      213:1  
IP0                                     sfr             ---      115:1  
IP1                                     sfr             ---      117:1  
IRCON0                                  sfr             ---      119:1  
IRCON1                                  sfr             ---      120:1  
IT0                                     bit             ---      183:1  
IT1                                     bit             ---      181:1  
InitializeLogFile                  function    code    public       86       41:5
LogMessage                         function    code    public      141        117      123      129     43:5
MD0                                     sfr             ---      106:1  
MD1                                     sfr             ---      107:1  
MD2                                     sfr             ---      108:1  
MD3                                     sfr             ---      109:1  
MD4                                     sfr             ---      110:1  
MD5                                     sfr             ---      111:1  
MS_ERASEQST                         #define             ---      33:17      33:17
MS_LOG                              #define             ---      30:17      30:17
MS_MENU                             #define             ---      31:17      31:17
MS_TIMEDATE                         #define             ---      32:17      32:17
MX0                                     bit             ---      138:1  
MX1                                     bit             ---      137:1  
MX2                                     bit             ---      136:1  
OV                                      bit             ---      170:1  
P                                       bit             ---      172:1  
P0                                      sfr             ---       77:1  
P1                                      sfr             ---       78:1  
P2                                      sfr             ---       79:1  
P3                                      sfr             ---       80:1  
P4                                      sfr             ---       81:1  
P5                                      sfr             ---       82:1  
P6                                      sfr             ---       83:1  
P7                                      sfr             ---       84:1  
P8                                      sfr             ---       85:1  
PCON                                    sfr             ---       88:1  
PSW                                     sfr             ---       20:1  
PhoneInVolume                      function    code    extern    66:20        371      374
PlayFile                           function    code    extern    52:13        372
PlayNewMessages                    function    code    public      399       49:5
PlayThisCall                       function    code    public      338       48:5      408
RB80                                    bit             ---      225:1  
RD                                      bit             ---      209:1  
REN0                                    bit             ---      223:1  
RI0                                     bit             ---      227:1  
RS0                                     bit             ---      169:1  
RS1                                     bit             ---      168:1  
RXD                                     bit             ---      216:1  
S0BUF                                   sfr             ---       90:1  
S0CON                                   sfr             ---       89:1  
S0RELH                                  sfr             ---       94:1  
S0RELL                                  sfr             ---       93:1  
S1BUF                                   sfr             ---       92:1  
S1CON                                   sfr             ---       91:1  
S1RELH                                  sfr             ---       96:1  
S1RELL                                  sfr             ---       95:1  
SETMSK                                  sfr             ---       73:1  
SM0                                     bit             ---      220:1  
SM1                                     bit             ---      221:1  
SM20                                    bit             ---      222:1  
SP                                      sfr             ---       16:1  
SWDT                                    bit             ---      199:1        103      116      122      128
                                                                              152      162      181      209
                                                                              284      300      407
SYSCON                                  sfr             ---       22:1  
SendStringEOLRS232                 function    code    extern    38:12         97      113      119      125
                                                                              131      172      176      216
                                                                              288
SendStringRS232                    function    code    extern    37:12        215
SpeakerVolume                      function    code    extern    65:20        370      373
T0                                      bit             ---      212:1  
T1                                      bit             ---      211:1  
T2CM                                    bit             ---      159:1  
T2CON                                   sfr             ---       68:1  
T2I0                                    bit             ---      161:1  
T2I1                                    bit             ---      160:1  
T2PS                                    bit             ---      154:1  
T2R0                                    bit             ---      158:1  
T2R1                                    bit             ---      157:1  
TB80                                    bit             ---      224:1  
TCON                                    sfr             ---       25:1  
TF0                                     bit             ---      178:1  
TF1                                     bit             ---      176:1  
TF2                                     bit             ---      144:1  
TH0                                     sfr             ---       29:1  
TH1                                     sfr             ---       30:1  
TH2                                     sfr             ---       67:1  
TI0                                     bit             ---      226:1  
TL0                                     sfr             ---       27:1  
TL1                                     sfr             ---       28:1  
TL2                                     sfr             ---       66:1  
TMOD                                    sfr             ---       26:1  
TR0                                     bit             ---      179:1  
TR1                                     bit             ---      177:1  
TXD                                     bit             ---      215:1  
WDT                                     bit             ---      188:1        102      115      121      127
                                                                              151      161      180      208
                                                                              283      299      406
WDTREL                                  sfr             ---      124:1  
WR                                      bit             ---      210:1  
XPAGE                                   sfr             ---       21:1  
callIndex                             array   xdata    public       73        207      234
div_t                                struct           typedef     38:3       96:3
fSetPos                            function    code    extern    107:6        234
fclose                             function    code    extern    104:6        178      213      393
fgetc                              function    code    extern    101:6        260      263      264      265
                                                                              281      293      302      303
                                                                              304      306      310      314
                                                                              317      318      328      349
                                                                              355      356      357      359
                                                                              363      367      386
fopen                              function    code    extern     96:6        194      346
fopenA                             function    code    extern     97:6        145
fputc                              function    code    extern     98:6        153      158      163      167
                                                                              168
ftell                              function    code    extern    105:6        174      198      212
lastPlayed                              int   xdata    extern       70        402
ldiv_t                               struct           typedef     44:3      100:3
logOffset                              long   xdata    public       72         87      145      174      212
msg                                   array   xdata    extern       63         99      100      106      107
                                                                              108      109      110      111
                                                                              123      214      216
myInt2DecStr                       function    code    extern    127:8        214
myStrCmpNoCase                     function    code    extern    130:8        308      315      319      321
                                                                              361      377      379
numOfCalls                              int   xdata    extern       64        193      207      214      231
receivedDTMF                           char   xdata    extern       66        375
speakerVolume                          char   xdata    extern       65        370


Errors: none
Warnings: none
Code size: 2650
Constant size: 213
Static variable size: Data(0) Idata(0) Bit(0) Xdata(2052) Pdata(0) Bdata(0)

