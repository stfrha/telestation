##############################################################################
#                                                                            #
# IAR 8051 C-Compiler V5.20A/386                                             #
# Front End V4.20N                                       19/Sep/104  17:59:48 #
# Global Optimizer V1.04E                                                    #
#                                                                            #
#       Target option =  8051                                                #
#       Memory model  =  large                                               #
#       Source file   =  calender.c                                          #
#       List file     =  release\list\calender.lst                           #
#       Object file   =  release\obj\calender.r03                            #
#       Command line  =  Calender.c -S -ml -v0 -e -K -u -s9 -RCODE -gA       #
#                        -IC:\IAR\EW\8051\inc\ -ORelease\Obj\                #
#                        -LRelease\List\ -q -i -t8 -x                        #
#                                                                            #
#                                             (c) Copyright IAR Systems 1996 #
##############################################################################

   \   0000                    NAME    calender(18)
   \   0000                    RSEG    CODE(0)
   \   0000                    PUBLIC  CalenderWait4
   \   0000                    $DEFFN  CalenderWait4(0,0,1,0,32768,0,0,0)
   \   0000                    PUBLIC  CreateDateString
   \   0000                    $DEFFN  CreateDateString(0,0,1,0,32768,0,6,0)
   \   0000                    PUBLIC  CreateDateString2
   \   0000                    $DEFFN  CreateDateString2(0,0,2,0,32768,0,6,0)
   \   0000                    PUBLIC  CreateTimeString
   \   0000                    $DEFFN  CreateTimeString(0,0,1,0,32768,0,6,0)
   \   0000                    PUBLIC  GetDateNow
   \   0000                    $DEFFN  GetDateNow(0,0,3,0,32768,0,3,0),ReadCalenderByte,ReadCalenderByte,
   \   0000                            ReadCalenderByte,ReadCalenderByte
   \   0000                    PUBLIC  GetTimeNow
   \   0000                    $DEFFN  GetTimeNow(0,0,3,0,32768,0,3,0),ReadCalenderByte,ReadCalenderByte,
   \   0000                            ReadCalenderByte
   \   0000                    PUBLIC  InitializeCalender
   \   0000                    $DEFFN  InitializeCalender(0,0,0,0,32768,0,0,0)
   \   0000                    PUBLIC  ROCB
   \   0000                    $DEFFN  ROCB(0,0,4,0,32768,0,1,0),CalenderWait4,CalenderWait4,CalenderWait4,
   \   0000                            CalenderWait4,CalenderWait4,CalenderWait4
   \   0000                    PUBLIC  ReadCalenderByte
   \   0000                    $DEFFN  ReadCalenderByte(0,0,2,0,32768,0,4,0),CalenderWait4,CalenderWait4,
   \   0000                            WOCB,WOCB,CalenderWait4,CalenderWait4,CalenderWait4,CalenderWait4,CalenderWait4,
   \   0000                            WOCB,ROCB,CalenderWait4,CalenderWait4,CalenderWait4
   \   0000                    PUBLIC  WOCB
   \   0000                    $DEFFN  WOCB(0,0,4,0,32768,0,1,0),CalenderWait4,CalenderWait4,CalenderWait4,
   \   0000                            CalenderWait4,CalenderWait4
   \   0000                    PUBLIC  WriteCalenderByte
   \   0000                    $DEFFN  WriteCalenderByte(0,0,2,0,32768,0,2,0),CalenderWait4,CalenderWait4,
   \   0000                            WOCB,WOCB,WOCB,CalenderWait4,CalenderWait4,CalenderWait4
   \   0000                    EXTERN  ?LD_A_R567_L17
   \   0000                    EXTERN  ?ST_A_R123_L17
   \   0000                    EXTERN  ?ST_A_R567_L17
   \   0000                    EXTERN  ?LD_A_R567_DISP_L17
   \   0000                    EXTERN  ?ST_A_R123_DISP_L17
   \   0000                    EXTERN  ?ST_A_R567_DISP_L17
   \   0000                    EXTERN  ?A_V_SWITCH_L05
   \   0000                    EXTERN  ?CL8051L_5_20_L17
   \   0000                    RSEG    CODE
      1          /*************************************************************
      2          Fil:            $Id: Calender.c,v 1.4 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Beskrivning:    Hanterar realtids- och kalenderfunktioner
      5          
      6          Skapad:         00-01-26
      7          
      8          Ändrad:         $Date: 2003/11/20 22:08:52 $
      9          
     10          Ägare:          Fredrik Hoffman
     11          
     12          
     13          Att göra:
     14          
     15          
     16          Revisionshistoria:
     17                                          $Log: Calender.c,v $
     18                                          Revision 1.4  2003/11/20 22:08:52  Gemensam
     19                                          Various declarations changes.
     20                                          Still version 0200.
     21                                          
     22                                          Revision 1.3  2003/11/18 19:17:35  Gemensam
     23                                          Added menu option of setting speaker volume (untested)
     24                                          Completely changed header files
     25                                          Version 0200.
     26                                          
     27                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     28                                          Added header information
     29                                          
     30          
     31          *************************************************************/
     32                                  
     33                                  
     34          //////////////////////
     35          // Inkluderingar
     36          
     37          #include <io517a.h>
      1          /*                     - IO517A.H -
      2          
      3             Special header for the Siemens SAB 80C517A/83C517A-5 processors.
      4          
      5             Version 5.20 [IMAF]
      6          
      7          */
      8          
      9          #pragma language=extended
     10          
     11          /* Pre-defined SFR byte addresses: */
     12          
     13          /* CPU */
     14          sfr     ACC    = 0xE0;
     15          sfr     B      = 0xF0;
     16          sfr     SP     = 0x81;
     17          sfr     DPL    = 0x82;
     18          sfr     DPH    = 0x83;
     19          sfr     DPSEL  = 0x92;
     20          sfr     PSW    = 0xD0;
     21          sfr     XPAGE  = 0x91;
     22          sfr     SYSCON = 0xB1;
     23          
     24          /* Timer 0/Timer 1 */
     25          sfr     TCON   = 0x88;
     26          sfr     TMOD   = 0x89;
     27          sfr     TL0    = 0x8A;
     28          sfr     TL1    = 0x8B;
     29          sfr     TH0    = 0x8C;
     30          sfr     TH1    = 0x8D;
     31          
     32          /* CCU */
     33          sfr     CCEN   = 0xC1;
     34          sfr     CC4EN  = 0xC9;
     35          sfr     CCL1   = 0xC2;
     36          sfr     CCH1   = 0xC3;
     37          sfr     CCL2   = 0xC4;
     38          sfr     CCH2   = 0xC5;
     39          sfr     CCL3   = 0xC6;
     40          sfr     CCH3   = 0xC7;
     41          sfr     CCL4   = 0xCE;
     42          sfr     CCH4   = 0xCF;
     43          sfr     CMEN   = 0xF6;
     44          sfr     CML0   = 0xD2;
     45          sfr     CMH0   = 0xD3;
     46          sfr     CML1   = 0xD4;
     47          sfr     CMH1   = 0xD5;
     48          sfr     CML2   = 0xD6;
     49          sfr     CMH2   = 0xD7;
     50          sfr     CML3   = 0xE2;
     51          sfr     CMH3   = 0xE3;
     52          sfr     CML4   = 0xE4;
     53          sfr     CMH4   = 0xE5;
     54          sfr     CML5   = 0xE6;
     55          sfr     CMH5   = 0xE7;
     56          sfr     CML6   = 0xF2;
     57          sfr     CMH6   = 0xF3;
     58          sfr     CML7   = 0xF4;
     59          sfr     CMH7   = 0xF5;
     60          sfr     CMSEL  = 0xF7;
     61          sfr     CRCL   = 0xCA;
     62          sfr     CRCH   = 0xCB;
     63          sfr     CTCON  = 0xE1;
     64          sfr     CTRELL = 0xDE;
     65          sfr     CTRELH = 0xDF;
     66          sfr     TL2    = 0xCC;
     67          sfr     TH2    = 0xCD;
     68          sfr     T2CON  = 0xC8;
     69          sfr     COMSETL= 0xA1;
     70          sfr     COMSETH= 0xA2;
     71          sfr     COMCLRL= 0xA3;
     72          sfr     COMCLRH= 0xA4;
     73          sfr     SETMSK = 0xA5;
     74          sfr     CLRMSK = 0xA6;
     75          
     76          /* Ports */
     77          sfr     P0     = 0x80;
     78          sfr     P1     = 0x90;
     79          sfr     P2     = 0xA0;
     80          sfr     P3     = 0xB0;
     81          sfr     P4     = 0xE8;
     82          sfr     P5     = 0xF8;
     83          sfr     P6     = 0xFA;
     84          sfr     P7     = 0xDB;        /* Analog/Digital Input */
     85          sfr     P8     = 0xDD;        /* Analog/Digital Input, 4 Bit */
     86          
     87          /* Serial Channels */
     88          sfr     PCON   = 0x87;
     89          sfr     S0CON  = 0x98;
     90          sfr     S0BUF  = 0x99;
     91          sfr     S1CON  = 0x9B;
     92          sfr     S1BUF  = 0x9C;
     93          sfr     S0RELL = 0xAA;
     94          sfr     S0RELH = 0xBA;
     95          sfr     S1RELL = 0x9D;
     96          sfr     S1RELH = 0xBB;
     97          
     98          /* A/D Converter */
     99          sfr     ADCON0 = 0xD8;
    100          sfr     ADCON1 = 0xDC;
    101          sfr     ADDATH = 0xD9;
    102          sfr     ADDATL = 0xDA;
    103          
    104          /* MUL/DIV Unit */
    105          sfr     ARCON  = 0xEF;
    106          sfr     MD0    = 0xE9;
    107          sfr     MD1    = 0xEA;
    108          sfr     MD2    = 0xEB;
    109          sfr     MD3    = 0xEC;
    110          sfr     MD4    = 0xED;
    111          sfr     MD5    = 0xEE;
    112          
    113          /* Interrupt System */
    114          sfr     IEN0   = 0xA8;
    115          sfr     IP0    = 0xA9;
    116          sfr     IEN1   = 0xB8;
    117          sfr     IP1    = 0xB9;
    118          sfr     IEN2   = 0x9A;
    119          sfr     IRCON0 = 0xC0;
    120          sfr     IRCON1 = 0xD1;
    121          
    122          
    123          /* Watchdog */
    124          sfr     WDTREL = 0x86;
    125          
    126          
    127          /* Pre-defined SFR bit addresses */
    128          
    129          /*========ADCON0=======*/
    130          
    131          bit     BD     = 0xDF;
    132          bit     CLK    = 0xDE;
    133          bit     ADEX   = 0xDD;
    134          bit     BSY    = 0xDC;
    135          bit     ADM    = 0xDB;
    136          bit     MX2    = 0xDA;
    137          bit     MX1    = 0xD9;
    138          bit     MX0    = 0xD8;
    139          
    140          
    141          /*========IRCON0=======*/
    142          
    143          bit     EXF2   = 0xC7;
    144          bit     TF2    = 0xC6;
    145          bit     IEX6   = 0xC5;
    146          bit     IEX5   = 0xC4;
    147          bit     IEX4   = 0xC3;
    148          bit     IEX3   = 0xC2;
    149          bit     IEX2   = 0xC1;
    150          bit     IADC   = 0xC0;
    151          
    152          /*========T2CON=======*/
    153          
    154          bit     T2PS   = 0xCF;
    155          bit     I3FR   = 0xCE;
    156          bit     I2FR   = 0xCD;
    157          bit     T2R1   = 0xCC;
    158          bit     T2R0   = 0xCB;
    159          bit     T2CM   = 0xCA;
    160          bit     T2I1   = 0xC9;
    161          bit     T2I0   = 0xC8;
    162          
    163          /*========PSW=========*/
    164          
    165          bit     CY     = 0xD7;
    166          bit     AC     = 0xD6;
    167          bit     F0     = 0xD5;
    168          bit     RS1    = 0xD4;
    169          bit     RS0    = 0xD3;
    170          bit     OV     = 0xD2;
    171          bit     F1     = 0xD1;
    172          bit     P      = 0xD0;
    173          
    174          /*========TCON========*/
    175          
    176          bit     TF1    = 0x8F;
    177          bit     TR1    = 0x8E;
    178          bit     TF0    = 0x8D;
    179          bit     TR0    = 0x8C;
    180          bit     IE1    = 0x8B;
    181          bit     IT1    = 0x8A;
    182          bit     IE0    = 0x89;
    183          bit     IT0    = 0x88;
    184          
    185          /*========IEN0========*/
    186          
    187          bit     EAL    = 0xAF;
    188          bit     WDT    = 0xAE;
    189          bit     ET2    = 0xAD;
    190          bit     ES0    = 0xAC;
    191          bit     ET1    = 0xAB;
    192          bit     EX1    = 0xAA;
    193          bit     ET0    = 0xA9;
    194          bit     EX0    = 0xA8;
    195          
    196          /*========IEN1========*/
    197          
    198          bit     EXEN2  = 0xBF;
    199          bit     SWDT   = 0xBE;
    200          bit     EX6    = 0xBD;
    201          bit     EX5    = 0xBC;
    202          bit     EX4    = 0xBB;
    203          bit     EX3    = 0xBA;
    204          bit     EX2    = 0xB9;
    205          bit     EADC   = 0xB8;
    206          
    207          /*========P3=========*/
    208          
    209          bit     RD     = 0xB7;
    210          bit     WR     = 0xB6;
    211          bit     T1     = 0xB5;
    212          bit     T0     = 0xB4;
    213          bit     INT1   = 0xB3;
    214          bit     INT0   = 0xB2;
    215          bit     TXD    = 0xB1;
    216          bit     RXD    = 0xB0;
    217          
    218          /*========S0CON========*/
    219          
    220          bit     SM0    = 0x9F;
    221          bit     SM1    = 0x9E;
    222          bit     SM20   = 0x9D;
    223          bit     REN0   = 0x9C;
    224          bit     TB80   = 0x9B;
    225          bit     RB80   = 0x9A;
    226          bit     TI0    = 0x99;
    227          bit     RI0    = 0x98;
    228          
    229          
    230          /* Interrupt Vector Definitions */
    231          
    232          interrupt [0x03] void EX0_int (void);     /* External Interrupt 0 */
    233          
    234          interrupt [0x0B] void T0_int (void);      /* Timer 0 Overflow */
    235          
    236          interrupt [0x13] void EX1_int (void);     /* External Interrupt 1 */
    237          
    238          interrupt [0x1B] void T1_int (void);      /* Timer 1 Overflow */
    239          
    240          interrupt [0x23] void SCON0_int (void);   /* Serial Port 0 */
    241          
    242          interrupt [0x2B] void T2_int (void);      /* Timer 2 Overflow */
    243          
    244          interrupt [0x2B] void T2EX_int (void);    /* Negative Transition on T2EX */
    245          
    246          interrupt [0x43] void ADC_int (void);     /* ADC Interrupt */
    247          
    248          interrupt [0x4B] void EX2_int (void);     /* External Interrupt 2 */
    249          
    250          interrupt [0x53] void EX3_int (void);     /* External Interrupt 3 */
    251          
    252          interrupt [0x5B] void EX4_int (void);     /* External Interrupt 4 */
    253          
    254          interrupt [0x63] void EX5_int (void);     /* External Interrupt 5 */
    255          
    256          interrupt [0x6B] void EX6_int (void);     /* External Interrupt 6 */
    257          
    258          interrupt [0x83] void SCON1_int (void);   /* Serial Port 1 */
    259          
    260          interrupt [0x93] void ICMP_int (void);    /* Compare match interrupt */
    261          
    262          interrupt [0x9B] void CT_int (void);      /* Compare Timer Overflow */
    263          
    264          interrupt [0xA3] void ICS_int (void);     /* COMSET interrupt */
    265          
    266          interrupt [0xAB] void ICR_int (void);     /* COMCLR interrupt */
    267          
    268          
     38          #include <stdio.h>
      1          /*                      - STDIO.H -
      2          
      3             Subset of ANSI standard I/O function declarations.
      4          
      5             Version: 3.30 04/Nov/94 IHAW
      6          
      7          
      8          */
      9          
     10          #ifndef _STDIO_INCLUDED
     11          #define _STDIO_INCLUDED
     12          
     13          #ifndef NULL
     14          #define NULL    (void *) 0
     15          #endif
     16          
     17          #ifndef EOF
     18          #define EOF     (-1)
     19          #endif
     20          
     21          #ifndef size_t
     22          #if     sizeof((char*)0 - (char*)0) <= sizeof(int)
     23          #define size_t  unsigned int
     24          #else
     25          #define size_t  unsigned long 
     26          #endif
     27          #endif
     28          
     29          /* ===
     30          
     31          #if __TID__ & 0x8000
     32          #pragma function=intrinsic(0)
     33          #endif
     34          
     35          === */
     36          
     37          #ifndef MEMORY_ATTRIBUTE
     38          #define MEMORY_ATTRIBUTE
     39          #endif
     40          
     41          MEMORY_ATTRIBUTE int    puts(const char *__s);
     42          MEMORY_ATTRIBUTE int    putchar(int __value);
     43          MEMORY_ATTRIBUTE int    getchar(void);
     44          MEMORY_ATTRIBUTE int    sprintf(char *__s,const char *__format,...);
     45          MEMORY_ATTRIBUTE int    printf(const char *__format,...);
     46          MEMORY_ATTRIBUTE int    scanf(const char *__format,...);
     47          MEMORY_ATTRIBUTE int    sscanf(const char *__s, const char *__format,...);
     48          MEMORY_ATTRIBUTE char   *gets(char *__s);
     49          
     50          #if __TID__ & 0x8000
     51          #pragma function=default
     52          #endif
     53          
     54          #endif
     55          
     56          
     57          
     39          #include <stdlib.h>
      1          /*                      - STDLIB.H -
      2          
      3             The ANSI-defined 'standard' functions.
      4          
      5             Version: 3.30 04/Nov/94 IHAW
      6          
      7          $Name: V3_33B $
      8          $Log: stdlib.h $
      9          Revision 1.3  1996/06/07 07:11:26  matsp
     10          
     11          Revision 1.2  1996/01/26 16:13:20  matsp
     12          A lot. Converted to Source Integrity
     13          Revision 1.2  1996/01/26 17:13:18  MATSP
     14          Revision 1.4  1996/01/26 16:07:29  MATSP
     15          Revision 1.3  1995/12/04 09:04:11  MATSP
     16          RAND_MAX changed from 32768 to 32767.
     17          */
     18          
     19          #ifndef _STDLIB_INCLUDED
     20          #define _STDLIB_INCLUDED
     21          
     22          #ifndef size_t
     23          #if sizeof((char *)0 - (char *)0) <= sizeof(int)
     24          #define size_t          unsigned int
     25          #else
     26          #define size_t          unsigned long
     27          #endif
     28          #endif
     29          
     30          #ifndef NULL
     31          #define NULL    (void*) 0 
     32          #endif
     33          
     34          typedef struct
     35                  {
     36                    int   quot;
     37                    int   rem;
     38                  } div_t;
     39          
     40          typedef struct
     41                  {
     42                    long int      quot;
     43                    long int      rem;
     44                  } ldiv_t;
     45          
     46          
     47          #define RAND_MAX        32767
     48          
     49          #define EXIT_SUCCESS    0
     50          #define EXIT_FAILURE    1
     51          
     52          #define MB_CUR_MAX      1
     53          
     54          #if __TID__ & 0x8000
     55          #pragma function=intrinsic(0)
     56          #endif
     57          
     58          #ifndef MEMORY_ATTRIBUTE
     59          #define MEMORY_ATTRIBUTE
     60          #endif
     61          
     62          #ifndef PTR_ATTRIBUTE
     63          #define PTR_ATTRIBUTE
     64          #endif
     65          
     66          MEMORY_ATTRIBUTE void   *malloc(size_t __size);
     67          
     68          MEMORY_ATTRIBUTE void   free(void *__ptr);
     69          
     70          MEMORY_ATTRIBUTE void   exit(int __status);
     71          
     72          MEMORY_ATTRIBUTE void   *calloc(unsigned int __nelem, size_t __elsize);
     73          
     74          MEMORY_ATTRIBUTE void   *realloc(void *__ptr, size_t __size);
     75          
     76          MEMORY_ATTRIBUTE int atoi (const char *__nptr);
     77          
     78          MEMORY_ATTRIBUTE long atol (const char *__nptr);
     79          
     80          MEMORY_ATTRIBUTE double atof (const char *__nptr);
     81          
     82          MEMORY_ATTRIBUTE double strtod(const char *__nptr, char **__endptr);
     83          
     84          MEMORY_ATTRIBUTE long int strtol(const char *__nptr, char **__endptr, int __base);
     85          
     86          MEMORY_ATTRIBUTE unsigned long int strtoul(const char *__nptr, char **__endptr, int __base);
     87          
     88          MEMORY_ATTRIBUTE int rand(void);
     89          
     90          MEMORY_ATTRIBUTE void srand(unsigned int __seed);
     91          
     92          MEMORY_ATTRIBUTE void abort(void);
     93          
     94          MEMORY_ATTRIBUTE int abs(int __j);
     95          
     96          MEMORY_ATTRIBUTE div_t div(int __numer, int __denom);
     97          
     98          MEMORY_ATTRIBUTE long int labs(long int __j);
     99          
    100          MEMORY_ATTRIBUTE ldiv_t ldiv(long int __numer, long int __denom);
    101          
    102          MEMORY_ATTRIBUTE void *bsearch(const void *__key, const void *__base,
    103                                  size_t __nmemb, size_t __size,
    104                                  int (*__compar) (const void *, const void *));
    105          
    106          MEMORY_ATTRIBUTE void qsort(void *__base, size_t __nmemb, size_t __size,
    107                                  int (*__compar) (const void *, const void *));
    108          
    109          #if __TID__ & 0x8000
    110          #pragma function=default
    111          #endif
    112          
    113          #endif
    114          
     40          #include "calender.h"
      1          /********************************************************
      2          Fil:            $Id: Calender.h,v 1.4 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:52 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Calender.h,v $
      8                                          Revision 1.4  2003/11/20 22:08:52  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.3  2003/11/18 19:17:35  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     18                                          Added header information
     19                                          
     20          
     21          ********************************************************/
     22          
     23          #ifndef _CALENDER_INCLUDED_
     24          #define _CALENDER_INCLUDED_
     25          
     26          ///////////////////////////////////
     27          // Definitioner
     28          
     29          // Non-volatile variabler:
     30          #define NV_ANSWERING_ON 0x08
     31          #define NV_NUM_SIGNALS  0x09
     32          #define NV_PLAYED_MS    0x0A
     33          #define NV_PLAYED_LS    0x0B
     34          #define NV_SPEAKER_VOL  0x0C
     35          //Max adress är 0x3F
     36          
     37          #define SDA    P3.0
     38          #define SCL    P3.1
     39          //#define SDA    P1.5
     40          //#define SCL    P1.6
     41          
     42          
     43          ///////////////////////////////////
     44          // Strukturer
     45          
     46          struct ST_TIME {
     47              char    seconds;
     48              char    minutes;
     49              char    hours;
     50          };
     51          #define TIME struct ST_TIME
     52          
     53          
     54          struct ST_DATE {
     55              char    day;
     56              char    date;
     57              char    month;
     58              char    year;
     59          };
     60          #define DATE struct ST_DATE
     61          
     62          ///////////////////////////////////
     63          // Funktioner och procedurer
     64          
     65          extern void    InitializeCalender( void );
     66          extern char    WOCB(char dat);
     67          extern char    ROCB(char ack);
     68          extern char    WriteCalenderByte(char address, char dat);
     69          extern char    ReadCalenderByte(char address, char* dat);
     70          extern void    GetTimeNow(TIME* tptr);
     71          extern void    GetDateNow(DATE* tptr);
     72          extern void    CreateTimeString(TIME* tptr, char* str);
     73          extern void    CreateDateString(DATE* tptr, char* str);
     74          extern void    CreateDateString2(DATE* tptr, char* str);
     75           
     76          
     77          ///////////////////////////
     78          // Variabler
     79          
     80          
     81          
     82          
     83           
     84          #endif
     41          #include "main.h"
      1          /*************************************************************
      2          Fil:            $Id: Main.h,v 1.10 2003/12/26 16:17:01 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/12/26 16:17:01 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Main.h,v $
      8                                          Revision 1.10  2003/12/26 16:17:01  Gemensam
      9                                          Reinstate 500 ms wait for hang up detection to settle (if not PPD is used).
     10                                          Fixed PPD detection by decreasing phone volume from 63 to 15.
     11                                          Version 0304.
     12                                          
     13                                          Revision 1.9  2003/12/09 20:52:49  Gemensam
     14                                          Commented out PPD detection since the HW not work yet.
     15                                          Ver 0302.
     16                                          
     17                                          Revision 1.8  2003/11/29 22:35:59  Gemensam
     18                                          Fixed problem with to short pulse width on PPD.
     19                                          Ver 0302.
     20                                          
     21                                          Revision 1.7  2003/11/24 22:44:36  Gemensam
     22                                          Fixed PPD, not working yet,
     23                                          New command: speaker volume.
     24                                          Version 0301.
     25                                          
     26                                          Revision 1.6  2003/11/23 21:40:03  Gemensam
     27                                          Parallell phone detection included.
     28                                          Removed obsolete #define's regarding LCD interface.
     29                                          Ver 0300
     30                                          
     31                                          Revision 1.5  2003/11/23 20:29:34  Gemensam
     32                                          Complete and tested volume setting in options menu.
     33                                          Ver 0201
     34                                          
     35                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     36                                          Various declarations changes.
     37                                          Still version 0200.
     38                                          
     39                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     40                                          Added menu option of setting speaker volume (untested)
     41                                          Completely changed header files
     42                                          Version 0200.
     43                                          
     44                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     45                                          Added header information
     46                                          
     47          *************************************************************/
     48          
     49          #ifndef _MAIN_INCLUDED_
     50          #define _MAIN_INCLUDED_
     51          
     52          #include "FileSystem.h"
      1          /**************************************************************************************
      2          Fil:            $Id: FileSystem.h,v 1.4 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Kommentarer:    Filhuvudet befinner sig i "Spare" arean tillhörande filens första sida. Huvudet består 
      7                                          av 16 bytes enligt följande lista:
      8                                          0       Huvud       0xAA = Legalt filhuvud, annat tillsvidare odefinierat
      9                                          1-4     Fillängd    Pos 1 = MSB, pos 4 = LSB
     10                                          5-12    Filtitel    Enl "Titel.ext". Om titeln är mindre än 8 tecken avslutas det med nollor
     11                                          13-15   Filext      Enl "Titel.ext". Om ext är mindre än 3 tecken avslutas det med nollor
     12          
     13                                          En nolla skriven i fileName[0] indikerar att
     14                                          filstrukturen är ledig.
     15                  
     16          Revisionshistoria:
     17                                          $Log: FileSystem.h,v $
     18                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     19                                          Various declarations changes.
     20                                          Still version 0200.
     21                                          
     22                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     23                                          Added menu option of setting speaker volume (untested)
     24                                          Completely changed header files
     25                                          Version 0200.
     26                                          
     27                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     28                                          Added header information
     29                                          
     30          
     31          **************************************************************************************/
     32          
     33          #ifndef _FILESYSTEM_INCLUDED_
     34          #define _FILESYSTEM_INCLUDED_
     35          
     36          ///////////////////////////////////
     37          // Definitioner
     38          
     39          #define FS_MAXFILES         8 
     40          #define FS_FILENAMELENGTH   13
     41          #define FS_FLASHSIZE        0x800000
     42          
     43          #define OFF            0
     44          #define READY        1
     45          #define NEMPTY        2
     46          #define WRITING        3
     47          #define OCCUPIED    4
     48          
     49          #define CLE     P4.0                                //Command Latch Enable
     50          #define ALE     P4.1                                //Address Latch Enable
     51          #define WP      P4.2                                //Write Protect
     52          #define SE      P4.3                                //Spare Enable
     53          //#define CE      P4.4                                //Chip Enable
     54          #define FBUSY   P4.5                                //Busy
     55          
     56          #define FREG (*(unsigned char xdata *) 0xE000)
     57          #define FLASH (*(unsigned char xdata *) 0xB000) 
     58          
     59          ///////////////////////////////////
     60          // Strukturer
     61          
     62          struct ST_FILE_HEAD {
     63              unsigned long   length;
     64              char            name[FS_FILENAMELENGTH];
     65          };
     66          #define FILE_HEAD struct ST_FILE_HEAD
     67          
     68          
     69          struct ST_FILE {
     70              char            fileName[FS_FILENAMELENGTH];
     71              unsigned long   startAddress;
     72              unsigned long   length; 
     73              unsigned long   offset; 
     74              char            write;
     75              char            append;
     76          };
     77          #define FILE struct ST_FILE 
     78          
     79          
     80          
     81          ///////////////////////////////////
     82          // Funktioner och procedurer
     83          
     84          extern void            InitializeFileSystem( void );
     85          extern void            InitializeFlash( void );
     86          extern void            SetupReadSeq( void );
     87          extern unsigned char   ReadFLASH( void );
     88          extern void            TerminateReadSeq( void );
     89          extern void            GetDeviceIDRS232(void);
     90          extern void            SetupWriteSeq( void );
     91          extern void            WriteFLASH(unsigned char);
     92          extern void            TerminateWriteSeq( void );
     93          extern void            PerformWriteSeq( void );
     94          extern void            EraseBlock( void );
     95          extern void            WriteFileHead(const char* name, long size);
     96          extern FILE*           fopen(const char* name, const char* def);
     97          extern FILE*               fopenA(const char* name, long maxSize, long offset);
     98          extern void            fputc(FILE* filePtr, char c);
     99          extern void            fputLine(FILE* filePtr, const char* str);
    100          extern void            fupLoad( void );
    101          extern int             fgetc(FILE* filePtr);
    102          extern void            fgetLine(FILE* filePtr, char* str, int maxLen);
    103          extern void            fdownLoad( void );
    104          extern void            fclose(FILE* filePtr);
    105          extern long            ftell(FILE* filePtr);
    106          //void            Rewind(FILE* filePtr);
    107          extern void            fSetPos(FILE* filePtr, long offset);
    108          extern void            ReleaseCurrFile( void );
    109          extern void            EraseAll( void );
    110          extern void            StartDynamic( void );
    111          extern void            EraseDynamic( void );
    112          extern char                        MemUsage( void );
    113          extern void                        Dir( void );
    114          extern void                        Type( void );
    115          extern void                        TypeA( void );
    116          
    117          #endif
     53          
     54          
     55          ///////////////////////////////////
     56          // Definitioner
     57          
     58          #define VERSION_MENU_STRING     "Telestation 3.5       (c) 2004-09-19 FRHA"
     59          
     60          #define CM_PARSIZE              24
     61          #define CM_NRPAR                16
     62          
     63          #define MAX_LABEL_LEN   8
     64          #define MAX_LABELS      64
     65          
     66          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     67          /*
     68          #define MAX_BATFILES    8
     69          */
     70          
     71          ///////////////////////////////////
     72          // Strukturer
     73          
     74          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     75          /*
     76          struct ST_Label {
     77              char    name[MAX_LABEL_LEN];
     78              long    pos;
     79          };
     80          #define Label struct ST_Label
     81           
     82          struct ST_BatFileObj {
     83              FILE*       fp;                 //Filpekare till bat-filen
     84              Label*      labels;             //Pekare till lista med ingående labels
     85              char        labelIndex;         //Pekar på nästa lediga label
     86              BatFileObj* caller;             //Den batfil som kallade på denna. Om användaren gav kommandot 
     87                                              //skall den inehålla NULL
     88              char        occupied;           //1 om detta objekt används, 0 annars
     89          };    
     90          #define BatFileObj struct ST_BatFileObj
     91          */
     92          
     93          ///////////////////////////////////
     94          // Funktioner och procedurer
     95          
     96          extern void    InitializeComputer1( void );
     97          extern void    InitializePhoneAnsApp( void );
     98          extern void    MainShell( void );
     99          extern char    DecodeAndPerform(const char* cmdStr);
    100          //int     MainCommandInterper(char c);
    101          extern void    Hello( void );
    102          extern void    TestHW( void );
    103          extern void    FlashID( void );
    104          extern void    Erase( void );
    105          extern void    BackRead( void );
    106          extern void    ReadSpare( void );
    107          extern void    WF1( void );
    108          extern void    WF2( void );
    109          extern void    WF3( void );
    110          extern void    RF1( void );
    111          extern void    RF2( void );
    112          extern void    RF3( void );
    113          extern void    CreateLong( void );
    114          extern void    ReadSpare2( void );
    115          extern void    Append( void );
    116          
    117          extern void    SetupBatFile( void );
    118          extern void    ClearLabelList( void );
    119          extern void    ExecuteBatFile(const char* batFileName);
    120          extern char    InsertLabel(const char* name, long pos);
    121          extern int     FindLabel(const char *name);
    122          extern char    GotoLabel(const char* name);
    123          
    124          extern void    myStrCpy(char* dest, const char* src);
    125          extern int     myStrLen(char* str);
    126          extern void    myLong2HexStr(long v, char* str);
    127          extern void    myInt2DecStr(int v, char* str);
    128          extern void    myInt2DecStr00(char v, char* str);
    129          extern int     myStr2Int(const char* str);
    130          extern char    myStrCmpNoCase(const char* s1, const char* s2);
    131          
    132          // Nedan var ett försök till multipla bat-filer, kanske införs senare
    133          /*
    134          void    SetupBatFile( void );
    135          void    ClearLabelList( void );
    136          void    ClearLabelList(Label* list);
    137          BatFileObj*    VacantBatFileObj(FILE* fp);
    138          void    ExecuteBatFile(const char* batFileName);
    139          char    InsertLabel(const char* name, long pos);
    140          char    FindLabel(const char *name, Label* l);
    141          char    GotoLabel(const char* name);
    142          */
    143          
    144          ///////////////////////////
    145          // Globala variabler
    146          
    147          
    148          ///////////////////////////
    149          // Lokala variabler
    150          
    151          
    152          #endif
     42          #include "rs232.h"
      1          /********************************************************
      2          Fil:            $Id: RS232.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Revisionshistoria:
      7                                          $Log: RS232.h,v $
      8                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          
     18          
     19          ********************************************************/
     20          
     21          #ifndef _RS232_INCLUDED_
     22          #define _RS232_INCLUDED_
     23          
     24          ///////////////////////////////////
     25          // Definitioner
     26          
     27          
     28          ///////////////////////////////////
     29          // Strukturer
     30          
     31          
     32          ///////////////////////////////////
     33          // Funktioner och procedurer
     34          
     35          extern void             InitializeRS232( void );
     36          extern void             SendRS232(char tecken);
     37          extern void             SendStringRS232(const char *str);
     38          extern void             SendStringEOLRS232(const char *str);
     39          extern char             WaitAndReceiveRS232( void );
     40          extern char             WaitAndReceiveTimeout( void );
     41          extern int      ReceiveLineRS232(char* str, int maxLen);
     42          
     43          #endif
     43          
     44           
     45          //////////////////////
     46          // Globala variabler
     47          
     48          
     49           
     50          //////////////////////
     51          // Lokala variabler
     52          
     53          
     54          //////////////////////
     55          // Kod
     56          
     57          void    InitializeCalender( void )
     58          {                                                                                 
   \   0000            InitializeCalender:
     59              SDA = 1;
   \   0000  D2B0              SETB    P3.0
     60              SCL = 1;
   \   0002  D2B1              SETB    P3.1
     61          }
   \   0004  22                RET
     62          
     63          
     64          void    CalenderWait4( void )
     65          {
   \   0005            CalenderWait4:
     66              xdata char    a;
     67              
     68              a = 1;
     69              a = a+1;
   \   0005  7402              MOV     A,#2
   \   0007  900000            MOV     DPTR,#$LOCBX CalenderWait4
   \   000A  F0                MOVX    @DPTR,A
     70          }
   \   000B  22                RET
     71          
     72           
     73          char WOCB(char dat)
     74          //WriteOneCalenderByte (intern funktion)
     75          {
   \   000C            WOCB:
   \   000C  900000            MOV     DPTR,#$LOCBX WOCB+2
   \   000F  D0E0              POP     ACC
   \   0011  F0                MOVX    @DPTR,A
   \   0012  A3                INC     DPTR
   \   0013  D0E0              POP     ACC
   \   0015  F0                MOVX    @DPTR,A
     76              xdata char    ack;
     77              xdata char     i;
     78          
     79              for (i=0 ; i<8 ; i++) {
   \   0016  E4                CLR     A
   \   0017  900000            MOV     DPTR,#$LOCBX WOCB+1
   \   001A  F0                MOVX    @DPTR,A
   \   001B  EC                MOV     A,R4
   \   001C  900000            MOV     DPTR,#$LOCBX WOCB+4
   \   001F  F0                MOVX    @DPTR,A
   \   0020            ?0001:
   \   0020  900000            MOV     DPTR,#$LOCBX WOCB+1
   \   0023  E0                MOVX    A,@DPTR
   \   0024  24F8              ADD     A,#248
   \   0026  4025              JC      ?0000
   \   0028            ?0002:
     80                  SDA = (dat >> 7) & 0x01;
   \   0028  900000            MOV     DPTR,#$LOCBX WOCB+4
   \   002B  E0                MOVX    A,@DPTR
   \   002C  33                RLC     A
   \   002D  33                RLC     A
   \   002E  5401              ANL     A,#1
   \   0030  A2E0              MOV     C,ACC.0
   \   0032  92B0              MOV     P3.0,C
     81                  SCL = 1;
   \   0034  D2B1              SETB    P3.1
     82                  CalenderWait4();
   \   0036  120000            LCALL   $REFFN CalenderWait4
     83                  SCL = 0;
   \   0039  C2B1              CLR     P3.1
     84                  CalenderWait4();
   \   003B  120000            LCALL   $REFFN CalenderWait4
     85                  dat = dat << 1;
   \   003E  900000            MOV     DPTR,#$LOCBX WOCB+4
   \   0041  E0                MOVX    A,@DPTR
   \   0042  25E0              ADD     A,ACC
   \   0044  F0                MOVX    @DPTR,A
   \   0045  900000            MOV     DPTR,#$LOCBX WOCB+1
   \   0048  E0                MOVX    A,@DPTR
   \   0049  04                INC     A
   \   004A  F0                MOVX    @DPTR,A
   \   004B  80D3              SJMP    ?0001
   \   004D            ?0000:
     86              }
     87          
     88              SDA = 1;            //Sätt SDA till ingång
   \   004D  D2B0              SETB    P3.0
     89              CalenderWait4();
   \   004F  120000            LCALL   $REFFN CalenderWait4
     90              SCL = 1;
   \   0052  D2B1              SETB    P3.1
     91              CalenderWait4();
   \   0054  120000            LCALL   $REFFN CalenderWait4
     92              ack = SDA;            //Hämta ack-bit
   \   0057  E4                CLR     A
   \   0058  A2B0              MOV     C,P3.0
   \   005A  92E0              MOV     ACC.0,C
   \   005C  900000            MOV     DPTR,#$LOCBX WOCB
   \   005F  F0                MOVX    @DPTR,A
     93              SCL = 0;
   \   0060  C2B1              CLR     P3.1
     94              CalenderWait4();
   \   0062  120000            LCALL   $REFFN CalenderWait4
     95              return ack;
   \   0065  900000            MOV     DPTR,#$LOCBX WOCB
   \   0068  E0                MOVX    A,@DPTR
   \   0069  FC                MOV     R4,A
     96          }
   \   006A  900000            MOV     DPTR,#$LOCBX WOCB+2
   \   006D  E0                MOVX    A,@DPTR
   \   006E  F8                MOV     R0,A
   \   006F  A3                INC     DPTR
   \   0070  E0                MOVX    A,@DPTR
   \   0071  C0E0              PUSH    ACC
   \   0073  E8                MOV     A,R0
   \   0074  C0E0              PUSH    ACC
   \   0076  22                RET
     97           
     98          char ROCB(char ack)
     99          //ReadOneCalenderByte (intern funktion)
    100          {
   \   0077            ROCB:
   \   0077  900000            MOV     DPTR,#$LOCBX ROCB+2
   \   007A  D0E0              POP     ACC
   \   007C  F0                MOVX    @DPTR,A
   \   007D  A3                INC     DPTR
   \   007E  D0E0              POP     ACC
   \   0080  F0                MOVX    @DPTR,A
    101              xdata char    dat;
    102              xdata char     i;
    103          
    104              dat = 0;
    105          
    106              SDA = 1;            //Sätt SDA till ingång
   \   0081  D2B0              SETB    P3.0
    107              CalenderWait4();
   \   0083  EC                MOV     A,R4
   \   0084  A3                INC     DPTR
   \   0085  F0                MOVX    @DPTR,A
   \   0086  120000            LCALL   $REFFN CalenderWait4
    108          
    109              for (i=0 ; i<8 ; i++) {
   \   0089  E4                CLR     A
   \   008A  900000            MOV     DPTR,#$LOCBX ROCB
   \   008D  F0                MOVX    @DPTR,A
   \   008E  A3                INC     DPTR
   \   008F  F0                MOVX    @DPTR,A
   \   0090            ?0005:
   \   0090  900000            MOV     DPTR,#$LOCBX ROCB+1
   \   0093  E0                MOVX    A,@DPTR
   \   0094  24F8              ADD     A,#248
   \   0096  4022              JC      ?0004
   \   0098            ?0006:
    110                  dat = dat << 1;
   \   0098  900000            MOV     DPTR,#$LOCBX ROCB
   \   009B  E0                MOVX    A,@DPTR
   \   009C  25E0              ADD     A,ACC
   \   009E  F0                MOVX    @DPTR,A
    111                  SCL = 1;
   \   009F  D2B1              SETB    P3.1
    112                  CalenderWait4();
   \   00A1  120000            LCALL   $REFFN CalenderWait4
    113                  dat = dat + SDA;
   \   00A4  900000            MOV     DPTR,#$LOCBX ROCB
   \   00A7  E0                MOVX    A,@DPTR
   \   00A8  A2B0              MOV     C,P3.0
   \   00AA  3400              ADDC    A,#0
   \   00AC  F0                MOVX    @DPTR,A
    114                  SCL = 0;
   \   00AD  C2B1              CLR     P3.1
    115                  CalenderWait4();
   \   00AF  120000            LCALL   $REFFN CalenderWait4
   \   00B2  900000            MOV     DPTR,#$LOCBX ROCB+1
   \   00B5  E0                MOVX    A,@DPTR
   \   00B6  04                INC     A
   \   00B7  F0                MOVX    @DPTR,A
   \   00B8  80D6              SJMP    ?0005
   \   00BA            ?0004:
    116              }
    117          
    118          
    119              SDA = ack;
   \   00BA  900000            MOV     DPTR,#$LOCBX ROCB+4
   \   00BD  E0                MOVX    A,@DPTR
   \   00BE  A2E0              MOV     C,ACC.0
   \   00C0  92B0              MOV     P3.0,C
    120              CalenderWait4();
   \   00C2  120000            LCALL   $REFFN CalenderWait4
    121              SCL = 1;
   \   00C5  D2B1              SETB    P3.1
    122              CalenderWait4();
   \   00C7  120000            LCALL   $REFFN CalenderWait4
    123              SCL = 0;
   \   00CA  C2B1              CLR     P3.1
    124              CalenderWait4();
   \   00CC  120000            LCALL   $REFFN CalenderWait4
    125              return dat;
   \   00CF  900000            MOV     DPTR,#$LOCBX ROCB
   \   00D2  E0                MOVX    A,@DPTR
   \   00D3  FC                MOV     R4,A
    126          }
   \   00D4  900000            MOV     DPTR,#$LOCBX ROCB+2
   \   00D7  E0                MOVX    A,@DPTR
   \   00D8  F8                MOV     R0,A
   \   00D9  A3                INC     DPTR
   \   00DA  E0                MOVX    A,@DPTR
   \   00DB  C0E0              PUSH    ACC
   \   00DD  E8                MOV     A,R0
   \   00DE  C0E0              PUSH    ACC
   \   00E0  22                RET
    127          
    128          char    WriteCalenderByte(char address, char dat)
    129          {
   \   00E1            WriteCalenderByte:
   \   00E1  900000            MOV     DPTR,#$LOCBX WriteCalenderByte
   \   00E4  D0E0              POP     ACC
   \   00E6  F0                MOVX    @DPTR,A
   \   00E7  A3                INC     DPTR
   \   00E8  D0E0              POP     ACC
   \   00EA  F0                MOVX    @DPTR,A
    130              SDA = 0;            //Start
   \   00EB  C2B0              CLR     P3.0
    131              CalenderWait4();
   \   00ED  ED                MOV     A,R5
   \   00EE  A3                INC     DPTR
   \   00EF  A3                INC     DPTR
   \   00F0  F0                MOVX    @DPTR,A
   \   00F1  EC                MOV     A,R4
   \   00F2  900000            MOV     DPTR,#$LOCBX WriteCalenderByte+2
   \   00F5  F0                MOVX    @DPTR,A
   \   00F6  120000            LCALL   $REFFN CalenderWait4
    132              SCL = 0;
   \   00F9  C2B1              CLR     P3.1
    133              CalenderWait4();
   \   00FB  120000            LCALL   $REFFN CalenderWait4
    134          
    135              if (WOCB(0xD0)) return 1;        //Slave address och R/W = 0
   \   00FE  7CD0              MOV     R4,#208
   \   0100  120000            LCALL   $REFFN WOCB
   \   0103  EC                MOV     A,R4
   \   0104  6004              JZ      ?0009
   \   0106            ?0008:
   \   0106  7C01              MOV     R4,#1
   \   0108  802F              SJMP    ?0014
   \   010A            ?0009:
    136              if (WOCB(address)) return 1;
   \   010A  900000            MOV     DPTR,#$LOCBX WriteCalenderByte+2
   \   010D  E0                MOVX    A,@DPTR
   \   010E  FC                MOV     R4,A
   \   010F  120000            LCALL   $REFFN WOCB
   \   0112  EC                MOV     A,R4
   \   0113  6004              JZ      ?0011
   \   0115            ?0010:
   \   0115  7C01              MOV     R4,#1
   \   0117  8020              SJMP    ?0014
   \   0119            ?0011:
    137              if (WOCB(dat)) return 1;
   \   0119  900000            MOV     DPTR,#$LOCBX WriteCalenderByte+3
   \   011C  E0                MOVX    A,@DPTR
   \   011D  FC                MOV     R4,A
   \   011E  120000            LCALL   $REFFN WOCB
   \   0121  EC                MOV     A,R4
   \   0122  6004              JZ      ?0013
   \   0124            ?0012:
   \   0124  7C01              MOV     R4,#1
   \   0126  8011              SJMP    ?0014
   \   0128            ?0013:
    138          
    139              SDA = 0;
   \   0128  C2B0              CLR     P3.0
    140              CalenderWait4();
   \   012A  120000            LCALL   $REFFN CalenderWait4
    141              SCL = 1;
   \   012D  D2B1              SETB    P3.1
    142              CalenderWait4();
   \   012F  120000            LCALL   $REFFN CalenderWait4
    143              SDA = 1;
   \   0132  D2B0              SETB    P3.0
    144              CalenderWait4();
   \   0134  120000            LCALL   $REFFN CalenderWait4
    145          
    146              return 0;
   \   0137  7C00              MOV     R4,#0
    147          
    148          }
   \   0139            ?0014:
   \   0139  900000            MOV     DPTR,#$LOCBX WriteCalenderByte
   \   013C  E0                MOVX    A,@DPTR
   \   013D  F8                MOV     R0,A
   \   013E  A3                INC     DPTR
   \   013F  E0                MOVX    A,@DPTR
   \   0140  C0E0              PUSH    ACC
   \   0142  E8                MOV     A,R0
   \   0143  C0E0              PUSH    ACC
   \   0145  22                RET
    149          
    150          char    ReadCalenderByte(char address, char* dat)
    151          {
   \   0146            ReadCalenderByte:
   \   0146  900000            MOV     DPTR,#$LOCBX ReadCalenderByte
   \   0149  D0E0              POP     ACC
   \   014B  F0                MOVX    @DPTR,A
   \   014C  A3                INC     DPTR
   \   014D  D0E0              POP     ACC
   \   014F  F0                MOVX    @DPTR,A
    152              SDA = 0;            //Start
   \   0150  C2B0              CLR     P3.0
    153              CalenderWait4();
   \   0152  A3                INC     DPTR
   \   0153  A3                INC     DPTR
   \   0154  EF                MOV     A,R7
   \   0155  F0                MOVX    @DPTR,A
   \   0156  A3                INC     DPTR
   \   0157  EE                MOV     A,R6
   \   0158  F0                MOVX    @DPTR,A
   \   0159  A3                INC     DPTR
   \   015A  ED                MOV     A,R5
   \   015B  F0                MOVX    @DPTR,A
   \   015C  EC                MOV     A,R4
   \   015D  900000            MOV     DPTR,#$LOCBX ReadCalenderByte+2
   \   0160  F0                MOVX    @DPTR,A
   \   0161  120000            LCALL   $REFFN CalenderWait4
    154              SCL = 0;
   \   0164  C2B1              CLR     P3.1
    155              CalenderWait4();
   \   0166  120000            LCALL   $REFFN CalenderWait4
    156           
    157              if (WOCB(0xD0)) return 1;        //Slave address och R/W = 0
   \   0169  7CD0              MOV     R4,#208
   \   016B  120000            LCALL   $REFFN WOCB
   \   016E  EC                MOV     A,R4
   \   016F  6004              JZ      ?0016
   \   0171            ?0015:
   \   0171  7C01              MOV     R4,#1
   \   0173  8059              SJMP    ?0021
   \   0175            ?0016:
    158              if (WOCB(address)) return 1;
   \   0175  900000            MOV     DPTR,#$LOCBX ReadCalenderByte+2
   \   0178  E0                MOVX    A,@DPTR
   \   0179  FC                MOV     R4,A
   \   017A  120000            LCALL   $REFFN WOCB
   \   017D  EC                MOV     A,R4
   \   017E  6004              JZ      ?0018
   \   0180            ?0017:
   \   0180  7C01              MOV     R4,#1
   \   0182  804A              SJMP    ?0021
   \   0184            ?0018:
    159          
    160              SDA = 0;            //Stop condition
   \   0184  C2B0              CLR     P3.0
    161              CalenderWait4();
   \   0186  120000            LCALL   $REFFN CalenderWait4
    162              SCL = 1;
   \   0189  D2B1              SETB    P3.1
    163              CalenderWait4();
   \   018B  120000            LCALL   $REFFN CalenderWait4
    164              SDA = 1;
   \   018E  D2B0              SETB    P3.0
    165              CalenderWait4();
   \   0190  120000            LCALL   $REFFN CalenderWait4
    166          
    167              SDA = 0;            //Restart
   \   0193  C2B0              CLR     P3.0
    168              CalenderWait4();
   \   0195  120000            LCALL   $REFFN CalenderWait4
    169              SCL = 0;
   \   0198  C2B1              CLR     P3.1
    170              CalenderWait4();
   \   019A  120000            LCALL   $REFFN CalenderWait4
    171          
    172              if (WOCB(0xD1)) return 1;        //Slave address och R/W = 1
   \   019D  7CD1              MOV     R4,#209
   \   019F  120000            LCALL   $REFFN WOCB
   \   01A2  EC                MOV     A,R4
   \   01A3  6004              JZ      ?0020
   \   01A5            ?0019:
   \   01A5  7C01              MOV     R4,#1
   \   01A7  8025              SJMP    ?0021
   \   01A9            ?0020:
    173              *dat = ROCB(1);
   \   01A9  7C01              MOV     R4,#1
   \   01AB  120000            LCALL   $REFFN ROCB
   \   01AE  900000            MOV     DPTR,#$LOCBX ReadCalenderByte+3
   \   01B1  E0                MOVX    A,@DPTR
   \   01B2  FF                MOV     R7,A
   \   01B3  A3                INC     DPTR
   \   01B4  E0                MOVX    A,@DPTR
   \   01B5  FE                MOV     R6,A
   \   01B6  A3                INC     DPTR
   \   01B7  E0                MOVX    A,@DPTR
   \   01B8  FD                MOV     R5,A
   \   01B9  EC                MOV     A,R4
   \   01BA  120000            LCALL   ?ST_A_R567_L17
    174          
    175              SDA = 0;
   \   01BD  C2B0              CLR     P3.0
    176              CalenderWait4();
   \   01BF  120000            LCALL   $REFFN CalenderWait4
    177              SCL = 1;
   \   01C2  D2B1              SETB    P3.1
    178              CalenderWait4();
   \   01C4  120000            LCALL   $REFFN CalenderWait4
    179              SDA = 1;
   \   01C7  D2B0              SETB    P3.0
    180              CalenderWait4();
   \   01C9  120000            LCALL   $REFFN CalenderWait4
    181           
    182              return 0;
   \   01CC  7C00              MOV     R4,#0
    183          }               
   \   01CE            ?0021:
   \   01CE  900000            MOV     DPTR,#$LOCBX ReadCalenderByte
   \   01D1  E0                MOVX    A,@DPTR
   \   01D2  F8                MOV     R0,A
   \   01D3  A3                INC     DPTR
   \   01D4  E0                MOVX    A,@DPTR
   \   01D5  C0E0              PUSH    ACC
   \   01D7  E8                MOV     A,R0
   \   01D8  C0E0              PUSH    ACC
   \   01DA  22                RET
    184          
    185          void    GetTimeNow(TIME* tptr)
    186          {
   \   01DB            GetTimeNow:
   \   01DB  900000            MOV     DPTR,#$LOCBX GetTimeNow+1
   \   01DE  D0E0              POP     ACC
   \   01E0  F0                MOVX    @DPTR,A
   \   01E1  A3                INC     DPTR
   \   01E2  D0E0              POP     ACC
   \   01E4  F0                MOVX    @DPTR,A
    187              xdata char t;
    188              
    189              ReadCalenderByte(0, &t);
   \   01E5  A3                INC     DPTR
   \   01E6  EF                MOV     A,R7
   \   01E7  F0                MOVX    @DPTR,A
   \   01E8  A3                INC     DPTR
   \   01E9  EE                MOV     A,R6
   \   01EA  F0                MOVX    @DPTR,A
   \   01EB  A3                INC     DPTR
   \   01EC  ED                MOV     A,R5
   \   01ED  F0                MOVX    @DPTR,A
   \   01EE  7D00              MOV     R5,#LOW $LOCBX GetTimeNow
   \   01F0  7E00              MOV     R6,#HIGH $LOCBX GetTimeNow
   \   01F2  7F01              MOV     R7,#1
   \   01F4  7C00              MOV     R4,#0
   \   01F6  120000            LCALL   $REFFN ReadCalenderByte
    190              tptr->seconds = t;
   \   01F9  900000            MOV     DPTR,#$LOCBX GetTimeNow
   \   01FC  E0                MOVX    A,@DPTR
   \   01FD  FC                MOV     R4,A
   \   01FE  900000            MOV     DPTR,#$LOCBX GetTimeNow+3
   \   0201  E0                MOVX    A,@DPTR
   \   0202  FF                MOV     R7,A
   \   0203  A3                INC     DPTR
   \   0204  E0                MOVX    A,@DPTR
   \   0205  FE                MOV     R6,A
   \   0206  A3                INC     DPTR
   \   0207  E0                MOVX    A,@DPTR
   \   0208  FD                MOV     R5,A
   \   0209  EC                MOV     A,R4
   \   020A  120000            LCALL   ?ST_A_R567_L17
    191          
    192              ReadCalenderByte(1, &t);
   \   020D  7D00              MOV     R5,#LOW $LOCBX GetTimeNow
   \   020F  7E00              MOV     R6,#HIGH $LOCBX GetTimeNow
   \   0211  7F01              MOV     R7,#1
   \   0213  7C01              MOV     R4,#1
   \   0215  120000            LCALL   $REFFN ReadCalenderByte
    193              tptr->minutes = t;
   \   0218  900000            MOV     DPTR,#$LOCBX GetTimeNow
   \   021B  E0                MOVX    A,@DPTR
   \   021C  FC                MOV     R4,A
   \   021D  900000            MOV     DPTR,#$LOCBX GetTimeNow+3
   \   0220  E0                MOVX    A,@DPTR
   \   0221  FF                MOV     R7,A
   \   0222  A3                INC     DPTR
   \   0223  E0                MOVX    A,@DPTR
   \   0224  FE                MOV     R6,A
   \   0225  A3                INC     DPTR
   \   0226  E0                MOVX    A,@DPTR
   \   0227  FD                MOV     R5,A
   \   0228  EC                MOV     A,R4
   \   0229  900001            MOV     DPTR,#1
   \   022C  120000            LCALL   ?ST_A_R567_DISP_L17
    194          
    195              ReadCalenderByte(2, &t);
   \   022F  7D00              MOV     R5,#LOW $LOCBX GetTimeNow
   \   0231  7E00              MOV     R6,#HIGH $LOCBX GetTimeNow
   \   0233  7F01              MOV     R7,#1
   \   0235  7C02              MOV     R4,#2
   \   0237  120000            LCALL   $REFFN ReadCalenderByte
    196              tptr->hours = t;
    197          }
   \   023A  900000            MOV     DPTR,#$LOCBX GetTimeNow
   \   023D  E0                MOVX    A,@DPTR
   \   023E  FC                MOV     R4,A
   \   023F  900000            MOV     DPTR,#$LOCBX GetTimeNow+3
   \   0242  E0                MOVX    A,@DPTR
   \   0243  FF                MOV     R7,A
   \   0244  A3                INC     DPTR
   \   0245  E0                MOVX    A,@DPTR
   \   0246  FE                MOV     R6,A
   \   0247  A3                INC     DPTR
   \   0248  E0                MOVX    A,@DPTR
   \   0249  FD                MOV     R5,A
   \   024A  EC                MOV     A,R4
   \   024B  900002            MOV     DPTR,#2
   \   024E  120000            LCALL   ?ST_A_R567_DISP_L17
   \   0251  900000            MOV     DPTR,#$LOCBX GetTimeNow+1
   \   0254  E0                MOVX    A,@DPTR
   \   0255  F8                MOV     R0,A
   \   0256  A3                INC     DPTR
   \   0257  E0                MOVX    A,@DPTR
   \   0258  C0E0              PUSH    ACC
   \   025A  E8                MOV     A,R0
   \   025B  C0E0              PUSH    ACC
   \   025D  22                RET
    198          
    199          void    GetDateNow(DATE* tptr)
    200          {
   \   025E            GetDateNow:
   \   025E  900000            MOV     DPTR,#$LOCBX GetDateNow+1
   \   0261  D0E0              POP     ACC
   \   0263  F0                MOVX    @DPTR,A
   \   0264  A3                INC     DPTR
   \   0265  D0E0              POP     ACC
   \   0267  F0                MOVX    @DPTR,A
    201              xdata char t;
    202              
    203              ReadCalenderByte(3, &t);
   \   0268  A3                INC     DPTR
   \   0269  EF                MOV     A,R7
   \   026A  F0                MOVX    @DPTR,A
   \   026B  A3                INC     DPTR
   \   026C  EE                MOV     A,R6
   \   026D  F0                MOVX    @DPTR,A
   \   026E  A3                INC     DPTR
   \   026F  ED                MOV     A,R5
   \   0270  F0                MOVX    @DPTR,A
   \   0271  7D00              MOV     R5,#LOW $LOCBX GetDateNow
   \   0273  7E00              MOV     R6,#HIGH $LOCBX GetDateNow
   \   0275  7F01              MOV     R7,#1
   \   0277  7C03              MOV     R4,#3
   \   0279  120000            LCALL   $REFFN ReadCalenderByte
    204              tptr->day = t;
   \   027C  900000            MOV     DPTR,#$LOCBX GetDateNow
   \   027F  E0                MOVX    A,@DPTR
   \   0280  FC                MOV     R4,A
   \   0281  900000            MOV     DPTR,#$LOCBX GetDateNow+3
   \   0284  E0                MOVX    A,@DPTR
   \   0285  FF                MOV     R7,A
   \   0286  A3                INC     DPTR
   \   0287  E0                MOVX    A,@DPTR
   \   0288  FE                MOV     R6,A
   \   0289  A3                INC     DPTR
   \   028A  E0                MOVX    A,@DPTR
   \   028B  FD                MOV     R5,A
   \   028C  EC                MOV     A,R4
   \   028D  120000            LCALL   ?ST_A_R567_L17
    205          
    206              ReadCalenderByte(4, &t);
   \   0290  7D00              MOV     R5,#LOW $LOCBX GetDateNow
   \   0292  7E00              MOV     R6,#HIGH $LOCBX GetDateNow
   \   0294  7F01              MOV     R7,#1
   \   0296  7C04              MOV     R4,#4
   \   0298  120000            LCALL   $REFFN ReadCalenderByte
    207              tptr->date = t;
   \   029B  900000            MOV     DPTR,#$LOCBX GetDateNow
   \   029E  E0                MOVX    A,@DPTR
   \   029F  FC                MOV     R4,A
   \   02A0  900000            MOV     DPTR,#$LOCBX GetDateNow+3
   \   02A3  E0                MOVX    A,@DPTR
   \   02A4  FF                MOV     R7,A
   \   02A5  A3                INC     DPTR
   \   02A6  E0                MOVX    A,@DPTR
   \   02A7  FE                MOV     R6,A
   \   02A8  A3                INC     DPTR
   \   02A9  E0                MOVX    A,@DPTR
   \   02AA  FD                MOV     R5,A
   \   02AB  EC                MOV     A,R4
   \   02AC  900001            MOV     DPTR,#1
   \   02AF  120000            LCALL   ?ST_A_R567_DISP_L17
    208          
    209              ReadCalenderByte(5, &t);
   \   02B2  7D00              MOV     R5,#LOW $LOCBX GetDateNow
   \   02B4  7E00              MOV     R6,#HIGH $LOCBX GetDateNow
   \   02B6  7F01              MOV     R7,#1
   \   02B8  7C05              MOV     R4,#5
   \   02BA  120000            LCALL   $REFFN ReadCalenderByte
    210              tptr->month = t;
   \   02BD  900000            MOV     DPTR,#$LOCBX GetDateNow
   \   02C0  E0                MOVX    A,@DPTR
   \   02C1  FC                MOV     R4,A
   \   02C2  900000            MOV     DPTR,#$LOCBX GetDateNow+3
   \   02C5  E0                MOVX    A,@DPTR
   \   02C6  FF                MOV     R7,A
   \   02C7  A3                INC     DPTR
   \   02C8  E0                MOVX    A,@DPTR
   \   02C9  FE                MOV     R6,A
   \   02CA  A3                INC     DPTR
   \   02CB  E0                MOVX    A,@DPTR
   \   02CC  FD                MOV     R5,A
   \   02CD  EC                MOV     A,R4
   \   02CE  900002            MOV     DPTR,#2
   \   02D1  120000            LCALL   ?ST_A_R567_DISP_L17
    211          
    212              ReadCalenderByte(6, &t);
   \   02D4  7D00              MOV     R5,#LOW $LOCBX GetDateNow
   \   02D6  7E00              MOV     R6,#HIGH $LOCBX GetDateNow
   \   02D8  7F01              MOV     R7,#1
   \   02DA  7C06              MOV     R4,#6
   \   02DC  120000            LCALL   $REFFN ReadCalenderByte
    213              tptr->year = t;
    214          }
   \   02DF  900000            MOV     DPTR,#$LOCBX GetDateNow
   \   02E2  E0                MOVX    A,@DPTR
   \   02E3  FC                MOV     R4,A
   \   02E4  900000            MOV     DPTR,#$LOCBX GetDateNow+3
   \   02E7  E0                MOVX    A,@DPTR
   \   02E8  FF                MOV     R7,A
   \   02E9  A3                INC     DPTR
   \   02EA  E0                MOVX    A,@DPTR
   \   02EB  FE                MOV     R6,A
   \   02EC  A3                INC     DPTR
   \   02ED  E0                MOVX    A,@DPTR
   \   02EE  FD                MOV     R5,A
   \   02EF  EC                MOV     A,R4
   \   02F0  900003            MOV     DPTR,#3
   \   02F3  120000            LCALL   ?ST_A_R567_DISP_L17
   \   02F6  900000            MOV     DPTR,#$LOCBX GetDateNow+1
   \   02F9  E0                MOVX    A,@DPTR
   \   02FA  F8                MOV     R0,A
   \   02FB  A3                INC     DPTR
   \   02FC  E0                MOVX    A,@DPTR
   \   02FD  C0E0              PUSH    ACC
   \   02FF  E8                MOV     A,R0
   \   0300  C0E0              PUSH    ACC
   \   0302  22                RET
    215           
    216          /*
    217          void    GetTimeNow(TIME* tptr)
    218          {
    219              char t;
    220              
    221              ReadCalenderByte(0, &t);
    222              tptr->seconds = (((t >> 4) & 0x07) * 10) + (t & 0x0F);
    223           
    224              ReadCalenderByte(1, &t);
    225              tptr->minutes = (((t >> 4) & 0x07) * 10) + (t & 0x0F);
    226           
    227              ReadCalenderByte(2, &t);
    228              if (t & 0x40) {
    229                  //12 visning:
    230                  if (t & 0x20) {
    231                      //PM
    232                      tptr->hours = (((t >> 4) & 0x01) * 10) + (t & 0x0F) + 12;
    233                  } else {
    234                      //AM
    235                      tptr->hours = (((t >> 4) & 0x01) * 10) + (t & 0x0F);
    236                  }
    237              } else {
    238                  //24 visning
    239                  tptr->hours = (((t >> 4) & 0x03) * 10) + (t & 0x0F);
    240              }
    241          }
    242          
    243          void    GetDateNow(DATE* tptr)
    244          {
    245              char t;
    246              
    247              ReadCalenderByte(3, &t);
    248              tptr->day = t;
    249          
    250              ReadCalenderByte(4, &t);
    251              tptr->date = (((t >> 4) & 0x03) * 10) + (t & 0x0F);
    252              
    253              ReadCalenderByte(5, &t);
    254              tptr->month = (((t >> 4) & 0x03) * 10) + (t & 0x0F);
    255          
    256              ReadCalenderByte(6, &t);
    257              tptr->year = (((t >> 4) & 0x0F) * 10) + (t & 0x0F);
    258          }
    259          */
    260          
    261          void    CreateTimeString(TIME* tptr, char* str)
    262          {
   \   0303            CreateTimeString:
    263              xdata char    i;
    264              
    265              i = 0;
   \   0303  E4                CLR     A
   \   0304  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   0307  F0                MOVX    @DPTR,A
    266              
    267              if (tptr->hours & 0x40) {
   \   0308  A3                INC     DPTR
   \   0309  EF                MOV     A,R7
   \   030A  F0                MOVX    @DPTR,A
   \   030B  A3                INC     DPTR
   \   030C  EE                MOV     A,R6
   \   030D  F0                MOVX    @DPTR,A
   \   030E  A3                INC     DPTR
   \   030F  ED                MOV     A,R5
   \   0310  F0                MOVX    @DPTR,A
   \   0311  900002            MOV     DPTR,#2
   \   0314  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0317  30E629            JNB     ACC.6,?0023
   \   031A            ?0022:
    268                  str[i++] = ((tptr->hours >> 4) & 0x01) + '0';
   \   031A  900002            MOV     DPTR,#2
   \   031D  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0320  C4                SWAP    A
   \   0321  5401              ANL     A,#1
   \   0323  2430              ADD     A,#48
   \   0325  FC                MOV     R4,A
   \   0326  900000            MOV     DPTR,#$LOCBX CreateTimeString+4
   \   0329  E0                MOVX    A,@DPTR
   \   032A  FF                MOV     R7,A
   \   032B  A3                INC     DPTR
   \   032C  E0                MOVX    A,@DPTR
   \   032D  FE                MOV     R6,A
   \   032E  A3                INC     DPTR
   \   032F  E0                MOVX    A,@DPTR
   \   0330  FD                MOV     R5,A
   \   0331  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   0334  E0                MOVX    A,@DPTR
   \   0335  FA                MOV     R2,A
   \   0336  04                INC     A
   \   0337  F0                MOVX    @DPTR,A
   \   0338  8A82              MOV     DPL,R2
   \   033A  758300            MOV     DPH,#0
   \   033D  EC                MOV     A,R4
   \   033E  120000            LCALL   ?ST_A_R567_DISP_L17
    269              } else {
   \   0341  8027              SJMP    ?0024
   \   0343            ?0023:
    270                  str[i++] = ((tptr->hours >> 4) & 0x03) + '0';
   \   0343  900002            MOV     DPTR,#2
   \   0346  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0349  C4                SWAP    A
   \   034A  5403              ANL     A,#3
   \   034C  2430              ADD     A,#48
   \   034E  FC                MOV     R4,A
   \   034F  900000            MOV     DPTR,#$LOCBX CreateTimeString+4
   \   0352  E0                MOVX    A,@DPTR
   \   0353  FF                MOV     R7,A
   \   0354  A3                INC     DPTR
   \   0355  E0                MOVX    A,@DPTR
   \   0356  FE                MOV     R6,A
   \   0357  A3                INC     DPTR
   \   0358  E0                MOVX    A,@DPTR
   \   0359  FD                MOV     R5,A
   \   035A  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   035D  E0                MOVX    A,@DPTR
   \   035E  FA                MOV     R2,A
   \   035F  04                INC     A
   \   0360  F0                MOVX    @DPTR,A
   \   0361  8A82              MOV     DPL,R2
   \   0363  758300            MOV     DPH,#0
   \   0366  EC                MOV     A,R4
   \   0367  120000            LCALL   ?ST_A_R567_DISP_L17
   \   036A            ?0024:
    271              }
    272              str[i++] = (tptr->hours & 0x0F) + '0';
   \   036A  900000            MOV     DPTR,#$LOCBX CreateTimeString+1
   \   036D  E0                MOVX    A,@DPTR
   \   036E  FF                MOV     R7,A
   \   036F  A3                INC     DPTR
   \   0370  E0                MOVX    A,@DPTR
   \   0371  FE                MOV     R6,A
   \   0372  A3                INC     DPTR
   \   0373  E0                MOVX    A,@DPTR
   \   0374  FD                MOV     R5,A
   \   0375  900002            MOV     DPTR,#2
   \   0378  120000            LCALL   ?LD_A_R567_DISP_L17
   \   037B  540F              ANL     A,#15
   \   037D  2430              ADD     A,#48
   \   037F  FC                MOV     R4,A
   \   0380  900000            MOV     DPTR,#$LOCBX CreateTimeString+4
   \   0383  E0                MOVX    A,@DPTR
   \   0384  FB                MOV     R3,A
   \   0385  A3                INC     DPTR
   \   0386  E0                MOVX    A,@DPTR
   \   0387  FA                MOV     R2,A
   \   0388  A3                INC     DPTR
   \   0389  E0                MOVX    A,@DPTR
   \   038A  F9                MOV     R1,A
   \   038B  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   038E  E0                MOVX    A,@DPTR
   \   038F  F8                MOV     R0,A
   \   0390  04                INC     A
   \   0391  F0                MOVX    @DPTR,A
   \   0392  8882              MOV     DPL,R0
   \   0394  758300            MOV     DPH,#0
   \   0397  EC                MOV     A,R4
   \   0398  120000            LCALL   ?ST_A_R123_DISP_L17
    273              
    274              str[i++] = ':';
   \   039B  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   039E  E0                MOVX    A,@DPTR
   \   039F  FC                MOV     R4,A
   \   03A0  04                INC     A
   \   03A1  F0                MOVX    @DPTR,A
   \   03A2  8C82              MOV     DPL,R4
   \   03A4  758300            MOV     DPH,#0
   \   03A7  743A              MOV     A,#58
   \   03A9  120000            LCALL   ?ST_A_R123_DISP_L17
    275          
    276              str[i++] = ((tptr->minutes >> 4) & 0x07) + '0';
   \   03AC  900001            MOV     DPTR,#1
   \   03AF  120000            LCALL   ?LD_A_R567_DISP_L17
   \   03B2  C4                SWAP    A
   \   03B3  5407              ANL     A,#7
   \   03B5  2430              ADD     A,#48
   \   03B7  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   03BA  FC                MOV     R4,A
   \   03BB  E0                MOVX    A,@DPTR
   \   03BC  F8                MOV     R0,A
   \   03BD  04                INC     A
   \   03BE  F0                MOVX    @DPTR,A
   \   03BF  8882              MOV     DPL,R0
   \   03C1  758300            MOV     DPH,#0
   \   03C4  EC                MOV     A,R4
   \   03C5  120000            LCALL   ?ST_A_R123_DISP_L17
    277              str[i++] = (tptr->minutes & 0x0F) + '0';
   \   03C8  900001            MOV     DPTR,#1
   \   03CB  120000            LCALL   ?LD_A_R567_DISP_L17
   \   03CE  540F              ANL     A,#15
   \   03D0  2430              ADD     A,#48
   \   03D2  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   03D5  FC                MOV     R4,A
   \   03D6  E0                MOVX    A,@DPTR
   \   03D7  F8                MOV     R0,A
   \   03D8  04                INC     A
   \   03D9  F0                MOVX    @DPTR,A
   \   03DA  8882              MOV     DPL,R0
   \   03DC  758300            MOV     DPH,#0
   \   03DF  EC                MOV     A,R4
   \   03E0  120000            LCALL   ?ST_A_R123_DISP_L17
    278              
    279              str[i++] = ':';
   \   03E3  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   03E6  E0                MOVX    A,@DPTR
   \   03E7  FC                MOV     R4,A
   \   03E8  04                INC     A
   \   03E9  F0                MOVX    @DPTR,A
   \   03EA  8C82              MOV     DPL,R4
   \   03EC  758300            MOV     DPH,#0
   \   03EF  743A              MOV     A,#58
   \   03F1  120000            LCALL   ?ST_A_R123_DISP_L17
    280           
    281              str[i++] = ((tptr->seconds >> 4) & 0x07) + '0';
   \   03F4  120000            LCALL   ?LD_A_R567_L17
   \   03F7  C4                SWAP    A
   \   03F8  5407              ANL     A,#7
   \   03FA  2430              ADD     A,#48
   \   03FC  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   03FF  FC                MOV     R4,A
   \   0400  E0                MOVX    A,@DPTR
   \   0401  F8                MOV     R0,A
   \   0402  04                INC     A
   \   0403  F0                MOVX    @DPTR,A
   \   0404  8882              MOV     DPL,R0
   \   0406  758300            MOV     DPH,#0
   \   0409  EC                MOV     A,R4
   \   040A  120000            LCALL   ?ST_A_R123_DISP_L17
    282              str[i++] = (tptr->seconds & 0x0F) + '0';
   \   040D  120000            LCALL   ?LD_A_R567_L17
   \   0410  540F              ANL     A,#15
   \   0412  2430              ADD     A,#48
   \   0414  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   0417  FC                MOV     R4,A
   \   0418  E0                MOVX    A,@DPTR
   \   0419  F8                MOV     R0,A
   \   041A  04                INC     A
   \   041B  F0                MOVX    @DPTR,A
   \   041C  8882              MOV     DPL,R0
   \   041E  758300            MOV     DPH,#0
   \   0421  EC                MOV     A,R4
   \   0422  120000            LCALL   ?ST_A_R123_DISP_L17
    283          
    284              if (tptr->hours & 0x40) {
   \   0425  900002            MOV     DPTR,#2
   \   0428  120000            LCALL   ?LD_A_R567_DISP_L17
   \   042B  30E64F            JNB     ACC.6,?0026
   \   042E            ?0025:
    285                  str[i++] = ' ';
   \   042E  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   0431  E0                MOVX    A,@DPTR
   \   0432  FC                MOV     R4,A
   \   0433  04                INC     A
   \   0434  F0                MOVX    @DPTR,A
   \   0435  8C82              MOV     DPL,R4
   \   0437  758300            MOV     DPH,#0
   \   043A  7420              MOV     A,#32
   \   043C  120000            LCALL   ?ST_A_R123_DISP_L17
    286                  if (tptr->hours & 0x20) {
   \   043F  900002            MOV     DPTR,#2
   \   0442  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0445  30E513            JNB     ACC.5,?0028
   \   0448            ?0027:
    287                      str[i++] = 'A';
   \   0448  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   044B  E0                MOVX    A,@DPTR
   \   044C  FC                MOV     R4,A
   \   044D  04                INC     A
   \   044E  F0                MOVX    @DPTR,A
   \   044F  8C82              MOV     DPL,R4
   \   0451  758300            MOV     DPH,#0
   \   0454  7441              MOV     A,#65
   \   0456  120000            LCALL   ?ST_A_R123_DISP_L17
    288                  } else {
   \   0459  8011              SJMP    ?0029
   \   045B            ?0028:
    289                      str[i++] = 'P';
   \   045B  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   045E  E0                MOVX    A,@DPTR
   \   045F  FC                MOV     R4,A
   \   0460  04                INC     A
   \   0461  F0                MOVX    @DPTR,A
   \   0462  8C82              MOV     DPL,R4
   \   0464  758300            MOV     DPH,#0
   \   0467  7450              MOV     A,#80
   \   0469  120000            LCALL   ?ST_A_R123_DISP_L17
   \   046C            ?0029:
    290                  }
    291                  str[i++] = 'M';  
   \   046C  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   046F  E0                MOVX    A,@DPTR
   \   0470  FC                MOV     R4,A
   \   0471  04                INC     A
   \   0472  F0                MOVX    @DPTR,A
   \   0473  8C82              MOV     DPL,R4
   \   0475  758300            MOV     DPH,#0
   \   0478  744D              MOV     A,#77
   \   047A  120000            LCALL   ?ST_A_R123_DISP_L17
   \   047D            ?0026:
    292              }
    293              str[i++] = 0x00;
   \   047D  900000            MOV     DPTR,#$LOCBX CreateTimeString
   \   0480  E0                MOVX    A,@DPTR
   \   0481  FC                MOV     R4,A
   \   0482  04                INC     A
   \   0483  F0                MOVX    @DPTR,A
   \   0484  8C82              MOV     DPL,R4
   \   0486  758300            MOV     DPH,#0
   \   0489  E4                CLR     A
   \   048A  020000            LJMP    ?ST_A_R123_DISP_L17
    294          } 
    295          
    296          
    297          
    298          void    CreateDateString(DATE* tptr, char* str)
    299          //Skapar en sträng med utseendet: YYYY-MM-DD
    300          {
   \   048D            CreateDateString:
    301              xdata char    i;
    302              
    303              i = 0;
    304          
    305              str[i++] = '2';
   \   048D  900000            MOV     DPTR,#$LOCBX CreateDateString+4
   \   0490  E0                MOVX    A,@DPTR
   \   0491  FB                MOV     R3,A
   \   0492  A3                INC     DPTR
   \   0493  E0                MOVX    A,@DPTR
   \   0494  FA                MOV     R2,A
   \   0495  A3                INC     DPTR
   \   0496  E0                MOVX    A,@DPTR
   \   0497  F9                MOV     R1,A
   \   0498  7432              MOV     A,#50
   \   049A  120000            LCALL   ?ST_A_R123_L17
    306              str[i++] = '0';
   \   049D  7430              MOV     A,#48
   \   049F  900001            MOV     DPTR,#1
   \   04A2  120000            LCALL   ?ST_A_R123_DISP_L17
    307              str[i++] = ((tptr->year >> 4) & 0x0F) + '0';
   \   04A5  900000            MOV     DPTR,#$LOCBX CreateDateString+1
   \   04A8  EF                MOV     A,R7
   \   04A9  F0                MOVX    @DPTR,A
   \   04AA  A3                INC     DPTR
   \   04AB  EE                MOV     A,R6
   \   04AC  F0                MOVX    @DPTR,A
   \   04AD  A3                INC     DPTR
   \   04AE  ED                MOV     A,R5
   \   04AF  F0                MOVX    @DPTR,A
   \   04B0  900003            MOV     DPTR,#3
   \   04B3  120000            LCALL   ?LD_A_R567_DISP_L17
   \   04B6  C4                SWAP    A
   \   04B7  540F              ANL     A,#15
   \   04B9  2430              ADD     A,#48
   \   04BB  900002            MOV     DPTR,#2
   \   04BE  120000            LCALL   ?ST_A_R123_DISP_L17
    308              str[i++] = (tptr->year & 0x0F) + '0';
   \   04C1  900003            MOV     DPTR,#3
   \   04C4  120000            LCALL   ?LD_A_R567_DISP_L17
   \   04C7  540F              ANL     A,#15
   \   04C9  2430              ADD     A,#48
   \   04CB  900003            MOV     DPTR,#3
   \   04CE  120000            LCALL   ?ST_A_R123_DISP_L17
    309              str[i++] = '-';
   \   04D1  742D              MOV     A,#45
   \   04D3  900004            MOV     DPTR,#4
   \   04D6  120000            LCALL   ?ST_A_R123_DISP_L17
    310              str[i++] = ((tptr->month >> 4) & 0x03) + '0';
   \   04D9  900002            MOV     DPTR,#2
   \   04DC  120000            LCALL   ?LD_A_R567_DISP_L17
   \   04DF  C4                SWAP    A
   \   04E0  5403              ANL     A,#3
   \   04E2  2430              ADD     A,#48
   \   04E4  900005            MOV     DPTR,#5
   \   04E7  120000            LCALL   ?ST_A_R123_DISP_L17
    311              str[i++] = (tptr->month & 0x0F) + '0';
   \   04EA  900002            MOV     DPTR,#2
   \   04ED  120000            LCALL   ?LD_A_R567_DISP_L17
   \   04F0  540F              ANL     A,#15
   \   04F2  2430              ADD     A,#48
   \   04F4  900006            MOV     DPTR,#6
   \   04F7  120000            LCALL   ?ST_A_R123_DISP_L17
    312              str[i++] = '-';
   \   04FA  742D              MOV     A,#45
   \   04FC  900007            MOV     DPTR,#7
   \   04FF  120000            LCALL   ?ST_A_R123_DISP_L17
    313              str[i++] = ((tptr->date >> 4) & 0x03) + '0';
   \   0502  900001            MOV     DPTR,#1
   \   0505  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0508  C4                SWAP    A
   \   0509  5403              ANL     A,#3
   \   050B  2430              ADD     A,#48
   \   050D  900008            MOV     DPTR,#8
   \   0510  120000            LCALL   ?ST_A_R123_DISP_L17
    314              str[i++] = (tptr->date & 0x0F) + '0';
   \   0513  900001            MOV     DPTR,#1
   \   0516  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0519  540F              ANL     A,#15
   \   051B  2430              ADD     A,#48
   \   051D  900009            MOV     DPTR,#9
   \   0520  120000            LCALL   ?ST_A_R123_DISP_L17
    315              str[i++] = 0x00;
   \   0523  E4                CLR     A
   \   0524  90000A            MOV     DPTR,#10
   \   0527  120000            LCALL   ?ST_A_R123_DISP_L17
   \   052A  740B              MOV     A,#11
   \   052C  900000            MOV     DPTR,#$LOCBX CreateDateString
   \   052F  F0                MOVX    @DPTR,A
    316          }        
   \   0530  22                RET
    317           
    318          void    CreateDateString2(DATE* tptr, char* str)
    319          //Skapar en sträng med utseendet: DD MMM
    320          {
   \   0531            CreateDateString2:
    321              xdata char    i;
    322              xdata char    c;
    323              
    324              i = 0;
    325                        
    326              c = (tptr->date >> 4) & 0x03;
   \   0531  900000            MOV     DPTR,#$LOCBX CreateDateString2+2
   \   0534  EF                MOV     A,R7
   \   0535  F0                MOVX    @DPTR,A
   \   0536  A3                INC     DPTR
   \   0537  EE                MOV     A,R6
   \   0538  F0                MOVX    @DPTR,A
   \   0539  A3                INC     DPTR
   \   053A  ED                MOV     A,R5
   \   053B  F0                MOVX    @DPTR,A
   \   053C  900001            MOV     DPTR,#1
   \   053F  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0542  C4                SWAP    A
   \   0543  5403              ANL     A,#3
    327              
    328              if (c) {
   \   0545  FC                MOV     R4,A
   \   0546  E4                CLR     A
   \   0547  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   054A  F0                MOVX    @DPTR,A
   \   054B  EC                MOV     A,R4
   \   054C  A3                INC     DPTR
   \   054D  F0                MOVX    @DPTR,A
   \   054E  6020              JZ      ?0031
   \   0550            ?0030:
    329                  str[i++] = c + '0';
   \   0550  2430              ADD     A,#48
   \   0552  FC                MOV     R4,A
   \   0553  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   0556  E0                MOVX    A,@DPTR
   \   0557  FF                MOV     R7,A
   \   0558  A3                INC     DPTR
   \   0559  E0                MOVX    A,@DPTR
   \   055A  FE                MOV     R6,A
   \   055B  A3                INC     DPTR
   \   055C  E0                MOVX    A,@DPTR
   \   055D  FD                MOV     R5,A
   \   055E  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0561  E0                MOVX    A,@DPTR
   \   0562  FA                MOV     R2,A
   \   0563  04                INC     A
   \   0564  F0                MOVX    @DPTR,A
   \   0565  8A82              MOV     DPL,R2
   \   0567  758300            MOV     DPH,#0
   \   056A  EC                MOV     A,R4
   \   056B  120000            LCALL   ?ST_A_R567_DISP_L17
    330              } else {
   \   056E  801C              SJMP    ?0032
   \   0570            ?0031:
    331                  str[i++] = ' ';
   \   0570  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   0573  E0                MOVX    A,@DPTR
   \   0574  FF                MOV     R7,A
   \   0575  A3                INC     DPTR
   \   0576  E0                MOVX    A,@DPTR
   \   0577  FE                MOV     R6,A
   \   0578  A3                INC     DPTR
   \   0579  E0                MOVX    A,@DPTR
   \   057A  FD                MOV     R5,A
   \   057B  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   057E  E0                MOVX    A,@DPTR
   \   057F  FC                MOV     R4,A
   \   0580  04                INC     A
   \   0581  F0                MOVX    @DPTR,A
   \   0582  8C82              MOV     DPL,R4
   \   0584  758300            MOV     DPH,#0
   \   0587  7420              MOV     A,#32
   \   0589  120000            LCALL   ?ST_A_R567_DISP_L17
   \   058C            ?0032:
    332              }
    333              str[i++] = (tptr->date & 0x0F) + '0';
   \   058C  900000            MOV     DPTR,#$LOCBX CreateDateString2+2
   \   058F  E0                MOVX    A,@DPTR
   \   0590  FF                MOV     R7,A
   \   0591  A3                INC     DPTR
   \   0592  E0                MOVX    A,@DPTR
   \   0593  FE                MOV     R6,A
   \   0594  A3                INC     DPTR
   \   0595  E0                MOVX    A,@DPTR
   \   0596  FD                MOV     R5,A
   \   0597  900001            MOV     DPTR,#1
   \   059A  120000            LCALL   ?LD_A_R567_DISP_L17
   \   059D  540F              ANL     A,#15
   \   059F  2430              ADD     A,#48
   \   05A1  FC                MOV     R4,A
   \   05A2  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   05A5  E0                MOVX    A,@DPTR
   \   05A6  FB                MOV     R3,A
   \   05A7  A3                INC     DPTR
   \   05A8  E0                MOVX    A,@DPTR
   \   05A9  FA                MOV     R2,A
   \   05AA  A3                INC     DPTR
   \   05AB  E0                MOVX    A,@DPTR
   \   05AC  F9                MOV     R1,A
   \   05AD  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   05B0  E0                MOVX    A,@DPTR
   \   05B1  F8                MOV     R0,A
   \   05B2  04                INC     A
   \   05B3  F0                MOVX    @DPTR,A
   \   05B4  8882              MOV     DPL,R0
   \   05B6  758300            MOV     DPH,#0
   \   05B9  EC                MOV     A,R4
   \   05BA  120000            LCALL   ?ST_A_R123_DISP_L17
    334              str[i++] = ' ';
   \   05BD  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   05C0  E0                MOVX    A,@DPTR
   \   05C1  FC                MOV     R4,A
   \   05C2  04                INC     A
   \   05C3  F0                MOVX    @DPTR,A
   \   05C4  8C82              MOV     DPL,R4
   \   05C6  758300            MOV     DPH,#0
   \   05C9  7420              MOV     A,#32
   \   05CB  120000            LCALL   ?ST_A_R123_DISP_L17
    335              switch (tptr->month) {
   \   05CE  900002            MOV     DPTR,#2
   \   05D1  120000            LCALL   ?LD_A_R567_DISP_L17
   \   05D4  120000            LCALL   ?A_V_SWITCH_L05
   \   05D7  05FF              DW      ?0034
   \   05D9  01                DB      1
   \   05DA  0640              DW      ?0035
   \   05DC  02                DB      2
   \   05DD  0681              DW      ?0036
   \   05DF  03                DB      3
   \   05E0  06C2              DW      ?0037
   \   05E2  04                DB      4
   \   05E3  0703              DW      ?0038
   \   05E5  05                DB      5
   \   05E6  0744              DW      ?0039
   \   05E8  06                DB      6
   \   05E9  0785              DW      ?0040
   \   05EB  07                DB      7
   \   05EC  07C6              DW      ?0041
   \   05EE  08                DB      8
   \   05EF  0807              DW      ?0042
   \   05F1  09                DB      9
   \   05F2  0848              DW      ?0043
   \   05F4  10                DB      16
   \   05F5  0889              DW      ?0044
   \   05F7  11                DB      17
   \   05F8  08CA              DW      ?0045
   \   05FA  12                DB      18
   \   05FB  0000              DW      0
   \   05FD  090A              DW      ?0046
   \   05FF            ?0034:
    336              case 0x01 :
    337                  str[i++] = 'J';
   \   05FF  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   0602  E0                MOVX    A,@DPTR
   \   0603  FF                MOV     R7,A
   \   0604  A3                INC     DPTR
   \   0605  E0                MOVX    A,@DPTR
   \   0606  FE                MOV     R6,A
   \   0607  A3                INC     DPTR
   \   0608  E0                MOVX    A,@DPTR
   \   0609  FD                MOV     R5,A
   \   060A  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   060D  E0                MOVX    A,@DPTR
   \   060E  FC                MOV     R4,A
   \   060F  04                INC     A
   \   0610  F0                MOVX    @DPTR,A
   \   0611  8C82              MOV     DPL,R4
   \   0613  758300            MOV     DPH,#0
   \   0616  744A              MOV     A,#74
   \   0618  120000            LCALL   ?ST_A_R567_DISP_L17
    338                  str[i++] = 'A';
   \   061B  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   061E  E0                MOVX    A,@DPTR
   \   061F  FC                MOV     R4,A
   \   0620  04                INC     A
   \   0621  F0                MOVX    @DPTR,A
   \   0622  8C82              MOV     DPL,R4
   \   0624  758300            MOV     DPH,#0
   \   0627  7441              MOV     A,#65
   \   0629  120000            LCALL   ?ST_A_R567_DISP_L17
    339                  str[i++] = 'N';
    340                  break;
   \   062C  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   062F  E0                MOVX    A,@DPTR
   \   0630  FC                MOV     R4,A
   \   0631  04                INC     A
   \   0632  F0                MOVX    @DPTR,A
   \   0633  8C82              MOV     DPL,R4
   \   0635  758300            MOV     DPH,#0
   \   0638  744E              MOV     A,#78
   \   063A  120000            LCALL   ?ST_A_R567_DISP_L17
   \   063D  02094A            LJMP    ?0033
   \   0640            ?0035:
    341              case 0x02 :
    342                  str[i++] = 'F';
   \   0640  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   0643  E0                MOVX    A,@DPTR
   \   0644  FF                MOV     R7,A
   \   0645  A3                INC     DPTR
   \   0646  E0                MOVX    A,@DPTR
   \   0647  FE                MOV     R6,A
   \   0648  A3                INC     DPTR
   \   0649  E0                MOVX    A,@DPTR
   \   064A  FD                MOV     R5,A
   \   064B  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   064E  E0                MOVX    A,@DPTR
   \   064F  FC                MOV     R4,A
   \   0650  04                INC     A
   \   0651  F0                MOVX    @DPTR,A
   \   0652  8C82              MOV     DPL,R4
   \   0654  758300            MOV     DPH,#0
   \   0657  7446              MOV     A,#70
   \   0659  120000            LCALL   ?ST_A_R567_DISP_L17
    343                  str[i++] = 'E';
   \   065C  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   065F  E0                MOVX    A,@DPTR
   \   0660  FC                MOV     R4,A
   \   0661  04                INC     A
   \   0662  F0                MOVX    @DPTR,A
   \   0663  8C82              MOV     DPL,R4
   \   0665  758300            MOV     DPH,#0
   \   0668  7445              MOV     A,#69
   \   066A  120000            LCALL   ?ST_A_R567_DISP_L17
    344                  str[i++] = 'B';
    345                  break;
   \   066D  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0670  E0                MOVX    A,@DPTR
   \   0671  FC                MOV     R4,A
   \   0672  04                INC     A
   \   0673  F0                MOVX    @DPTR,A
   \   0674  8C82              MOV     DPL,R4
   \   0676  758300            MOV     DPH,#0
   \   0679  7442              MOV     A,#66
   \   067B  120000            LCALL   ?ST_A_R567_DISP_L17
   \   067E  02094A            LJMP    ?0033
   \   0681            ?0036:
    346              case 0x03 :
    347                  str[i++] = 'M';
   \   0681  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   0684  E0                MOVX    A,@DPTR
   \   0685  FF                MOV     R7,A
   \   0686  A3                INC     DPTR
   \   0687  E0                MOVX    A,@DPTR
   \   0688  FE                MOV     R6,A
   \   0689  A3                INC     DPTR
   \   068A  E0                MOVX    A,@DPTR
   \   068B  FD                MOV     R5,A
   \   068C  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   068F  E0                MOVX    A,@DPTR
   \   0690  FC                MOV     R4,A
   \   0691  04                INC     A
   \   0692  F0                MOVX    @DPTR,A
   \   0693  8C82              MOV     DPL,R4
   \   0695  758300            MOV     DPH,#0
   \   0698  744D              MOV     A,#77
   \   069A  120000            LCALL   ?ST_A_R567_DISP_L17
    348                  str[i++] = 'A';
   \   069D  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   06A0  E0                MOVX    A,@DPTR
   \   06A1  FC                MOV     R4,A
   \   06A2  04                INC     A
   \   06A3  F0                MOVX    @DPTR,A
   \   06A4  8C82              MOV     DPL,R4
   \   06A6  758300            MOV     DPH,#0
   \   06A9  7441              MOV     A,#65
   \   06AB  120000            LCALL   ?ST_A_R567_DISP_L17
    349                  str[i++] = 'R';
    350                  break;
   \   06AE  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   06B1  E0                MOVX    A,@DPTR
   \   06B2  FC                MOV     R4,A
   \   06B3  04                INC     A
   \   06B4  F0                MOVX    @DPTR,A
   \   06B5  8C82              MOV     DPL,R4
   \   06B7  758300            MOV     DPH,#0
   \   06BA  7452              MOV     A,#82
   \   06BC  120000            LCALL   ?ST_A_R567_DISP_L17
   \   06BF  02094A            LJMP    ?0033
   \   06C2            ?0037:
    351              case 0x04 :
    352                  str[i++] = 'A';
   \   06C2  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   06C5  E0                MOVX    A,@DPTR
   \   06C6  FF                MOV     R7,A
   \   06C7  A3                INC     DPTR
   \   06C8  E0                MOVX    A,@DPTR
   \   06C9  FE                MOV     R6,A
   \   06CA  A3                INC     DPTR
   \   06CB  E0                MOVX    A,@DPTR
   \   06CC  FD                MOV     R5,A
   \   06CD  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   06D0  E0                MOVX    A,@DPTR
   \   06D1  FC                MOV     R4,A
   \   06D2  04                INC     A
   \   06D3  F0                MOVX    @DPTR,A
   \   06D4  8C82              MOV     DPL,R4
   \   06D6  758300            MOV     DPH,#0
   \   06D9  7441              MOV     A,#65
   \   06DB  120000            LCALL   ?ST_A_R567_DISP_L17
    353                  str[i++] = 'P';
   \   06DE  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   06E1  E0                MOVX    A,@DPTR
   \   06E2  FC                MOV     R4,A
   \   06E3  04                INC     A
   \   06E4  F0                MOVX    @DPTR,A
   \   06E5  8C82              MOV     DPL,R4
   \   06E7  758300            MOV     DPH,#0
   \   06EA  7450              MOV     A,#80
   \   06EC  120000            LCALL   ?ST_A_R567_DISP_L17
    354                  str[i++] = 'R';
    355                  break;
   \   06EF  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   06F2  E0                MOVX    A,@DPTR
   \   06F3  FC                MOV     R4,A
   \   06F4  04                INC     A
   \   06F5  F0                MOVX    @DPTR,A
   \   06F6  8C82              MOV     DPL,R4
   \   06F8  758300            MOV     DPH,#0
   \   06FB  7452              MOV     A,#82
   \   06FD  120000            LCALL   ?ST_A_R567_DISP_L17
   \   0700  02094A            LJMP    ?0033
   \   0703            ?0038:
    356              case 0x05 :
    357                  str[i++] = 'M';
   \   0703  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   0706  E0                MOVX    A,@DPTR
   \   0707  FF                MOV     R7,A
   \   0708  A3                INC     DPTR
   \   0709  E0                MOVX    A,@DPTR
   \   070A  FE                MOV     R6,A
   \   070B  A3                INC     DPTR
   \   070C  E0                MOVX    A,@DPTR
   \   070D  FD                MOV     R5,A
   \   070E  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0711  E0                MOVX    A,@DPTR
   \   0712  FC                MOV     R4,A
   \   0713  04                INC     A
   \   0714  F0                MOVX    @DPTR,A
   \   0715  8C82              MOV     DPL,R4
   \   0717  758300            MOV     DPH,#0
   \   071A  744D              MOV     A,#77
   \   071C  120000            LCALL   ?ST_A_R567_DISP_L17
    358                  str[i++] = 'A';
   \   071F  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0722  E0                MOVX    A,@DPTR
   \   0723  FC                MOV     R4,A
   \   0724  04                INC     A
   \   0725  F0                MOVX    @DPTR,A
   \   0726  8C82              MOV     DPL,R4
   \   0728  758300            MOV     DPH,#0
   \   072B  7441              MOV     A,#65
   \   072D  120000            LCALL   ?ST_A_R567_DISP_L17
    359                  str[i++] = 'Y';
    360                  break;
   \   0730  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0733  E0                MOVX    A,@DPTR
   \   0734  FC                MOV     R4,A
   \   0735  04                INC     A
   \   0736  F0                MOVX    @DPTR,A
   \   0737  8C82              MOV     DPL,R4
   \   0739  758300            MOV     DPH,#0
   \   073C  7459              MOV     A,#89
   \   073E  120000            LCALL   ?ST_A_R567_DISP_L17
   \   0741  02094A            LJMP    ?0033
   \   0744            ?0039:
    361              case 0x06 :
    362                  str[i++] = 'J';
   \   0744  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   0747  E0                MOVX    A,@DPTR
   \   0748  FF                MOV     R7,A
   \   0749  A3                INC     DPTR
   \   074A  E0                MOVX    A,@DPTR
   \   074B  FE                MOV     R6,A
   \   074C  A3                INC     DPTR
   \   074D  E0                MOVX    A,@DPTR
   \   074E  FD                MOV     R5,A
   \   074F  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0752  E0                MOVX    A,@DPTR
   \   0753  FC                MOV     R4,A
   \   0754  04                INC     A
   \   0755  F0                MOVX    @DPTR,A
   \   0756  8C82              MOV     DPL,R4
   \   0758  758300            MOV     DPH,#0
   \   075B  744A              MOV     A,#74
   \   075D  120000            LCALL   ?ST_A_R567_DISP_L17
    363                  str[i++] = 'U';
   \   0760  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0763  E0                MOVX    A,@DPTR
   \   0764  FC                MOV     R4,A
   \   0765  04                INC     A
   \   0766  F0                MOVX    @DPTR,A
   \   0767  8C82              MOV     DPL,R4
   \   0769  758300            MOV     DPH,#0
   \   076C  7455              MOV     A,#85
   \   076E  120000            LCALL   ?ST_A_R567_DISP_L17
    364                  str[i++] = 'N';
    365                  break;
   \   0771  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0774  E0                MOVX    A,@DPTR
   \   0775  FC                MOV     R4,A
   \   0776  04                INC     A
   \   0777  F0                MOVX    @DPTR,A
   \   0778  8C82              MOV     DPL,R4
   \   077A  758300            MOV     DPH,#0
   \   077D  744E              MOV     A,#78
   \   077F  120000            LCALL   ?ST_A_R567_DISP_L17
   \   0782  02094A            LJMP    ?0033
   \   0785            ?0040:
    366              case 0x07 :
    367                  str[i++] = 'J';
   \   0785  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   0788  E0                MOVX    A,@DPTR
   \   0789  FF                MOV     R7,A
   \   078A  A3                INC     DPTR
   \   078B  E0                MOVX    A,@DPTR
   \   078C  FE                MOV     R6,A
   \   078D  A3                INC     DPTR
   \   078E  E0                MOVX    A,@DPTR
   \   078F  FD                MOV     R5,A
   \   0790  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0793  E0                MOVX    A,@DPTR
   \   0794  FC                MOV     R4,A
   \   0795  04                INC     A
   \   0796  F0                MOVX    @DPTR,A
   \   0797  8C82              MOV     DPL,R4
   \   0799  758300            MOV     DPH,#0
   \   079C  744A              MOV     A,#74
   \   079E  120000            LCALL   ?ST_A_R567_DISP_L17
    368                  str[i++] = 'U';
   \   07A1  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   07A4  E0                MOVX    A,@DPTR
   \   07A5  FC                MOV     R4,A
   \   07A6  04                INC     A
   \   07A7  F0                MOVX    @DPTR,A
   \   07A8  8C82              MOV     DPL,R4
   \   07AA  758300            MOV     DPH,#0
   \   07AD  7455              MOV     A,#85
   \   07AF  120000            LCALL   ?ST_A_R567_DISP_L17
    369                  str[i++] = 'L';
    370                  break;
   \   07B2  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   07B5  E0                MOVX    A,@DPTR
   \   07B6  FC                MOV     R4,A
   \   07B7  04                INC     A
   \   07B8  F0                MOVX    @DPTR,A
   \   07B9  8C82              MOV     DPL,R4
   \   07BB  758300            MOV     DPH,#0
   \   07BE  744C              MOV     A,#76
   \   07C0  120000            LCALL   ?ST_A_R567_DISP_L17
   \   07C3  02094A            LJMP    ?0033
   \   07C6            ?0041:
    371              case 0x08 :
    372                  str[i++] = 'A';
   \   07C6  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   07C9  E0                MOVX    A,@DPTR
   \   07CA  FF                MOV     R7,A
   \   07CB  A3                INC     DPTR
   \   07CC  E0                MOVX    A,@DPTR
   \   07CD  FE                MOV     R6,A
   \   07CE  A3                INC     DPTR
   \   07CF  E0                MOVX    A,@DPTR
   \   07D0  FD                MOV     R5,A
   \   07D1  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   07D4  E0                MOVX    A,@DPTR
   \   07D5  FC                MOV     R4,A
   \   07D6  04                INC     A
   \   07D7  F0                MOVX    @DPTR,A
   \   07D8  8C82              MOV     DPL,R4
   \   07DA  758300            MOV     DPH,#0
   \   07DD  7441              MOV     A,#65
   \   07DF  120000            LCALL   ?ST_A_R567_DISP_L17
    373                  str[i++] = 'U';
   \   07E2  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   07E5  E0                MOVX    A,@DPTR
   \   07E6  FC                MOV     R4,A
   \   07E7  04                INC     A
   \   07E8  F0                MOVX    @DPTR,A
   \   07E9  8C82              MOV     DPL,R4
   \   07EB  758300            MOV     DPH,#0
   \   07EE  7455              MOV     A,#85
   \   07F0  120000            LCALL   ?ST_A_R567_DISP_L17
    374                  str[i++] = 'G';
    375                  break;
   \   07F3  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   07F6  E0                MOVX    A,@DPTR
   \   07F7  FC                MOV     R4,A
   \   07F8  04                INC     A
   \   07F9  F0                MOVX    @DPTR,A
   \   07FA  8C82              MOV     DPL,R4
   \   07FC  758300            MOV     DPH,#0
   \   07FF  7447              MOV     A,#71
   \   0801  120000            LCALL   ?ST_A_R567_DISP_L17
   \   0804  02094A            LJMP    ?0033
   \   0807            ?0042:
    376              case 0x09 :
    377                  str[i++] = 'S';
   \   0807  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   080A  E0                MOVX    A,@DPTR
   \   080B  FF                MOV     R7,A
   \   080C  A3                INC     DPTR
   \   080D  E0                MOVX    A,@DPTR
   \   080E  FE                MOV     R6,A
   \   080F  A3                INC     DPTR
   \   0810  E0                MOVX    A,@DPTR
   \   0811  FD                MOV     R5,A
   \   0812  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0815  E0                MOVX    A,@DPTR
   \   0816  FC                MOV     R4,A
   \   0817  04                INC     A
   \   0818  F0                MOVX    @DPTR,A
   \   0819  8C82              MOV     DPL,R4
   \   081B  758300            MOV     DPH,#0
   \   081E  7453              MOV     A,#83
   \   0820  120000            LCALL   ?ST_A_R567_DISP_L17
    378                  str[i++] = 'E';
   \   0823  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0826  E0                MOVX    A,@DPTR
   \   0827  FC                MOV     R4,A
   \   0828  04                INC     A
   \   0829  F0                MOVX    @DPTR,A
   \   082A  8C82              MOV     DPL,R4
   \   082C  758300            MOV     DPH,#0
   \   082F  7445              MOV     A,#69
   \   0831  120000            LCALL   ?ST_A_R567_DISP_L17
    379                  str[i++] = 'P';
    380                  break;
   \   0834  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0837  E0                MOVX    A,@DPTR
   \   0838  FC                MOV     R4,A
   \   0839  04                INC     A
   \   083A  F0                MOVX    @DPTR,A
   \   083B  8C82              MOV     DPL,R4
   \   083D  758300            MOV     DPH,#0
   \   0840  7450              MOV     A,#80
   \   0842  120000            LCALL   ?ST_A_R567_DISP_L17
   \   0845  02094A            LJMP    ?0033
   \   0848            ?0043:
    381              case 0x10 :                     //Jodå, det skall vara 0x10
    382                  str[i++] = 'O';
   \   0848  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   084B  E0                MOVX    A,@DPTR
   \   084C  FF                MOV     R7,A
   \   084D  A3                INC     DPTR
   \   084E  E0                MOVX    A,@DPTR
   \   084F  FE                MOV     R6,A
   \   0850  A3                INC     DPTR
   \   0851  E0                MOVX    A,@DPTR
   \   0852  FD                MOV     R5,A
   \   0853  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0856  E0                MOVX    A,@DPTR
   \   0857  FC                MOV     R4,A
   \   0858  04                INC     A
   \   0859  F0                MOVX    @DPTR,A
   \   085A  8C82              MOV     DPL,R4
   \   085C  758300            MOV     DPH,#0
   \   085F  744F              MOV     A,#79
   \   0861  120000            LCALL   ?ST_A_R567_DISP_L17
    383                  str[i++] = 'K';
   \   0864  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0867  E0                MOVX    A,@DPTR
   \   0868  FC                MOV     R4,A
   \   0869  04                INC     A
   \   086A  F0                MOVX    @DPTR,A
   \   086B  8C82              MOV     DPL,R4
   \   086D  758300            MOV     DPH,#0
   \   0870  744B              MOV     A,#75
   \   0872  120000            LCALL   ?ST_A_R567_DISP_L17
    384                  str[i++] = 'T';
    385                  break;
   \   0875  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0878  E0                MOVX    A,@DPTR
   \   0879  FC                MOV     R4,A
   \   087A  04                INC     A
   \   087B  F0                MOVX    @DPTR,A
   \   087C  8C82              MOV     DPL,R4
   \   087E  758300            MOV     DPH,#0
   \   0881  7454              MOV     A,#84
   \   0883  120000            LCALL   ?ST_A_R567_DISP_L17
   \   0886  02094A            LJMP    ?0033
   \   0889            ?0044:
    386              case 0x11 :
    387                  str[i++] = 'N';
   \   0889  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   088C  E0                MOVX    A,@DPTR
   \   088D  FF                MOV     R7,A
   \   088E  A3                INC     DPTR
   \   088F  E0                MOVX    A,@DPTR
   \   0890  FE                MOV     R6,A
   \   0891  A3                INC     DPTR
   \   0892  E0                MOVX    A,@DPTR
   \   0893  FD                MOV     R5,A
   \   0894  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0897  E0                MOVX    A,@DPTR
   \   0898  FC                MOV     R4,A
   \   0899  04                INC     A
   \   089A  F0                MOVX    @DPTR,A
   \   089B  8C82              MOV     DPL,R4
   \   089D  758300            MOV     DPH,#0
   \   08A0  744E              MOV     A,#78
   \   08A2  120000            LCALL   ?ST_A_R567_DISP_L17
    388                  str[i++] = 'O';
   \   08A5  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   08A8  E0                MOVX    A,@DPTR
   \   08A9  FC                MOV     R4,A
   \   08AA  04                INC     A
   \   08AB  F0                MOVX    @DPTR,A
   \   08AC  8C82              MOV     DPL,R4
   \   08AE  758300            MOV     DPH,#0
   \   08B1  744F              MOV     A,#79
   \   08B3  120000            LCALL   ?ST_A_R567_DISP_L17
    389                  str[i++] = 'V';
    390                  break;
   \   08B6  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   08B9  E0                MOVX    A,@DPTR
   \   08BA  FC                MOV     R4,A
   \   08BB  04                INC     A
   \   08BC  F0                MOVX    @DPTR,A
   \   08BD  8C82              MOV     DPL,R4
   \   08BF  758300            MOV     DPH,#0
   \   08C2  7456              MOV     A,#86
   \   08C4  120000            LCALL   ?ST_A_R567_DISP_L17
   \   08C7  02094A            LJMP    ?0033
   \   08CA            ?0045:
    391              case 0x12 :
    392                  str[i++] = 'D';
   \   08CA  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   08CD  E0                MOVX    A,@DPTR
   \   08CE  FF                MOV     R7,A
   \   08CF  A3                INC     DPTR
   \   08D0  E0                MOVX    A,@DPTR
   \   08D1  FE                MOV     R6,A
   \   08D2  A3                INC     DPTR
   \   08D3  E0                MOVX    A,@DPTR
   \   08D4  FD                MOV     R5,A
   \   08D5  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   08D8  E0                MOVX    A,@DPTR
   \   08D9  FC                MOV     R4,A
   \   08DA  04                INC     A
   \   08DB  F0                MOVX    @DPTR,A
   \   08DC  8C82              MOV     DPL,R4
   \   08DE  758300            MOV     DPH,#0
   \   08E1  7444              MOV     A,#68
   \   08E3  120000            LCALL   ?ST_A_R567_DISP_L17
    393                  str[i++] = 'E';
   \   08E6  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   08E9  E0                MOVX    A,@DPTR
   \   08EA  FC                MOV     R4,A
   \   08EB  04                INC     A
   \   08EC  F0                MOVX    @DPTR,A
   \   08ED  8C82              MOV     DPL,R4
   \   08EF  758300            MOV     DPH,#0
   \   08F2  7445              MOV     A,#69
   \   08F4  120000            LCALL   ?ST_A_R567_DISP_L17
    394                  str[i++] = 'C';
    395                  break;
   \   08F7  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   08FA  E0                MOVX    A,@DPTR
   \   08FB  FC                MOV     R4,A
   \   08FC  04                INC     A
   \   08FD  F0                MOVX    @DPTR,A
   \   08FE  8C82              MOV     DPL,R4
   \   0900  758300            MOV     DPH,#0
   \   0903  7443              MOV     A,#67
   \   0905  120000            LCALL   ?ST_A_R567_DISP_L17
   \   0908  8040              SJMP    ?0033
   \   090A            ?0046:
    396              default:
    397                  str[i++] = '?';
   \   090A  900000            MOV     DPTR,#$LOCBX CreateDateString2+5
   \   090D  E0                MOVX    A,@DPTR
   \   090E  FF                MOV     R7,A
   \   090F  A3                INC     DPTR
   \   0910  E0                MOVX    A,@DPTR
   \   0911  FE                MOV     R6,A
   \   0912  A3                INC     DPTR
   \   0913  E0                MOVX    A,@DPTR
   \   0914  FD                MOV     R5,A
   \   0915  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0918  E0                MOVX    A,@DPTR
   \   0919  FC                MOV     R4,A
   \   091A  04                INC     A
   \   091B  F0                MOVX    @DPTR,A
   \   091C  8C82              MOV     DPL,R4
   \   091E  758300            MOV     DPH,#0
   \   0921  743F              MOV     A,#63
   \   0923  120000            LCALL   ?ST_A_R567_DISP_L17
    398                  str[i++] = '?';
   \   0926  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   0929  E0                MOVX    A,@DPTR
   \   092A  FC                MOV     R4,A
   \   092B  04                INC     A
   \   092C  F0                MOVX    @DPTR,A
   \   092D  8C82              MOV     DPL,R4
   \   092F  758300            MOV     DPH,#0
   \   0932  743F              MOV     A,#63
   \   0934  120000            LCALL   ?ST_A_R567_DISP_L17
    399                  str[i++] = '?';
    400                  break;
   \   0937  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   093A  E0                MOVX    A,@DPTR
   \   093B  FC                MOV     R4,A
   \   093C  04                INC     A
   \   093D  F0                MOVX    @DPTR,A
   \   093E  8C82              MOV     DPL,R4
   \   0940  758300            MOV     DPH,#0
   \   0943  743F              MOV     A,#63
   \   0945  120000            LCALL   ?ST_A_R567_DISP_L17
   \   0948  8000              SJMP    ?0033
   \   094A            ?0033:
    401              }         
    402          
    403              str[i++] = 0x00;
   \   094A  900000            MOV     DPTR,#$LOCBX CreateDateString2
   \   094D  E0                MOVX    A,@DPTR
   \   094E  FC                MOV     R4,A
   \   094F  04                INC     A
   \   0950  F0                MOVX    @DPTR,A
   \   0951  8C82              MOV     DPL,R4
   \   0953  758300            MOV     DPH,#0
   \   0956  E4                CLR     A
   \   0957  020000            LJMP    ?ST_A_R567_DISP_L17
    404          }        
    405          
    406          
    407          
    408              
    409           
   \   095A                    END


                                       S Y M B O L - T A B L E
                                       =======================


            #include file(s):

       [1]       c:\iar\ew\8051\inc\io517a.h
       [2]       c:\iar\ew\8051\inc\stdio.h
       [3]       c:\iar\ew\8051\inc\stdlib.h
       [4]       calender.h
       [5]       main.h
       [6]       filesystem.h
       [7]       rs232.h


            Symbol                     Type     Mem     Class   Defline   Refline(s)
            ------                     ----     ---     -----   -------   ----------

AC                                      bit             ---      166:1  
ACC                                     sfr             ---       14:1  
ADCON0                                  sfr             ---       99:1  
ADCON1                                  sfr             ---      100:1  
ADDATH                                  sfr             ---      101:1  
ADDATL                                  sfr             ---      102:1  
ADEX                                    bit             ---      133:1  
ADM                                     bit             ---      135:1  
ARCON                                   sfr             ---      105:1  
B                                       sfr             ---       15:1  
BD                                      bit             ---      131:1  
BSY                                     bit             ---      134:1  
CC4EN                                   sfr             ---       34:1  
CCEN                                    sfr             ---       33:1  
CCH1                                    sfr             ---       36:1  
CCH2                                    sfr             ---       38:1  
CCH3                                    sfr             ---       40:1  
CCH4                                    sfr             ---       42:1  
CCL1                                    sfr             ---       35:1  
CCL2                                    sfr             ---       37:1  
CCL3                                    sfr             ---       39:1  
CCL4                                    sfr             ---       41:1  
CLK                                     bit             ---      132:1  
CLRMSK                                  sfr             ---       74:1  
CMEN                                    sfr             ---       43:1  
CMH0                                    sfr             ---       45:1  
CMH1                                    sfr             ---       47:1  
CMH2                                    sfr             ---       49:1  
CMH3                                    sfr             ---       51:1  
CMH4                                    sfr             ---       53:1  
CMH5                                    sfr             ---       55:1  
CMH6                                    sfr             ---       57:1  
CMH7                                    sfr             ---       59:1  
CML0                                    sfr             ---       44:1  
CML1                                    sfr             ---       46:1  
CML2                                    sfr             ---       48:1  
CML3                                    sfr             ---       50:1  
CML4                                    sfr             ---       52:1  
CML5                                    sfr             ---       54:1  
CML6                                    sfr             ---       56:1  
CML7                                    sfr             ---       58:1  
CMSEL                                   sfr             ---       60:1  
COMCLRH                                 sfr             ---       72:1  
COMCLRL                                 sfr             ---       71:1  
COMSETH                                 sfr             ---       70:1  
COMSETL                                 sfr             ---       69:1  
CRCH                                    sfr             ---       62:1  
CRCL                                    sfr             ---       61:1  
CTCON                                   sfr             ---       63:1  
CTRELH                                  sfr             ---       65:1  
CTRELL                                  sfr             ---       64:1  
CY                                      bit             ---      165:1  
CalenderWait4                      function    code    public       65         82       84       89       91
                                                                               94      107      112      115
                                                                              120      122      124      131
                                                                              133      140      142      144
                                                                              153      155      161      163
                                                                              165      168      170      176
                                                                              178      180
CreateDateString                   function    code    public      300       73:4
CreateDateString2                  function    code    public      320       74:4
CreateTimeString                   function    code    public      262       72:4
DPH                                     sfr             ---       18:1  
DPL                                     sfr             ---       17:1  
DPSEL                                   sfr             ---       19:1  
EADC                                    bit             ---      205:1  
EAL                                     bit             ---      187:1  
ES0                                     bit             ---      190:1  
ET0                                     bit             ---      193:1  
ET1                                     bit             ---      191:1  
ET2                                     bit             ---      189:1  
EX0                                     bit             ---      194:1  
EX1                                     bit             ---      192:1  
EX2                                     bit             ---      204:1  
EX3                                     bit             ---      203:1  
EX4                                     bit             ---      202:1  
EX5                                     bit             ---      201:1  
EX6                                     bit             ---      200:1  
EXEN2                                   bit             ---      198:1  
EXF2                                    bit             ---      143:1  
F0                                      bit             ---      167:1  
F1                                      bit             ---      171:1  
GetDateNow                         function    code    public      200       71:4
GetTimeNow                         function    code    public      186       70:4
I2FR                                    bit             ---      156:1  
I3FR                                    bit             ---      155:1  
IADC                                    bit             ---      150:1  
IE0                                     bit             ---      182:1  
IE1                                     bit             ---      180:1  
IEN0                                    sfr             ---      114:1  
IEN1                                    sfr             ---      116:1  
IEN2                                    sfr             ---      118:1  
IEX2                                    bit             ---      149:1  
IEX3                                    bit             ---      148:1  
IEX4                                    bit             ---      147:1  
IEX5                                    bit             ---      146:1  
IEX6                                    bit             ---      145:1  
INT0                                    bit             ---      214:1  
INT1                                    bit             ---      213:1  
IP0                                     sfr             ---      115:1  
IP1                                     sfr             ---      117:1  
IRCON0                                  sfr             ---      119:1  
IRCON1                                  sfr             ---      120:1  
IT0                                     bit             ---      183:1  
IT1                                     bit             ---      181:1  
InitializeCalender                 function    code    public       58       65:4
MD0                                     sfr             ---      106:1  
MD1                                     sfr             ---      107:1  
MD2                                     sfr             ---      108:1  
MD3                                     sfr             ---      109:1  
MD4                                     sfr             ---      110:1  
MD5                                     sfr             ---      111:1  
MX0                                     bit             ---      138:1  
MX1                                     bit             ---      137:1  
MX2                                     bit             ---      136:1  
OV                                      bit             ---      170:1  
P                                       bit             ---      172:1  
P0                                      sfr             ---       77:1  
P1                                      sfr             ---       78:1  
P2                                      sfr             ---       79:1  
P3                                      sfr             ---       80:1         59       60       80       81
                                                                               83       88       90       92
                                                                               93      106      111      113
                                                                              114      119      121      123
                                                                              130      132      139      141
                                                                              143      152      154      160
                                                                              162      164      167      169
                                                                              175      177      179
P4                                      sfr             ---       81:1  
P5                                      sfr             ---       82:1  
P6                                      sfr             ---       83:1  
P7                                      sfr             ---       84:1  
P8                                      sfr             ---       85:1  
PCON                                    sfr             ---       88:1  
PSW                                     sfr             ---       20:1  
RB80                                    bit             ---      225:1  
RD                                      bit             ---      209:1  
REN0                                    bit             ---      223:1  
RI0                                     bit             ---      227:1  
ROCB                               function    code    public      100       67:4      173
RS0                                     bit             ---      169:1  
RS1                                     bit             ---      168:1  
RXD                                     bit             ---      216:1  
ReadCalenderByte                   function    code    public      151       69:4      189      192      195
                                                                              203      206      209      212
S0BUF                                   sfr             ---       90:1  
S0CON                                   sfr             ---       89:1  
S0RELH                                  sfr             ---       94:1  
S0RELL                                  sfr             ---       93:1  
S1BUF                                   sfr             ---       92:1  
S1CON                                   sfr             ---       91:1  
S1RELH                                  sfr             ---       96:1  
S1RELL                                  sfr             ---       95:1  
SETMSK                                  sfr             ---       73:1  
SM0                                     bit             ---      220:1  
SM1                                     bit             ---      221:1  
SM20                                    bit             ---      222:1  
SP                                      sfr             ---       16:1  
SWDT                                    bit             ---      199:1  
SYSCON                                  sfr             ---       22:1  
T0                                      bit             ---      212:1  
T1                                      bit             ---      211:1  
T2CM                                    bit             ---      159:1  
T2CON                                   sfr             ---       68:1  
T2I0                                    bit             ---      161:1  
T2I1                                    bit             ---      160:1  
T2PS                                    bit             ---      154:1  
T2R0                                    bit             ---      158:1  
T2R1                                    bit             ---      157:1  
TB80                                    bit             ---      224:1  
TCON                                    sfr             ---       25:1  
TF0                                     bit             ---      178:1  
TF1                                     bit             ---      176:1  
TF2                                     bit             ---      144:1  
TH0                                     sfr             ---       29:1  
TH1                                     sfr             ---       30:1  
TH2                                     sfr             ---       67:1  
TI0                                     bit             ---      226:1  
TL0                                     sfr             ---       27:1  
TL1                                     sfr             ---       28:1  
TL2                                     sfr             ---       66:1  
TMOD                                    sfr             ---       26:1  
TR0                                     bit             ---      179:1  
TR1                                     bit             ---      177:1  
TXD                                     bit             ---      215:1  
WDT                                     bit             ---      188:1  
WDTREL                                  sfr             ---      124:1  
WOCB                               function    code    public       75       66:4      135      136      137
                                                                              157      158      172
WR                                      bit             ---      210:1  
WriteCalenderByte                  function    code    public      129       68:4
XPAGE                                   sfr             ---       21:1  
div_t                                struct           typedef     38:3       96:3
ldiv_t                               struct           typedef     44:3      100:3


Errors: none
Warnings: none
Code size: 2394
Constant size: 0
Static variable size: Data(0) Idata(0) Bit(0) Xdata(0) Pdata(0) Bdata(0)

