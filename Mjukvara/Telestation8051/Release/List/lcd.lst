##############################################################################
#                                                                            #
# IAR 8051 C-Compiler V5.20A/386                                             #
# Front End V4.20N                                       19/Sep/104  17:59:48 #
# Global Optimizer V1.04E                                                    #
#                                                                            #
#       Target option =  8051                                                #
#       Memory model  =  large                                               #
#       Source file   =  lcd.c                                               #
#       List file     =  release\list\lcd.lst                                #
#       Object file   =  release\obj\lcd.r03                                 #
#       Command line  =  LCD.c -S -ml -v0 -e -K -u -s9 -RCODE -gA            #
#                        -IC:\IAR\EW\8051\inc\ -ORelease\Obj\                #
#                        -LRelease\List\ -q -i -t8 -x                        #
#                                                                            #
#                                             (c) Copyright IAR Systems 1996 #
##############################################################################

   \   0000                    NAME    lcd(18)
   \   0000                    RSEG    CODE(0)
   \   0000                    RSEG    CSTR(0)
   \   0000                    RSEG    X_UDATA(0)
   \   0000                    PUBLIC  ClearDisp
   \   0000                    $DEFFN  ClearDisp(0,0,4,0,32768,0,0,0),SetLCDReg,SetLCDReg,SetLCDReg
   \   0000                    PUBLIC  DispEraseQuest
   \   0000                    $DEFFN  DispEraseQuest(0,0,4,0,32768,0,0,0),SetLCDReg,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg,SetLCDReg,DispString,SetLCDReg,SetLCDReg,DispString,DisplayMenu
   \   0000                    PUBLIC  DispInfoBox
   \   0000                    $DEFFN  DispInfoBox(0,0,7,0,32768,0,6,0),SetLCDReg,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg
   \   0000                    PUBLIC  DispMemUsage
   \   0000                    $DEFFN  DispMemUsage(0,0,6,0,32768,0,0,0),SetLCDReg,SetLCDReg,MemUsage,
   \   0000                            SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg
   \   0000                    PUBLIC  DispMemoScreen
   \   0000                    $DEFFN  DispMemoScreen(0,0,4,0,32768,0,0,0),SetLCDReg,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg,SetLCDReg,DispString
   \   0000                    PUBLIC  DispOptionsMenu
   \   0000                    $DEFFN  DispOptionsMenu(0,0,9,0,32768,0,2,0),SetLCDReg,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg,SetLCDReg,DispString,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg,DispString,DispString,DispString,SetLCDReg,SetLCDReg,DispString,
   \   0000                            SetLCDReg,SetLCDReg,DispString,SetLCDReg,SetLCDReg,DispString,myInt2DecStr,
   \   0000                            DispString,DispString,SetLCDReg,SetLCDReg,DispString
   \   0000                    PUBLIC  DispSetTimeDate
   \   0000                    $DEFFN  DispSetTimeDate(0,0,54,0,32768,0,6,0),myInt2DecStr00,myInt2DecStr00,
   \   0000                            myInt2DecStr00,myInt2DecStr00,SetLCDReg,SetLCDReg,DispString
   \   0000                    PUBLIC  DispSetTimeDateHead
   \   0000                    $DEFFN  DispSetTimeDateHead(0,0,4,0,32768,0,0,0),SetLCDReg,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg,SetLCDReg,DispString
   \   0000                    PUBLIC  DispString
   \   0000                    $DEFFN  DispString(0,0,4,0,32768,0,3,0),SetLCDReg
   \   0000                    PUBLIC  DisplayMenu
   \   0000                    $DEFFN  DisplayMenu(0,0,6,0,32768,0,3,0),SetLCDReg,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg
   \   0000                    PUBLIC  FillDispBuffer
   \   0000                    $DEFFN  FillDispBuffer(0,0,82,0,32768,0,0,0),DispInfoBox,fopen,FindCall,
   \   0000                            GetCallInformation,SendStringEOLRS232,WriteClipToMem,WriteClipToMem,
   \   0000                            SendRS232,fclose
   \   0000                    EXTERN  FindCall
   \   0000                    $DEFFN  FindCall(32768,0,5,0)
   \   0000                    EXTERN  GetCallInformation
   \   0000                    $DEFFN  GetCallInformation(32768,0,12,0)
   \   0000                    PUBLIC  InitializeLCD
   \   0000                    $DEFFN  InitializeLCD(0,0,2,0,32768,0,0,0),SetLCDReg,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,ClearDisp
   \   0000                    PUBLIC  LogCursorAt
   \   0000                    $DEFFN  LogCursorAt(0,0,10,0,32768,0,3,0),FillDispBuffer,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,SetLCDReg,
   \   0000                            SetLCDReg,SetLCDReg
   \   0000                    EXTERN  MemUsage
   \   0000                    $DEFFN  MemUsage(32768,0,0,0)
   \   0000                    PUBLIC  OptionCursorAt
   \   0000                    $DEFFN  OptionCursorAt(0,0,2,0,32768,0,2,0),SetLCDReg,SetLCDReg,DispString,
   \   0000                            SetLCDReg,SetLCDReg,DispString
   \   0000                    EXTERN  SendRS232
   \   0000                    $DEFFN  SendRS232(32768,0,1,0)
   \   0000                    EXTERN  SendStringEOLRS232
   \   0000                    $DEFFN  SendStringEOLRS232(32768,0,3,0)
   \   0000                    PUBLIC  SetLCDReg
   \   0000                    $DEFFN  SetLCDReg(0,0,0,0,32768,0,2,0)
   \   0000                    PUBLIC  WriteClipToMem
   \   0000                    $DEFFN  WriteClipToMem(0,0,2,0,32768,0,8,0)
   \   0000                    PUBLIC  cursorPos
   \   0000                    PUBLIC  dispBuffEnd
   \   0000                    PUBLIC  dispBuffStart
   \   0000                    PUBLIC  dispBuffer
   \   0000                    PUBLIC  dispStart
   \   0000                    EXTERN  fclose
   \   0000                    $DEFFN  fclose(32768,0,3,0)
   \   0000                    EXTERN  fopen
   \   0000                    $DEFFN  fopen(32768,0,6,0)
   \   0000                    EXTERN  lastPlayed
   \   0000                    EXTERN  myInt2DecStr
   \   0000                    $DEFFN  myInt2DecStr(32768,0,5,0)
   \   0000                    EXTERN  myInt2DecStr00
   \   0000                    $DEFFN  myInt2DecStr00(32768,0,4,0)
   \   0000                    EXTERN  numOfCalls
   \   0000                    PUBLIC  optionCursorPos
   \   0000                    EXTERN  speakerVolume
   \   0000                    PUBLIC  theScreen
   \   0000                    PUBLIC  xPos
   \   0000                    PUBLIC  yPos
   \   0000                    EXTERN  ?BYTE_COPY_L08
   \   0000                    EXTERN  ?ST_A_R567_L17
   \   0000                    EXTERN  ?LD_A_R567_DISP_L17
   \   0000                    EXTERN  ?CL8051L_5_20_L17
   \   0000                    RSEG    CODE
      1          /*************************************************************
      2          Fil:            $Id: LCD.c,v 1.5 2003/11/23 20:29:33 Gemensam Exp $
      3          
      4          Beskrivning:    Funktioner för att skriva på skärmen
      5          
      6          Skapad:         00-03-30
      7          
      8          Ändrad:         $Date: 2003/11/23 20:29:33 $
      9          
     10          Ägare:          Fredrik Hoffman
     11          
     12          
     13          Att göra:
     14          
     15          
     16          Revisionshistoria:
     17                                          $Log: LCD.c,v $
     18                                          Revision 1.5  2003/11/23 20:29:33  Gemensam
     19                                          Complete and tested volume setting in options menu.
     20                                          Ver 0201
     21                                          
     22                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     23                                          Various declarations changes.
     24                                          Still version 0200.
     25                                          
     26                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     27                                          Added menu option of setting speaker volume (untested)
     28                                          Completely changed header files
     29                                          Version 0200.
     30                                          
     31                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     32                                          Added header information
     33                                          
     34          
     35          *************************************************************/
     36                                  
     37          //////////////////////
     38          // Inkluderingar
     39          
     40          #include <io517a.h>
      1          /*                     - IO517A.H -
      2          
      3             Special header for the Siemens SAB 80C517A/83C517A-5 processors.
      4          
      5             Version 5.20 [IMAF]
      6          
      7          */
      8          
      9          #pragma language=extended
     10          
     11          /* Pre-defined SFR byte addresses: */
     12          
     13          /* CPU */
     14          sfr     ACC    = 0xE0;
     15          sfr     B      = 0xF0;
     16          sfr     SP     = 0x81;
     17          sfr     DPL    = 0x82;
     18          sfr     DPH    = 0x83;
     19          sfr     DPSEL  = 0x92;
     20          sfr     PSW    = 0xD0;
     21          sfr     XPAGE  = 0x91;
     22          sfr     SYSCON = 0xB1;
     23          
     24          /* Timer 0/Timer 1 */
     25          sfr     TCON   = 0x88;
     26          sfr     TMOD   = 0x89;
     27          sfr     TL0    = 0x8A;
     28          sfr     TL1    = 0x8B;
     29          sfr     TH0    = 0x8C;
     30          sfr     TH1    = 0x8D;
     31          
     32          /* CCU */
     33          sfr     CCEN   = 0xC1;
     34          sfr     CC4EN  = 0xC9;
     35          sfr     CCL1   = 0xC2;
     36          sfr     CCH1   = 0xC3;
     37          sfr     CCL2   = 0xC4;
     38          sfr     CCH2   = 0xC5;
     39          sfr     CCL3   = 0xC6;
     40          sfr     CCH3   = 0xC7;
     41          sfr     CCL4   = 0xCE;
     42          sfr     CCH4   = 0xCF;
     43          sfr     CMEN   = 0xF6;
     44          sfr     CML0   = 0xD2;
     45          sfr     CMH0   = 0xD3;
     46          sfr     CML1   = 0xD4;
     47          sfr     CMH1   = 0xD5;
     48          sfr     CML2   = 0xD6;
     49          sfr     CMH2   = 0xD7;
     50          sfr     CML3   = 0xE2;
     51          sfr     CMH3   = 0xE3;
     52          sfr     CML4   = 0xE4;
     53          sfr     CMH4   = 0xE5;
     54          sfr     CML5   = 0xE6;
     55          sfr     CMH5   = 0xE7;
     56          sfr     CML6   = 0xF2;
     57          sfr     CMH6   = 0xF3;
     58          sfr     CML7   = 0xF4;
     59          sfr     CMH7   = 0xF5;
     60          sfr     CMSEL  = 0xF7;
     61          sfr     CRCL   = 0xCA;
     62          sfr     CRCH   = 0xCB;
     63          sfr     CTCON  = 0xE1;
     64          sfr     CTRELL = 0xDE;
     65          sfr     CTRELH = 0xDF;
     66          sfr     TL2    = 0xCC;
     67          sfr     TH2    = 0xCD;
     68          sfr     T2CON  = 0xC8;
     69          sfr     COMSETL= 0xA1;
     70          sfr     COMSETH= 0xA2;
     71          sfr     COMCLRL= 0xA3;
     72          sfr     COMCLRH= 0xA4;
     73          sfr     SETMSK = 0xA5;
     74          sfr     CLRMSK = 0xA6;
     75          
     76          /* Ports */
     77          sfr     P0     = 0x80;
     78          sfr     P1     = 0x90;
     79          sfr     P2     = 0xA0;
     80          sfr     P3     = 0xB0;
     81          sfr     P4     = 0xE8;
     82          sfr     P5     = 0xF8;
     83          sfr     P6     = 0xFA;
     84          sfr     P7     = 0xDB;        /* Analog/Digital Input */
     85          sfr     P8     = 0xDD;        /* Analog/Digital Input, 4 Bit */
     86          
     87          /* Serial Channels */
     88          sfr     PCON   = 0x87;
     89          sfr     S0CON  = 0x98;
     90          sfr     S0BUF  = 0x99;
     91          sfr     S1CON  = 0x9B;
     92          sfr     S1BUF  = 0x9C;
     93          sfr     S0RELL = 0xAA;
     94          sfr     S0RELH = 0xBA;
     95          sfr     S1RELL = 0x9D;
     96          sfr     S1RELH = 0xBB;
     97          
     98          /* A/D Converter */
     99          sfr     ADCON0 = 0xD8;
    100          sfr     ADCON1 = 0xDC;
    101          sfr     ADDATH = 0xD9;
    102          sfr     ADDATL = 0xDA;
    103          
    104          /* MUL/DIV Unit */
    105          sfr     ARCON  = 0xEF;
    106          sfr     MD0    = 0xE9;
    107          sfr     MD1    = 0xEA;
    108          sfr     MD2    = 0xEB;
    109          sfr     MD3    = 0xEC;
    110          sfr     MD4    = 0xED;
    111          sfr     MD5    = 0xEE;
    112          
    113          /* Interrupt System */
    114          sfr     IEN0   = 0xA8;
    115          sfr     IP0    = 0xA9;
    116          sfr     IEN1   = 0xB8;
    117          sfr     IP1    = 0xB9;
    118          sfr     IEN2   = 0x9A;
    119          sfr     IRCON0 = 0xC0;
    120          sfr     IRCON1 = 0xD1;
    121          
    122          
    123          /* Watchdog */
    124          sfr     WDTREL = 0x86;
    125          
    126          
    127          /* Pre-defined SFR bit addresses */
    128          
    129          /*========ADCON0=======*/
    130          
    131          bit     BD     = 0xDF;
    132          bit     CLK    = 0xDE;
    133          bit     ADEX   = 0xDD;
    134          bit     BSY    = 0xDC;
    135          bit     ADM    = 0xDB;
    136          bit     MX2    = 0xDA;
    137          bit     MX1    = 0xD9;
    138          bit     MX0    = 0xD8;
    139          
    140          
    141          /*========IRCON0=======*/
    142          
    143          bit     EXF2   = 0xC7;
    144          bit     TF2    = 0xC6;
    145          bit     IEX6   = 0xC5;
    146          bit     IEX5   = 0xC4;
    147          bit     IEX4   = 0xC3;
    148          bit     IEX3   = 0xC2;
    149          bit     IEX2   = 0xC1;
    150          bit     IADC   = 0xC0;
    151          
    152          /*========T2CON=======*/
    153          
    154          bit     T2PS   = 0xCF;
    155          bit     I3FR   = 0xCE;
    156          bit     I2FR   = 0xCD;
    157          bit     T2R1   = 0xCC;
    158          bit     T2R0   = 0xCB;
    159          bit     T2CM   = 0xCA;
    160          bit     T2I1   = 0xC9;
    161          bit     T2I0   = 0xC8;
    162          
    163          /*========PSW=========*/
    164          
    165          bit     CY     = 0xD7;
    166          bit     AC     = 0xD6;
    167          bit     F0     = 0xD5;
    168          bit     RS1    = 0xD4;
    169          bit     RS0    = 0xD3;
    170          bit     OV     = 0xD2;
    171          bit     F1     = 0xD1;
    172          bit     P      = 0xD0;
    173          
    174          /*========TCON========*/
    175          
    176          bit     TF1    = 0x8F;
    177          bit     TR1    = 0x8E;
    178          bit     TF0    = 0x8D;
    179          bit     TR0    = 0x8C;
    180          bit     IE1    = 0x8B;
    181          bit     IT1    = 0x8A;
    182          bit     IE0    = 0x89;
    183          bit     IT0    = 0x88;
    184          
    185          /*========IEN0========*/
    186          
    187          bit     EAL    = 0xAF;
    188          bit     WDT    = 0xAE;
    189          bit     ET2    = 0xAD;
    190          bit     ES0    = 0xAC;
    191          bit     ET1    = 0xAB;
    192          bit     EX1    = 0xAA;
    193          bit     ET0    = 0xA9;
    194          bit     EX0    = 0xA8;
    195          
    196          /*========IEN1========*/
    197          
    198          bit     EXEN2  = 0xBF;
    199          bit     SWDT   = 0xBE;
    200          bit     EX6    = 0xBD;
    201          bit     EX5    = 0xBC;
    202          bit     EX4    = 0xBB;
    203          bit     EX3    = 0xBA;
    204          bit     EX2    = 0xB9;
    205          bit     EADC   = 0xB8;
    206          
    207          /*========P3=========*/
    208          
    209          bit     RD     = 0xB7;
    210          bit     WR     = 0xB6;
    211          bit     T1     = 0xB5;
    212          bit     T0     = 0xB4;
    213          bit     INT1   = 0xB3;
    214          bit     INT0   = 0xB2;
    215          bit     TXD    = 0xB1;
    216          bit     RXD    = 0xB0;
    217          
    218          /*========S0CON========*/
    219          
    220          bit     SM0    = 0x9F;
    221          bit     SM1    = 0x9E;
    222          bit     SM20   = 0x9D;
    223          bit     REN0   = 0x9C;
    224          bit     TB80   = 0x9B;
    225          bit     RB80   = 0x9A;
    226          bit     TI0    = 0x99;
    227          bit     RI0    = 0x98;
    228          
    229          
    230          /* Interrupt Vector Definitions */
    231          
    232          interrupt [0x03] void EX0_int (void);     /* External Interrupt 0 */
    233          
    234          interrupt [0x0B] void T0_int (void);      /* Timer 0 Overflow */
    235          
    236          interrupt [0x13] void EX1_int (void);     /* External Interrupt 1 */
    237          
    238          interrupt [0x1B] void T1_int (void);      /* Timer 1 Overflow */
    239          
    240          interrupt [0x23] void SCON0_int (void);   /* Serial Port 0 */
    241          
    242          interrupt [0x2B] void T2_int (void);      /* Timer 2 Overflow */
    243          
    244          interrupt [0x2B] void T2EX_int (void);    /* Negative Transition on T2EX */
    245          
    246          interrupt [0x43] void ADC_int (void);     /* ADC Interrupt */
    247          
    248          interrupt [0x4B] void EX2_int (void);     /* External Interrupt 2 */
    249          
    250          interrupt [0x53] void EX3_int (void);     /* External Interrupt 3 */
    251          
    252          interrupt [0x5B] void EX4_int (void);     /* External Interrupt 4 */
    253          
    254          interrupt [0x63] void EX5_int (void);     /* External Interrupt 5 */
    255          
    256          interrupt [0x6B] void EX6_int (void);     /* External Interrupt 6 */
    257          
    258          interrupt [0x83] void SCON1_int (void);   /* Serial Port 1 */
    259          
    260          interrupt [0x93] void ICMP_int (void);    /* Compare match interrupt */
    261          
    262          interrupt [0x9B] void CT_int (void);      /* Compare Timer Overflow */
    263          
    264          interrupt [0xA3] void ICS_int (void);     /* COMSET interrupt */
    265          
    266          interrupt [0xAB] void ICR_int (void);     /* COMCLR interrupt */
    267          
    268          
     41          #include <stdio.h>
      1          /*                      - STDIO.H -
      2          
      3             Subset of ANSI standard I/O function declarations.
      4          
      5             Version: 3.30 04/Nov/94 IHAW
      6          
      7          
      8          */
      9          
     10          #ifndef _STDIO_INCLUDED
     11          #define _STDIO_INCLUDED
     12          
     13          #ifndef NULL
     14          #define NULL    (void *) 0
     15          #endif
     16          
     17          #ifndef EOF
     18          #define EOF     (-1)
     19          #endif
     20          
     21          #ifndef size_t
     22          #if     sizeof((char*)0 - (char*)0) <= sizeof(int)
     23          #define size_t  unsigned int
     24          #else
     25          #define size_t  unsigned long 
     26          #endif
     27          #endif
     28          
     29          /* ===
     30          
     31          #if __TID__ & 0x8000
     32          #pragma function=intrinsic(0)
     33          #endif
     34          
     35          === */
     36          
     37          #ifndef MEMORY_ATTRIBUTE
     38          #define MEMORY_ATTRIBUTE
     39          #endif
     40          
     41          MEMORY_ATTRIBUTE int    puts(const char *__s);
     42          MEMORY_ATTRIBUTE int    putchar(int __value);
     43          MEMORY_ATTRIBUTE int    getchar(void);
     44          MEMORY_ATTRIBUTE int    sprintf(char *__s,const char *__format,...);
     45          MEMORY_ATTRIBUTE int    printf(const char *__format,...);
     46          MEMORY_ATTRIBUTE int    scanf(const char *__format,...);
     47          MEMORY_ATTRIBUTE int    sscanf(const char *__s, const char *__format,...);
     48          MEMORY_ATTRIBUTE char   *gets(char *__s);
     49          
     50          #if __TID__ & 0x8000
     51          #pragma function=default
     52          #endif
     53          
     54          #endif
     55          
     56          
     57          
     42          #include <stdlib.h>
      1          /*                      - STDLIB.H -
      2          
      3             The ANSI-defined 'standard' functions.
      4          
      5             Version: 3.30 04/Nov/94 IHAW
      6          
      7          $Name: V3_33B $
      8          $Log: stdlib.h $
      9          Revision 1.3  1996/06/07 07:11:26  matsp
     10          
     11          Revision 1.2  1996/01/26 16:13:20  matsp
     12          A lot. Converted to Source Integrity
     13          Revision 1.2  1996/01/26 17:13:18  MATSP
     14          Revision 1.4  1996/01/26 16:07:29  MATSP
     15          Revision 1.3  1995/12/04 09:04:11  MATSP
     16          RAND_MAX changed from 32768 to 32767.
     17          */
     18          
     19          #ifndef _STDLIB_INCLUDED
     20          #define _STDLIB_INCLUDED
     21          
     22          #ifndef size_t
     23          #if sizeof((char *)0 - (char *)0) <= sizeof(int)
     24          #define size_t          unsigned int
     25          #else
     26          #define size_t          unsigned long
     27          #endif
     28          #endif
     29          
     30          #ifndef NULL
     31          #define NULL    (void*) 0 
     32          #endif
     33          
     34          typedef struct
     35                  {
     36                    int   quot;
     37                    int   rem;
     38                  } div_t;
     39          
     40          typedef struct
     41                  {
     42                    long int      quot;
     43                    long int      rem;
     44                  } ldiv_t;
     45          
     46          
     47          #define RAND_MAX        32767
     48          
     49          #define EXIT_SUCCESS    0
     50          #define EXIT_FAILURE    1
     51          
     52          #define MB_CUR_MAX      1
     53          
     54          #if __TID__ & 0x8000
     55          #pragma function=intrinsic(0)
     56          #endif
     57          
     58          #ifndef MEMORY_ATTRIBUTE
     59          #define MEMORY_ATTRIBUTE
     60          #endif
     61          
     62          #ifndef PTR_ATTRIBUTE
     63          #define PTR_ATTRIBUTE
     64          #endif
     65          
     66          MEMORY_ATTRIBUTE void   *malloc(size_t __size);
     67          
     68          MEMORY_ATTRIBUTE void   free(void *__ptr);
     69          
     70          MEMORY_ATTRIBUTE void   exit(int __status);
     71          
     72          MEMORY_ATTRIBUTE void   *calloc(unsigned int __nelem, size_t __elsize);
     73          
     74          MEMORY_ATTRIBUTE void   *realloc(void *__ptr, size_t __size);
     75          
     76          MEMORY_ATTRIBUTE int atoi (const char *__nptr);
     77          
     78          MEMORY_ATTRIBUTE long atol (const char *__nptr);
     79          
     80          MEMORY_ATTRIBUTE double atof (const char *__nptr);
     81          
     82          MEMORY_ATTRIBUTE double strtod(const char *__nptr, char **__endptr);
     83          
     84          MEMORY_ATTRIBUTE long int strtol(const char *__nptr, char **__endptr, int __base);
     85          
     86          MEMORY_ATTRIBUTE unsigned long int strtoul(const char *__nptr, char **__endptr, int __base);
     87          
     88          MEMORY_ATTRIBUTE int rand(void);
     89          
     90          MEMORY_ATTRIBUTE void srand(unsigned int __seed);
     91          
     92          MEMORY_ATTRIBUTE void abort(void);
     93          
     94          MEMORY_ATTRIBUTE int abs(int __j);
     95          
     96          MEMORY_ATTRIBUTE div_t div(int __numer, int __denom);
     97          
     98          MEMORY_ATTRIBUTE long int labs(long int __j);
     99          
    100          MEMORY_ATTRIBUTE ldiv_t ldiv(long int __numer, long int __denom);
    101          
    102          MEMORY_ATTRIBUTE void *bsearch(const void *__key, const void *__base,
    103                                  size_t __nmemb, size_t __size,
    104                                  int (*__compar) (const void *, const void *));
    105          
    106          MEMORY_ATTRIBUTE void qsort(void *__base, size_t __nmemb, size_t __size,
    107                                  int (*__compar) (const void *, const void *));
    108          
    109          #if __TID__ & 0x8000
    110          #pragma function=default
    111          #endif
    112          
    113          #endif
    114          
     43          #include <string.h>
      1          /*                       - STRING.H -
      2          
      3             The ANSI 'string' function declarations.
      4                     
      5             Version: 3.30 04/Nov/94 IHAW
      6                             
      7          */
      8          
      9          #ifndef _STRING_INCLUDED
     10          #define _STRING_INCLUDED
     11          
     12          #ifndef NULL
     13          #define NULL    (void*)0     /* changed from char* 93.01.21 ICLM */
     14          #endif
     15          
     16          #ifndef size_t
     17          #if sizeof((char *)0 - (char *)0) <= sizeof(int)
     18          #define size_t          unsigned int
     19          #else
     20          #define size_t          unsigned long
     21          #endif
     22          #endif
     23          
     24          #if __TID__ & 0x8000
     25          #pragma function=intrinsic(0)
     26          #endif
     27          
     28          #ifndef MEMORY_ATTRIBUTE
     29          #define MEMORY_ATTRIBUTE
     30          #endif
     31          
     32          MEMORY_ATTRIBUTE void *memcpy(void *s1, const void *s2, size_t n);
     33          
     34          MEMORY_ATTRIBUTE void *memmove(void *s1, const void *s2, size_t n);
     35          
     36          MEMORY_ATTRIBUTE void *memchr(const void *s, int c, size_t n);
     37          
     38          MEMORY_ATTRIBUTE void *memset(void *s, int c, size_t n);
     39          
     40          MEMORY_ATTRIBUTE int memcmp(const void *s1, const void *s2, size_t n);
     41          
     42          MEMORY_ATTRIBUTE char *strchr(const char *s, int c);
     43          
     44          MEMORY_ATTRIBUTE int strcmp(const char *s1, const char *s2);
     45          
     46          MEMORY_ATTRIBUTE int strncmp(const char *s1, const char *s2, size_t n);
     47          
     48          MEMORY_ATTRIBUTE int strcoll(const char *s1, const char *s2);
     49          
     50          MEMORY_ATTRIBUTE size_t strlen(const char *s);
     51          
     52          MEMORY_ATTRIBUTE size_t strcspn(const char *s1, const char *s2);
     53          
     54          MEMORY_ATTRIBUTE size_t strspn(const char *s1, const char *s2);
     55          
     56          MEMORY_ATTRIBUTE char *strpbrk(const char *s1, const char *s2);
     57          
     58          MEMORY_ATTRIBUTE char *strrchr(const char *s, int c);
     59          
     60          MEMORY_ATTRIBUTE char *strstr(const char *s1, const char *s2);
     61          
     62          MEMORY_ATTRIBUTE char *strcat(char *s1, const char *s2);
     63          
     64          MEMORY_ATTRIBUTE char *strncat(char *s1, const char *s2, size_t n);
     65          
     66          MEMORY_ATTRIBUTE char *strcpy(char *s1, const char *s2);
     67          
     68          MEMORY_ATTRIBUTE char *strncpy(char *s1, const char *s2, size_t n);
     69          
     70          MEMORY_ATTRIBUTE char *strerror(int errnum);
     71          
     72          MEMORY_ATTRIBUTE char *strtok(char *s1, const char *s2);
     73          
     74          MEMORY_ATTRIBUTE size_t strxfrm(char *s1, const char *s2, size_t n);
     75          
     76          #if __TID__ & 0x8000
     77          #pragma function=default
     78          #endif
     79          
     80          #endif
     81          
     82          
     44          #include "LCD.h"
      1          /********************************************************
      2          Fil:            $Id: LCD.h,v 1.4 2003/11/23 21:40:03 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/23 21:40:03 $
      5          
      6          Revisionshistoria:
      7                                          $Log: LCD.h,v $
      8                                          Revision 1.4  2003/11/23 21:40:03  Gemensam
      9                                          Parallell phone detection included.
     10                                          Removed obsolete #define's regarding LCD interface.
     11                                          Ver 0300
     12                                          
     13                                          Revision 1.3  2003/11/23 20:29:34  Gemensam
     14                                          Complete and tested volume setting in options menu.
     15                                          Ver 0201
     16                                          
     17                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
     18                                          Various declarations changes.
     19                                          Still version 0200.
     20                                          
     21                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     22                                          Added menu option of setting speaker volume (untested)
     23                                          Completely changed header files
     24                                          Version 0200.
     25                                          
     26                                          
     27          
     28          ********************************************************/
     29          
     30          #ifndef _LCD_INCLUDED_
     31          #define _LCD_INCLUDED_
     32          
     33          ///////////////////////////////////
     34          // Definitioner
     35          
     36          #define LCD_DATA      (*(unsigned char xdata *) 0x8000)
     37          #define LCD_INSTR     (*(unsigned char xdata *) 0x8001)
     38          #define LCD_BUSY      (*(unsigned char xdata *) 0x8001)
     39          
     40          #define DISPBUFFERSIZE  50
     41          // DISPBUFFERSIZE är antalet samtal i dispBuffer (samtalsindexerat)
     42          #define DISPCALLSIZE  40
     43          // DISPCALLSIZE är antalet byte per samtalsrad
     44           
     45          #define LCD_CHAR_PER_ROW        42
     46          
     47          #define MENU_LEFT_COLUMN        4
     48          
     49          #define MENU_ITEM_SPKR_VOL      0
     50          #define MENU_ITEM_ANS_ONOFF     1
     51          #define MENU_ITEM_MEMO          2
     52          #define MENU_ITEM_TIMEDATE      3
     53          #define MENU_ITEM_NUMSIG        4
     54          #define MENU_ITEM_ERASE         5
     55          #define MENU_NUM_OF_ITEMS       6
     56          
     57          
     58          ///////////////////////////////////
     59          // Strukturer
     60          
     61          
     62          ///////////////////////////////////
     63          // Funktioner och procedurer
     64          
     65          extern void    InitializeLCD( void );
     66          extern void    ClearDisp( void );
     67          extern void    DispString(char* str);
     68          extern void    SetLCDReg(char regNr, char d);
     69          extern void    LogCursorAt(int newCursorPos, char updateAlways);
     70          extern void    FillDispBuffer(void);
     71          extern void    DispInfoBox(char* str1, char* str2);
     72          extern void    DisplayMenu(char* menuStr);
     73          extern void    DispMemUsage( void );
     74          extern void    OptionCursorAt(int  newCursorPos);
     75          extern void    DispOptionsMenu(char answerOn, char numSignals);
     76          extern void    DispSetTimeDate(char cursor, char year, char month, char day, char hour, char minute);
     77          extern void    DispSetTimeDateHead( void );
     78          extern void    DispEraseQuest( void );
     79          extern void    DispMemoScreen( void );
     80          
     81          #endif
     45          #include "calender.h"
      1          /********************************************************
      2          Fil:            $Id: Calender.h,v 1.4 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:52 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Calender.h,v $
      8                                          Revision 1.4  2003/11/20 22:08:52  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.3  2003/11/18 19:17:35  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     18                                          Added header information
     19                                          
     20          
     21          ********************************************************/
     22          
     23          #ifndef _CALENDER_INCLUDED_
     24          #define _CALENDER_INCLUDED_
     25          
     26          ///////////////////////////////////
     27          // Definitioner
     28          
     29          // Non-volatile variabler:
     30          #define NV_ANSWERING_ON 0x08
     31          #define NV_NUM_SIGNALS  0x09
     32          #define NV_PLAYED_MS    0x0A
     33          #define NV_PLAYED_LS    0x0B
     34          #define NV_SPEAKER_VOL  0x0C
     35          //Max adress är 0x3F
     36          
     37          #define SDA    P3.0
     38          #define SCL    P3.1
     39          //#define SDA    P1.5
     40          //#define SCL    P1.6
     41          
     42          
     43          ///////////////////////////////////
     44          // Strukturer
     45          
     46          struct ST_TIME {
     47              char    seconds;
     48              char    minutes;
     49              char    hours;
     50          };
     51          #define TIME struct ST_TIME
     52          
     53          
     54          struct ST_DATE {
     55              char    day;
     56              char    date;
     57              char    month;
     58              char    year;
     59          };
     60          #define DATE struct ST_DATE
     61          
     62          ///////////////////////////////////
     63          // Funktioner och procedurer
     64          
     65          extern void    InitializeCalender( void );
     66          extern char    WOCB(char dat);
     67          extern char    ROCB(char ack);
     68          extern char    WriteCalenderByte(char address, char dat);
     69          extern char    ReadCalenderByte(char address, char* dat);
     70          extern void    GetTimeNow(TIME* tptr);
     71          extern void    GetDateNow(DATE* tptr);
     72          extern void    CreateTimeString(TIME* tptr, char* str);
     73          extern void    CreateDateString(DATE* tptr, char* str);
     74          extern void    CreateDateString2(DATE* tptr, char* str);
     75           
     76          
     77          ///////////////////////////
     78          // Variabler
     79          
     80          
     81          
     82          
     83           
     84          #endif
     46          #include "main.h"
      1          /*************************************************************
      2          Fil:            $Id: Main.h,v 1.10 2003/12/26 16:17:01 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/12/26 16:17:01 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Main.h,v $
      8                                          Revision 1.10  2003/12/26 16:17:01  Gemensam
      9                                          Reinstate 500 ms wait for hang up detection to settle (if not PPD is used).
     10                                          Fixed PPD detection by decreasing phone volume from 63 to 15.
     11                                          Version 0304.
     12                                          
     13                                          Revision 1.9  2003/12/09 20:52:49  Gemensam
     14                                          Commented out PPD detection since the HW not work yet.
     15                                          Ver 0302.
     16                                          
     17                                          Revision 1.8  2003/11/29 22:35:59  Gemensam
     18                                          Fixed problem with to short pulse width on PPD.
     19                                          Ver 0302.
     20                                          
     21                                          Revision 1.7  2003/11/24 22:44:36  Gemensam
     22                                          Fixed PPD, not working yet,
     23                                          New command: speaker volume.
     24                                          Version 0301.
     25                                          
     26                                          Revision 1.6  2003/11/23 21:40:03  Gemensam
     27                                          Parallell phone detection included.
     28                                          Removed obsolete #define's regarding LCD interface.
     29                                          Ver 0300
     30                                          
     31                                          Revision 1.5  2003/11/23 20:29:34  Gemensam
     32                                          Complete and tested volume setting in options menu.
     33                                          Ver 0201
     34                                          
     35                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     36                                          Various declarations changes.
     37                                          Still version 0200.
     38                                          
     39                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     40                                          Added menu option of setting speaker volume (untested)
     41                                          Completely changed header files
     42                                          Version 0200.
     43                                          
     44                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     45                                          Added header information
     46                                          
     47          *************************************************************/
     48          
     49          #ifndef _MAIN_INCLUDED_
     50          #define _MAIN_INCLUDED_
     51          
     52          #include "FileSystem.h"
      1          /**************************************************************************************
      2          Fil:            $Id: FileSystem.h,v 1.4 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Kommentarer:    Filhuvudet befinner sig i "Spare" arean tillhörande filens första sida. Huvudet består 
      7                                          av 16 bytes enligt följande lista:
      8                                          0       Huvud       0xAA = Legalt filhuvud, annat tillsvidare odefinierat
      9                                          1-4     Fillängd    Pos 1 = MSB, pos 4 = LSB
     10                                          5-12    Filtitel    Enl "Titel.ext". Om titeln är mindre än 8 tecken avslutas det med nollor
     11                                          13-15   Filext      Enl "Titel.ext". Om ext är mindre än 3 tecken avslutas det med nollor
     12          
     13                                          En nolla skriven i fileName[0] indikerar att
     14                                          filstrukturen är ledig.
     15                  
     16          Revisionshistoria:
     17                                          $Log: FileSystem.h,v $
     18                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     19                                          Various declarations changes.
     20                                          Still version 0200.
     21                                          
     22                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     23                                          Added menu option of setting speaker volume (untested)
     24                                          Completely changed header files
     25                                          Version 0200.
     26                                          
     27                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     28                                          Added header information
     29                                          
     30          
     31          **************************************************************************************/
     32          
     33          #ifndef _FILESYSTEM_INCLUDED_
     34          #define _FILESYSTEM_INCLUDED_
     35          
     36          ///////////////////////////////////
     37          // Definitioner
     38          
     39          #define FS_MAXFILES         8 
     40          #define FS_FILENAMELENGTH   13
     41          #define FS_FLASHSIZE        0x800000
     42          
     43          #define OFF            0
     44          #define READY        1
     45          #define NEMPTY        2
     46          #define WRITING        3
     47          #define OCCUPIED    4
     48          
     49          #define CLE     P4.0                                //Command Latch Enable
     50          #define ALE     P4.1                                //Address Latch Enable
     51          #define WP      P4.2                                //Write Protect
     52          #define SE      P4.3                                //Spare Enable
     53          //#define CE      P4.4                                //Chip Enable
     54          #define FBUSY   P4.5                                //Busy
     55          
     56          #define FREG (*(unsigned char xdata *) 0xE000)
     57          #define FLASH (*(unsigned char xdata *) 0xB000) 
     58          
     59          ///////////////////////////////////
     60          // Strukturer
     61          
     62          struct ST_FILE_HEAD {
     63              unsigned long   length;
     64              char            name[FS_FILENAMELENGTH];
     65          };
     66          #define FILE_HEAD struct ST_FILE_HEAD
     67          
     68          
     69          struct ST_FILE {
     70              char            fileName[FS_FILENAMELENGTH];
     71              unsigned long   startAddress;
     72              unsigned long   length; 
     73              unsigned long   offset; 
     74              char            write;
     75              char            append;
     76          };
     77          #define FILE struct ST_FILE 
     78          
     79          
     80          
     81          ///////////////////////////////////
     82          // Funktioner och procedurer
     83          
     84          extern void            InitializeFileSystem( void );
     85          extern void            InitializeFlash( void );
     86          extern void            SetupReadSeq( void );
     87          extern unsigned char   ReadFLASH( void );
     88          extern void            TerminateReadSeq( void );
     89          extern void            GetDeviceIDRS232(void);
     90          extern void            SetupWriteSeq( void );
     91          extern void            WriteFLASH(unsigned char);
     92          extern void            TerminateWriteSeq( void );
     93          extern void            PerformWriteSeq( void );
     94          extern void            EraseBlock( void );
     95          extern void            WriteFileHead(const char* name, long size);
     96          extern FILE*           fopen(const char* name, const char* def);
     97          extern FILE*               fopenA(const char* name, long maxSize, long offset);
     98          extern void            fputc(FILE* filePtr, char c);
     99          extern void            fputLine(FILE* filePtr, const char* str);
    100          extern void            fupLoad( void );
    101          extern int             fgetc(FILE* filePtr);
    102          extern void            fgetLine(FILE* filePtr, char* str, int maxLen);
    103          extern void            fdownLoad( void );
    104          extern void            fclose(FILE* filePtr);
    105          extern long            ftell(FILE* filePtr);
    106          //void            Rewind(FILE* filePtr);
    107          extern void            fSetPos(FILE* filePtr, long offset);
    108          extern void            ReleaseCurrFile( void );
    109          extern void            EraseAll( void );
    110          extern void            StartDynamic( void );
    111          extern void            EraseDynamic( void );
    112          extern char                        MemUsage( void );
    113          extern void                        Dir( void );
    114          extern void                        Type( void );
    115          extern void                        TypeA( void );
    116          
    117          #endif
     53          
     54          
     55          ///////////////////////////////////
     56          // Definitioner
     57          
     58          #define VERSION_MENU_STRING     "Telestation 3.5       (c) 2004-09-19 FRHA"
     59          
     60          #define CM_PARSIZE              24
     61          #define CM_NRPAR                16
     62          
     63          #define MAX_LABEL_LEN   8
     64          #define MAX_LABELS      64
     65          
     66          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     67          /*
     68          #define MAX_BATFILES    8
     69          */
     70          
     71          ///////////////////////////////////
     72          // Strukturer
     73          
     74          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     75          /*
     76          struct ST_Label {
     77              char    name[MAX_LABEL_LEN];
     78              long    pos;
     79          };
     80          #define Label struct ST_Label
     81           
     82          struct ST_BatFileObj {
     83              FILE*       fp;                 //Filpekare till bat-filen
     84              Label*      labels;             //Pekare till lista med ingående labels
     85              char        labelIndex;         //Pekar på nästa lediga label
     86              BatFileObj* caller;             //Den batfil som kallade på denna. Om användaren gav kommandot 
     87                                              //skall den inehålla NULL
     88              char        occupied;           //1 om detta objekt används, 0 annars
     89          };    
     90          #define BatFileObj struct ST_BatFileObj
     91          */
     92          
     93          ///////////////////////////////////
     94          // Funktioner och procedurer
     95          
     96          extern void    InitializeComputer1( void );
     97          extern void    InitializePhoneAnsApp( void );
     98          extern void    MainShell( void );
     99          extern char    DecodeAndPerform(const char* cmdStr);
    100          //int     MainCommandInterper(char c);
    101          extern void    Hello( void );
    102          extern void    TestHW( void );
    103          extern void    FlashID( void );
    104          extern void    Erase( void );
    105          extern void    BackRead( void );
    106          extern void    ReadSpare( void );
    107          extern void    WF1( void );
    108          extern void    WF2( void );
    109          extern void    WF3( void );
    110          extern void    RF1( void );
    111          extern void    RF2( void );
    112          extern void    RF3( void );
    113          extern void    CreateLong( void );
    114          extern void    ReadSpare2( void );
    115          extern void    Append( void );
    116          
    117          extern void    SetupBatFile( void );
    118          extern void    ClearLabelList( void );
    119          extern void    ExecuteBatFile(const char* batFileName);
    120          extern char    InsertLabel(const char* name, long pos);
    121          extern int     FindLabel(const char *name);
    122          extern char    GotoLabel(const char* name);
    123          
    124          extern void    myStrCpy(char* dest, const char* src);
    125          extern int     myStrLen(char* str);
    126          extern void    myLong2HexStr(long v, char* str);
    127          extern void    myInt2DecStr(int v, char* str);
    128          extern void    myInt2DecStr00(char v, char* str);
    129          extern int     myStr2Int(const char* str);
    130          extern char    myStrCmpNoCase(const char* s1, const char* s2);
    131          
    132          // Nedan var ett försök till multipla bat-filer, kanske införs senare
    133          /*
    134          void    SetupBatFile( void );
    135          void    ClearLabelList( void );
    136          void    ClearLabelList(Label* list);
    137          BatFileObj*    VacantBatFileObj(FILE* fp);
    138          void    ExecuteBatFile(const char* batFileName);
    139          char    InsertLabel(const char* name, long pos);
    140          char    FindLabel(const char *name, Label* l);
    141          char    GotoLabel(const char* name);
    142          */
    143          
    144          ///////////////////////////
    145          // Globala variabler
    146          
    147          
    148          ///////////////////////////
    149          // Lokala variabler
    150          
    151          
    152          #endif
     47          #include "FileSystem.h"
      1          /**************************************************************************************
      2          Fil:            $Id: FileSystem.h,v 1.4 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Kommentarer:    Filhuvudet befinner sig i "Spare" arean tillhörande filens första sida. Huvudet består 
      7                                          av 16 bytes enligt följande lista:
      8                                          0       Huvud       0xAA = Legalt filhuvud, annat tillsvidare odefinierat
      9                                          1-4     Fillängd    Pos 1 = MSB, pos 4 = LSB
     10                                          5-12    Filtitel    Enl "Titel.ext". Om titeln är mindre än 8 tecken avslutas det med nollor
     11                                          13-15   Filext      Enl "Titel.ext". Om ext är mindre än 3 tecken avslutas det med nollor
     12          
     13                                          En nolla skriven i fileName[0] indikerar att
     14                                          filstrukturen är ledig.
     15                  
     16          Revisionshistoria:
     17                                          $Log: FileSystem.h,v $
     18                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     19                                          Various declarations changes.
     20                                          Still version 0200.
     21                                          
     22                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     23                                          Added menu option of setting speaker volume (untested)
     24                                          Completely changed header files
     25                                          Version 0200.
     26                                          
     27                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     28                                          Added header information
     29                                          
     30          
     31          **************************************************************************************/
     32          
     33          #ifndef _FILESYSTEM_INCLUDED_
     34          #define _FILESYSTEM_INCLUDED_
     35          
     36          ///////////////////////////////////
     37          // Definitioner
     38          
     39          #define FS_MAXFILES         8 
     40          #define FS_FILENAMELENGTH   13
     41          #define FS_FLASHSIZE        0x800000
     42          
     43          #define OFF            0
     44          #define READY        1
     45          #define NEMPTY        2
     46          #define WRITING        3
     47          #define OCCUPIED    4
     48          
     49          #define CLE     P4.0                                //Command Latch Enable
     50          #define ALE     P4.1                                //Address Latch Enable
     51          #define WP      P4.2                                //Write Protect
     52          #define SE      P4.3                                //Spare Enable
     53          //#define CE      P4.4                                //Chip Enable
     54          #define FBUSY   P4.5                                //Busy
     55          
     56          #define FREG (*(unsigned char xdata *) 0xE000)
     57          #define FLASH (*(unsigned char xdata *) 0xB000) 
     58          
     59          ///////////////////////////////////
     60          // Strukturer
     61          
     62          struct ST_FILE_HEAD {
     63              unsigned long   length;
     64              char            name[FS_FILENAMELENGTH];
     65          };
     66          #define FILE_HEAD struct ST_FILE_HEAD
     67          
     68          
     69          struct ST_FILE {
     70              char            fileName[FS_FILENAMELENGTH];
     71              unsigned long   startAddress;
     72              unsigned long   length; 
     73              unsigned long   offset; 
     74              char            write;
     75              char            append;
     76          };
     77          #define FILE struct ST_FILE 
     78          
     79          
     80          
     81          ///////////////////////////////////
     82          // Funktioner och procedurer
     83          
     84          extern void            InitializeFileSystem( void );
     85          extern void            InitializeFlash( void );
     86          extern void            SetupReadSeq( void );
     87          extern unsigned char   ReadFLASH( void );
     88          extern void            TerminateReadSeq( void );
     89          extern void            GetDeviceIDRS232(void);
     90          extern void            SetupWriteSeq( void );
     91          extern void            WriteFLASH(unsigned char);
     92          extern void            TerminateWriteSeq( void );
     93          extern void            PerformWriteSeq( void );
     94          extern void            EraseBlock( void );
     95          extern void            WriteFileHead(const char* name, long size);
     96          extern FILE*           fopen(const char* name, const char* def);
     97          extern FILE*               fopenA(const char* name, long maxSize, long offset);
     98          extern void            fputc(FILE* filePtr, char c);
     99          extern void            fputLine(FILE* filePtr, const char* str);
    100          extern void            fupLoad( void );
    101          extern int             fgetc(FILE* filePtr);
    102          extern void            fgetLine(FILE* filePtr, char* str, int maxLen);
    103          extern void            fdownLoad( void );
    104          extern void            fclose(FILE* filePtr);
    105          extern long            ftell(FILE* filePtr);
    106          //void            Rewind(FILE* filePtr);
    107          extern void            fSetPos(FILE* filePtr, long offset);
    108          extern void            ReleaseCurrFile( void );
    109          extern void            EraseAll( void );
    110          extern void            StartDynamic( void );
    111          extern void            EraseDynamic( void );
    112          extern char                        MemUsage( void );
    113          extern void                        Dir( void );
    114          extern void                        Type( void );
    115          extern void                        TypeA( void );
    116          
    117          #endif
     48          #include "ErrorCodes.h"
      1          /***********************************************
      2          Fil:            $Id: ErrorCodes.h,v 1.3 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:52 $
      5          
      6          Revisionshistoria:
      7                                          $Log: ErrorCodes.h,v $
      8                                          Revision 1.3  2003/11/20 22:08:52  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     13                                          Added header information
     14                                          
     15          
     16          
     17          ***********************************************/
     18          
     19          #ifndef _ERRORCODES_INCLUDED_
     20          #define _ERRORCODES_INCLUDED_
     21          
     22          
     23          //Felkoder
     24          
     25          //Generellt
     26          #define EM_NOERROR          0x00
     27          
     28          
     29          
     30          //Filsystem
     31          #define EM_FILEEXISTS       0x10
     32          #define EM_FILENOTEXISTS    0x11
     33          #define EM_OUTOFFILEMEMORY  0x12
     34          #define EM_TOOMANYFILES     0x13
     35          #define EM_FILEOPEN         0x14
     36          #define EM_FILENOTOPEN      0x15
     37          #define EM_FILEREADONLY     0x16
     38          #define EM_FILEWRITEONLY    0x17
     39          #define EM_WRITEFILEOPEN    0x18
     40          
     41          //Phone
     42          #define EM_TOOMANYTIMERS    0x19
     43          
     44          //BAtfiles
     45          #define EM_TOOMANYBATFILES  0x20
     46          #define EM_REDEFLABELATTEMPT    0x21
     47          #define EM_TOOMANYLABELS    0x22
     48          #define EM_NOLABEL          0x23
     49          
     50          
     51          //PhoneAns
     52          #define EM_PARAMETER_SYNTAX    0x24
     53          
     54          #endif
     49          #include "RS232.h"
      1          /********************************************************
      2          Fil:            $Id: RS232.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Revisionshistoria:
      7                                          $Log: RS232.h,v $
      8                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          
     18          
     19          ********************************************************/
     20          
     21          #ifndef _RS232_INCLUDED_
     22          #define _RS232_INCLUDED_
     23          
     24          ///////////////////////////////////
     25          // Definitioner
     26          
     27          
     28          ///////////////////////////////////
     29          // Strukturer
     30          
     31          
     32          ///////////////////////////////////
     33          // Funktioner och procedurer
     34          
     35          extern void             InitializeRS232( void );
     36          extern void             SendRS232(char tecken);
     37          extern void             SendStringRS232(const char *str);
     38          extern void             SendStringEOLRS232(const char *str);
     39          extern char             WaitAndReceiveRS232( void );
     40          extern char             WaitAndReceiveTimeout( void );
     41          extern int      ReceiveLineRS232(char* str, int maxLen);
     42          
     43          #endif
     50          #include "Wav.h"
      1          /********************************************************
      2          Fil:            $Id: wav.h,v 1.1 2003/11/23 20:29:34 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/23 20:29:34 $
      5          
      6          Revisionshistoria:
      7                                          $Log: wav.h,v $
      8                                          Revision 1.1  2003/11/23 20:29:34  Gemensam
      9                                          Complete and tested volume setting in options menu.
     10                                          Ver 0201
     11                                          
     12                                          
     13          
     14          ********************************************************/
     15          
     16          #ifndef _WAV_INCLUDED_
     17          #define _WAV_INCLUDED_
     18          
     19          ///////////////////////////////////
     20          // Definitioner
     21          
     22          #define WS_NO_OP        0x00
     23          #define WS_REC          0x01
     24          #define WS_PLAY         0x02
     25          #define WS_ECHO         0x03
     26          #define WS_TONE         0x04
     27          #define WS_PORT1        0x05
     28           
     29          #define DAC0 (*(unsigned char xdata *) 0xA000)
     30          #define DAC1 (*(unsigned char xdata *) 0xA001)
     31          #define DAC2 (*(unsigned char xdata *) 0xA002)
     32          #define DAC3 (*(unsigned char xdata *) 0xA003)
     33          
     34          #define WAVBUFSIZE  512
     35          
     36          //#define SPEAKER_ON  P1.5 = 1
     37          //#define SPEAKER_OFF  P1.5 = 0
     38          
     39          ///////////////////////////////////
     40          // Strukturer
     41          
     42          
     43          ///////////////////////////////////
     44          // Funktioner och procedurer
     45          
     46          extern void    InitializeWAV( void );
     47          extern void    SetupMic( void );
     48          extern void    SetupPhoneIn( void );
     49          extern void    RecMicFile(const char* fileName);
     50          extern void    RecPhoneFile(const char* fileName);
     51          extern void    RecFile(const char* fileName);
     52          extern void    PlayFile(const char* fileName);
     53          extern void    EchoMic( void );
     54          extern void    EchoPhone( void );
     55          extern void    Echo( void );
     56          extern void    WavTone( void );
     57           
     58          #endif
     51          #include "DTMF.h"
      1          /*************************************************************
      2          Fil:            $Id: DTMF.h,v 1.2 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Beskrivning:    Header fil till DTMF.c
      5          
      6          Skapad:         03-11-18
      7          
      8          Ändrad:         $Date: 2003/11/20 22:08:52 $
      9          
     10          Ägare:          Fredrik Hoffman
     11          
     12          
     13          Att göra:
     14          
     15          Revisionshistoria:
     16                                          $Log: DTMF.h,v $
     17                                          Revision 1.2  2003/11/20 22:08:52  Gemensam
     18                                          Various declarations changes.
     19                                          Still version 0200.
     20                                          
     21                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     22                                          Added menu option of setting speaker volume (untested)
     23                                          Completely changed header files
     24                                          Version 0200.
     25                                          
     26          
     27          *************************************************************/
     28          
     29          #ifndef _DTMF_INCLUDED_
     30          #define _DTMF_INCLUDED_
     31          
     32          ///////////////////////////////////
     33          // Definitioner
     34          
     35          #define DTMF_TRANS      (*(unsigned char xdata *) 0x9000)
     36          #define DTMF_READ       (*(unsigned char xdata *) 0x9000)
     37          #define DTMF_CONTROL    (*(unsigned char xdata *) 0x9001)
     38          #define DTMF_STATUS     (*(unsigned char xdata *) 0x9001)
     39           
     40          ///////////////////////////////////
     41          // Funktioner och procedurer
     42          
     43          extern void    InitializeDTMF( void );
     44          extern void    MakeDTMFTones(const char *tones);
     45          extern char    DecodeDTMF(char c);
     46          extern char    DecodeReceivedDTMF( void );
     47          extern void    ResetDTMFIndex( void );
     48          extern char    GetNextDTMF( void );
     49           
     50          #endif
     52          #include "Phone.h"
      1          /********************************************************
      2          Fil:            $Id: Phone.h,v 1.6 2003/12/26 16:17:01 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/12/26 16:17:01 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Phone.h,v $
      8                                          Revision 1.6  2003/12/26 16:17:01  Gemensam
      9                                          Reinstate 500 ms wait for hang up detection to settle (if not PPD is used).
     10                                          Fixed PPD detection by decreasing phone volume from 63 to 15.
     11                                          Version 0304.
     12                                          
     13                                          Revision 1.5  2003/11/29 22:36:00  Gemensam
     14                                          Fixed problem with to short pulse width on PPD.
     15                                          Ver 0302.
     16                                          
     17                                          Revision 1.4  2003/11/24 22:44:36  Gemensam
     18                                          Fixed PPD, not working yet,
     19                                          New command: speaker volume.
     20                                          Version 0301.
     21                                          
     22                                          Revision 1.3  2003/11/23 21:40:03  Gemensam
     23                                          Parallell phone detection included.
     24                                          Removed obsolete #define's regarding LCD interface.
     25                                          Ver 0300
     26                                          
     27                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
     28                                          Various declarations changes.
     29                                          Still version 0200.
     30                                          
     31                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     32                                          Added menu option of setting speaker volume (untested)
     33                                          Completely changed header files
     34                                          Version 0200.
     35                                          
     36                                          
     37          
     38          ********************************************************/
     39          
     40          #ifndef _PHONE_INCLUDED_
     41          #define _PHONE_INCLUDED_
     42          
     43          ///////////////////////////////////
     44          // Definitioner
     45          
     46          //PS = Phone Signals
     47          #define PS_RV                                           P1.2
     48          #define PS_LC                                           P1.7
     49          #define PS_LCD                                          P1.1
     50          #define PS_PPD                                          P1.0
     51          
     52          #define WRS_POS_EDGE_TRIGG          10
     53          #define WRS_NEG_EDGE_TRIGG          10
     54          #define WRS_POST_SIGNAL_LIMIT       20
     55          #define WRS_SIGNAL_MIN_INTERVALL    300
     56          #define WRS_SIGNAL_MAX_INTERVALL    600
     57          
     58          /* Examples of timeouts
     59          Lift phone:             Play:
     60          1E5                             11
     61          209                             163
     62          20C                             11
     63          200                             4
     64          216                             E8      
     65          1F3                             F5
     66          */
     67          
     68          #define P_PPD_PW                                        0x190
     69          #define P_RIPPLE_FILTER_TIMEOUT         10
     70          
     71          #define DEFAULT_PHONE_OUT_VOLUME        15
     72          
     73          ///////////////////////////////////
     74          // Strukturer
     75          
     76          
     77          ///////////////////////////////////
     78          // Funktioner och procedurer
     79          
     80          extern void    InitializePhone( void );
     81          extern void    HangUp( void );
     82          extern void    LiftPhone( void );
     83          
     84          #ifdef  __PPD_ON__
     85          extern void        ClearPPDRipple( void );
     86          #endif
     87          
     88          extern void    MonitorRingSignal( void );
     89          extern int         WaitForRingSignals(int  nSignals);
     90          
     91          #endif
     53          #include "Timer.h"
      1          /********************************************************
      2          Fil:            $Id: Timer.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Timer.h,v $
      8                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          
     18          
     19          ********************************************************/
     20          
     21          #ifndef _TIMER_INCLUDED_
     22          #define _TIMER_INCLUDED_
     23          
     24          ///////////////////////////////////
     25          // Definitioner
     26          
     27          #define TM_MAX_TIMERS   5
     28          
     29          ///////////////////////////////////
     30          // Strukturer
     31          
     32          
     33          ///////////////////////////////////
     34          // Funktioner och procedurer
     35          
     36          extern void    InitializeTimer( void );
     37          extern char    StartTimer(unsigned int tenMillisecTimeout);
     38          extern void    KillTimer(char  timerIndex);
     39          extern char    TimedOut(char timerIndex);
     40          extern void    WaitFor(unsigned int tenMillisec);
     41           
     42          #endif
     54          #include "PhoneAns.h"
      1          /********************************************************
      2          Fil:            $Id: PhoneAns.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Revisionshistoria:
      7                                          $Log: PhoneAns.h,v $
      8                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          
     18          
     19          ********************************************************/
     20          
     21          #ifndef _PHONEANS_INCLUDED_
     22          #define _PHONEANS_INCLUDED_
     23          
     24          #include "Main.h"
      1          /*************************************************************
      2          Fil:            $Id: Main.h,v 1.10 2003/12/26 16:17:01 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/12/26 16:17:01 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Main.h,v $
      8                                          Revision 1.10  2003/12/26 16:17:01  Gemensam
      9                                          Reinstate 500 ms wait for hang up detection to settle (if not PPD is used).
     10                                          Fixed PPD detection by decreasing phone volume from 63 to 15.
     11                                          Version 0304.
     12                                          
     13                                          Revision 1.9  2003/12/09 20:52:49  Gemensam
     14                                          Commented out PPD detection since the HW not work yet.
     15                                          Ver 0302.
     16                                          
     17                                          Revision 1.8  2003/11/29 22:35:59  Gemensam
     18                                          Fixed problem with to short pulse width on PPD.
     19                                          Ver 0302.
     20                                          
     21                                          Revision 1.7  2003/11/24 22:44:36  Gemensam
     22                                          Fixed PPD, not working yet,
     23                                          New command: speaker volume.
     24                                          Version 0301.
     25                                          
     26                                          Revision 1.6  2003/11/23 21:40:03  Gemensam
     27                                          Parallell phone detection included.
     28                                          Removed obsolete #define's regarding LCD interface.
     29                                          Ver 0300
     30                                          
     31                                          Revision 1.5  2003/11/23 20:29:34  Gemensam
     32                                          Complete and tested volume setting in options menu.
     33                                          Ver 0201
     34                                          
     35                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     36                                          Various declarations changes.
     37                                          Still version 0200.
     38                                          
     39                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     40                                          Added menu option of setting speaker volume (untested)
     41                                          Completely changed header files
     42                                          Version 0200.
     43                                          
     44                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     45                                          Added header information
     46                                          
     47          *************************************************************/
     48          
     49          #ifndef _MAIN_INCLUDED_
     50          #define _MAIN_INCLUDED_
     51          
     52          #include "FileSystem.h"
     53          
     54          
     55          ///////////////////////////////////
     56          // Definitioner
     57          
     58          #define VERSION_MENU_STRING     "Telestation 3.5       (c) 2004-09-19 FRHA"
     59          
     60          #define CM_PARSIZE              24
     61          #define CM_NRPAR                16
     62          
     63          #define MAX_LABEL_LEN   8
     64          #define MAX_LABELS      64
     65          
     66          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     67          /*
     68          #define MAX_BATFILES    8
     69          */
     70          
     71          ///////////////////////////////////
     72          // Strukturer
     73          
     74          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     75          /*
     76          struct ST_Label {
     77              char    name[MAX_LABEL_LEN];
     78              long    pos;
     79          };
     80          #define Label struct ST_Label
     81           
     82          struct ST_BatFileObj {
     83              FILE*       fp;                 //Filpekare till bat-filen
     84              Label*      labels;             //Pekare till lista med ingående labels
     85              char        labelIndex;         //Pekar på nästa lediga label
     86              BatFileObj* caller;             //Den batfil som kallade på denna. Om användaren gav kommandot 
     87                                              //skall den inehålla NULL
     88              char        occupied;           //1 om detta objekt används, 0 annars
     89          };    
     90          #define BatFileObj struct ST_BatFileObj
     91          */
     92          
     93          ///////////////////////////////////
     94          // Funktioner och procedurer
     95          
     96          extern void    InitializeComputer1( void );
     97          extern void    InitializePhoneAnsApp( void );
     98          extern void    MainShell( void );
     99          extern char    DecodeAndPerform(const char* cmdStr);
    100          //int     MainCommandInterper(char c);
    101          extern void    Hello( void );
    102          extern void    TestHW( void );
    103          extern void    FlashID( void );
    104          extern void    Erase( void );
    105          extern void    BackRead( void );
    106          extern void    ReadSpare( void );
    107          extern void    WF1( void );
    108          extern void    WF2( void );
    109          extern void    WF3( void );
    110          extern void    RF1( void );
    111          extern void    RF2( void );
    112          extern void    RF3( void );
    113          extern void    CreateLong( void );
    114          extern void    ReadSpare2( void );
    115          extern void    Append( void );
    116          
    117          extern void    SetupBatFile( void );
    118          extern void    ClearLabelList( void );
    119          extern void    ExecuteBatFile(const char* batFileName);
    120          extern char    InsertLabel(const char* name, long pos);
    121          extern int     FindLabel(const char *name);
    122          extern char    GotoLabel(const char* name);
    123          
    124          extern void    myStrCpy(char* dest, const char* src);
    125          extern int     myStrLen(char* str);
    126          extern void    myLong2HexStr(long v, char* str);
    127          extern void    myInt2DecStr(int v, char* str);
    128          extern void    myInt2DecStr00(char v, char* str);
    129          extern int     myStr2Int(const char* str);
    130          extern char    myStrCmpNoCase(const char* s1, const char* s2);
    131          
    132          // Nedan var ett försök till multipla bat-filer, kanske införs senare
    133          /*
    134          void    SetupBatFile( void );
    135          void    ClearLabelList( void );
    136          void    ClearLabelList(Label* list);
    137          BatFileObj*    VacantBatFileObj(FILE* fp);
    138          void    ExecuteBatFile(const char* batFileName);
    139          char    InsertLabel(const char* name, long pos);
    140          char    FindLabel(const char *name, Label* l);
    141          char    GotoLabel(const char* name);
    142          */
    143          
    144          ///////////////////////////
    145          // Globala variabler
    146          
    147          
    148          ///////////////////////////
    149          // Lokala variabler
    150          
    151          
    152          #endif
     25          #include "Calender.h"
      1          /********************************************************
      2          Fil:            $Id: Calender.h,v 1.4 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:52 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Calender.h,v $
      8                                          Revision 1.4  2003/11/20 22:08:52  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.3  2003/11/18 19:17:35  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     18                                          Added header information
     19                                          
     20          
     21          ********************************************************/
     22          
     23          #ifndef _CALENDER_INCLUDED_
     24          #define _CALENDER_INCLUDED_
     25          
     26          ///////////////////////////////////
     27          // Definitioner
     28          
     29          // Non-volatile variabler:
     30          #define NV_ANSWERING_ON 0x08
     31          #define NV_NUM_SIGNALS  0x09
     32          #define NV_PLAYED_MS    0x0A
     33          #define NV_PLAYED_LS    0x0B
     34          #define NV_SPEAKER_VOL  0x0C
     35          //Max adress är 0x3F
     36          
     37          #define SDA    P3.0
     38          #define SCL    P3.1
     39          //#define SDA    P1.5
     40          //#define SCL    P1.6
     41          
     42          
     43          ///////////////////////////////////
     44          // Strukturer
     45          
     46          struct ST_TIME {
     47              char    seconds;
     48              char    minutes;
     49              char    hours;
     50          };
     51          #define TIME struct ST_TIME
     52          
     53          
     54          struct ST_DATE {
     55              char    day;
     56              char    date;
     57              char    month;
     58              char    year;
     59          };
     60          #define DATE struct ST_DATE
     61          
     62          ///////////////////////////////////
     63          // Funktioner och procedurer
     64          
     65          extern void    InitializeCalender( void );
     66          extern char    WOCB(char dat);
     67          extern char    ROCB(char ack);
     68          extern char    WriteCalenderByte(char address, char dat);
     69          extern char    ReadCalenderByte(char address, char* dat);
     70          extern void    GetTimeNow(TIME* tptr);
     71          extern void    GetDateNow(DATE* tptr);
     72          extern void    CreateTimeString(TIME* tptr, char* str);
     73          extern void    CreateDateString(DATE* tptr, char* str);
     74          extern void    CreateDateString2(DATE* tptr, char* str);
     75           
     76          
     77          ///////////////////////////
     78          // Variabler
     79          
     80          
     81          
     82          
     83           
     84          #endif
     26          
     27          ///////////////////////////////////
     28          // Definitioner
     29          
     30          #define MS_LOG          0x01
     31          #define MS_MENU         0x02
     32          #define MS_TIMEDATE     0x03
     33          #define MS_ERASEQST     0x04
     34          #define MS_MEMO         0x05
     35          
     36          #define PB_MAXENTRIES   512
     37          #define PB_POSTSIZE     32
     38          
     39          ///////////////////////////////////
     40          // Strukturer
     41          
     42          
     43          ///////////////////////////////////
     44          // Funktioner och procedurer
     45          
     46          extern void    InitializePhoneAns( void );
     47          extern void    WaitForCall( void );
     48          extern void    CorrectDate(char changedDate);
     49          extern void    RecordCallerMessage( void );
     50          extern void    AskQuestionMsg( void );
     51          extern void    EnterCode( void );
     52          extern void    SetupUpQLabels( void );
     53          extern void    LabelCopy(char* dest, const char* src);
     54          extern void    CreateUniqueFilename(char* str);
     55          extern void    ShowTimeDateSet( void );
     56          extern void    ShowEraseQuest( void );
     57          extern void    ReadPhoneBookFile( void );
     58          extern void    LookUpCaller(char* number, char* name,  char* category);
     59          extern void    IntitializeMemo( void );
     60          extern void    RecordMemo( void );
     61          extern void    PlayMemo( void );
     62          extern void    CreateMemoFileName(int index, char* str);
     63          extern char    CategoryHit(char* str, char category);
     64          
     65          #endif
     55          #include "LogFile.h"
      1          /********************************************************
      2          Fil:            $Id: LogFile.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Revisionshistoria:
      7                                          $Log: LogFile.h,v $
      8                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          
     18          
     19          ********************************************************/
     20          
     21          #ifndef _LOGFILE_INCLUDED_
     22          #define _LOGFILE_INCLUDED_
     23          
     24          #include "FileSystem.h"
      1          /**************************************************************************************
      2          Fil:            $Id: FileSystem.h,v 1.4 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Kommentarer:    Filhuvudet befinner sig i "Spare" arean tillhörande filens första sida. Huvudet består 
      7                                          av 16 bytes enligt följande lista:
      8                                          0       Huvud       0xAA = Legalt filhuvud, annat tillsvidare odefinierat
      9                                          1-4     Fillängd    Pos 1 = MSB, pos 4 = LSB
     10                                          5-12    Filtitel    Enl "Titel.ext". Om titeln är mindre än 8 tecken avslutas det med nollor
     11                                          13-15   Filext      Enl "Titel.ext". Om ext är mindre än 3 tecken avslutas det med nollor
     12          
     13                                          En nolla skriven i fileName[0] indikerar att
     14                                          filstrukturen är ledig.
     15                  
     16          Revisionshistoria:
     17                                          $Log: FileSystem.h,v $
     18                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     19                                          Various declarations changes.
     20                                          Still version 0200.
     21                                          
     22                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     23                                          Added menu option of setting speaker volume (untested)
     24                                          Completely changed header files
     25                                          Version 0200.
     26                                          
     27                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     28                                          Added header information
     29                                          
     30          
     31          **************************************************************************************/
     32          
     33          #ifndef _FILESYSTEM_INCLUDED_
     34          #define _FILESYSTEM_INCLUDED_
     35          
     36          ///////////////////////////////////
     37          // Definitioner
     38          
     39          #define FS_MAXFILES         8 
     40          #define FS_FILENAMELENGTH   13
     41          #define FS_FLASHSIZE        0x800000
     42          
     43          #define OFF            0
     44          #define READY        1
     45          #define NEMPTY        2
     46          #define WRITING        3
     47          #define OCCUPIED    4
     48          
     49          #define CLE     P4.0                                //Command Latch Enable
     50          #define ALE     P4.1                                //Address Latch Enable
     51          #define WP      P4.2                                //Write Protect
     52          #define SE      P4.3                                //Spare Enable
     53          //#define CE      P4.4                                //Chip Enable
     54          #define FBUSY   P4.5                                //Busy
     55          
     56          #define FREG (*(unsigned char xdata *) 0xE000)
     57          #define FLASH (*(unsigned char xdata *) 0xB000) 
     58          
     59          ///////////////////////////////////
     60          // Strukturer
     61          
     62          struct ST_FILE_HEAD {
     63              unsigned long   length;
     64              char            name[FS_FILENAMELENGTH];
     65          };
     66          #define FILE_HEAD struct ST_FILE_HEAD
     67          
     68          
     69          struct ST_FILE {
     70              char            fileName[FS_FILENAMELENGTH];
     71              unsigned long   startAddress;
     72              unsigned long   length; 
     73              unsigned long   offset; 
     74              char            write;
     75              char            append;
     76          };
     77          #define FILE struct ST_FILE 
     78          
     79          
     80          
     81          ///////////////////////////////////
     82          // Funktioner och procedurer
     83          
     84          extern void            InitializeFileSystem( void );
     85          extern void            InitializeFlash( void );
     86          extern void            SetupReadSeq( void );
     87          extern unsigned char   ReadFLASH( void );
     88          extern void            TerminateReadSeq( void );
     89          extern void            GetDeviceIDRS232(void);
     90          extern void            SetupWriteSeq( void );
     91          extern void            WriteFLASH(unsigned char);
     92          extern void            TerminateWriteSeq( void );
     93          extern void            PerformWriteSeq( void );
     94          extern void            EraseBlock( void );
     95          extern void            WriteFileHead(const char* name, long size);
     96          extern FILE*           fopen(const char* name, const char* def);
     97          extern FILE*               fopenA(const char* name, long maxSize, long offset);
     98          extern void            fputc(FILE* filePtr, char c);
     99          extern void            fputLine(FILE* filePtr, const char* str);
    100          extern void            fupLoad( void );
    101          extern int             fgetc(FILE* filePtr);
    102          extern void            fgetLine(FILE* filePtr, char* str, int maxLen);
    103          extern void            fdownLoad( void );
    104          extern void            fclose(FILE* filePtr);
    105          extern long            ftell(FILE* filePtr);
    106          //void            Rewind(FILE* filePtr);
    107          extern void            fSetPos(FILE* filePtr, long offset);
    108          extern void            ReleaseCurrFile( void );
    109          extern void            EraseAll( void );
    110          extern void            StartDynamic( void );
    111          extern void            EraseDynamic( void );
    112          extern char                        MemUsage( void );
    113          extern void                        Dir( void );
    114          extern void                        Type( void );
    115          extern void                        TypeA( void );
    116          
    117          #endif
     25          
     26          ///////////////////////////////////
     27          // Definitioner
     28          
     29          #define MS_LOG          0x01
     30          #define MS_MENU         0x02
     31          #define MS_TIMEDATE     0x03
     32          #define MS_ERASEQST     0x04
     33          
     34          ///////////////////////////////////
     35          // Strukturer
     36          
     37          
     38          ///////////////////////////////////
     39          // Funktioner och procedurer
     40          
     41          extern void    InitializeLogFile( void );
     42          extern void    CreateLog( void );
     43          extern void    LogMessage(const char* str1, const char* str2);
     44          extern char    BuildCallerList( void );
     45          extern char    FindCall(FILE* fp, int index);
     46          extern char    FindNextCall(FILE* fp);
     47          extern void    GetCallInformation(FILE* fp, char* phoneNumber, char* time, int* noOfMessages);
     48          extern char    PlayThisCall(int callIndex);
     49          extern void    PlayNewMessages( void );
     50          
     51          #endif
     56          #include "FileSystem.h"
      1          /**************************************************************************************
      2          Fil:            $Id: FileSystem.h,v 1.4 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Kommentarer:    Filhuvudet befinner sig i "Spare" arean tillhörande filens första sida. Huvudet består 
      7                                          av 16 bytes enligt följande lista:
      8                                          0       Huvud       0xAA = Legalt filhuvud, annat tillsvidare odefinierat
      9                                          1-4     Fillängd    Pos 1 = MSB, pos 4 = LSB
     10                                          5-12    Filtitel    Enl "Titel.ext". Om titeln är mindre än 8 tecken avslutas det med nollor
     11                                          13-15   Filext      Enl "Titel.ext". Om ext är mindre än 3 tecken avslutas det med nollor
     12          
     13                                          En nolla skriven i fileName[0] indikerar att
     14                                          filstrukturen är ledig.
     15                  
     16          Revisionshistoria:
     17                                          $Log: FileSystem.h,v $
     18                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     19                                          Various declarations changes.
     20                                          Still version 0200.
     21                                          
     22                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     23                                          Added menu option of setting speaker volume (untested)
     24                                          Completely changed header files
     25                                          Version 0200.
     26                                          
     27                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     28                                          Added header information
     29                                          
     30          
     31          **************************************************************************************/
     32          
     33          #ifndef _FILESYSTEM_INCLUDED_
     34          #define _FILESYSTEM_INCLUDED_
     35          
     36          ///////////////////////////////////
     37          // Definitioner
     38          
     39          #define FS_MAXFILES         8 
     40          #define FS_FILENAMELENGTH   13
     41          #define FS_FLASHSIZE        0x800000
     42          
     43          #define OFF            0
     44          #define READY        1
     45          #define NEMPTY        2
     46          #define WRITING        3
     47          #define OCCUPIED    4
     48          
     49          #define CLE     P4.0                                //Command Latch Enable
     50          #define ALE     P4.1                                //Address Latch Enable
     51          #define WP      P4.2                                //Write Protect
     52          #define SE      P4.3                                //Spare Enable
     53          //#define CE      P4.4                                //Chip Enable
     54          #define FBUSY   P4.5                                //Busy
     55          
     56          #define FREG (*(unsigned char xdata *) 0xE000)
     57          #define FLASH (*(unsigned char xdata *) 0xB000) 
     58          
     59          ///////////////////////////////////
     60          // Strukturer
     61          
     62          struct ST_FILE_HEAD {
     63              unsigned long   length;
     64              char            name[FS_FILENAMELENGTH];
     65          };
     66          #define FILE_HEAD struct ST_FILE_HEAD
     67          
     68          
     69          struct ST_FILE {
     70              char            fileName[FS_FILENAMELENGTH];
     71              unsigned long   startAddress;
     72              unsigned long   length; 
     73              unsigned long   offset; 
     74              char            write;
     75              char            append;
     76          };
     77          #define FILE struct ST_FILE 
     78          
     79          
     80          
     81          ///////////////////////////////////
     82          // Funktioner och procedurer
     83          
     84          extern void            InitializeFileSystem( void );
     85          extern void            InitializeFlash( void );
     86          extern void            SetupReadSeq( void );
     87          extern unsigned char   ReadFLASH( void );
     88          extern void            TerminateReadSeq( void );
     89          extern void            GetDeviceIDRS232(void);
     90          extern void            SetupWriteSeq( void );
     91          extern void            WriteFLASH(unsigned char);
     92          extern void            TerminateWriteSeq( void );
     93          extern void            PerformWriteSeq( void );
     94          extern void            EraseBlock( void );
     95          extern void            WriteFileHead(const char* name, long size);
     96          extern FILE*           fopen(const char* name, const char* def);
     97          extern FILE*               fopenA(const char* name, long maxSize, long offset);
     98          extern void            fputc(FILE* filePtr, char c);
     99          extern void            fputLine(FILE* filePtr, const char* str);
    100          extern void            fupLoad( void );
    101          extern int             fgetc(FILE* filePtr);
    102          extern void            fgetLine(FILE* filePtr, char* str, int maxLen);
    103          extern void            fdownLoad( void );
    104          extern void            fclose(FILE* filePtr);
    105          extern long            ftell(FILE* filePtr);
    106          //void            Rewind(FILE* filePtr);
    107          extern void            fSetPos(FILE* filePtr, long offset);
    108          extern void            ReleaseCurrFile( void );
    109          extern void            EraseAll( void );
    110          extern void            StartDynamic( void );
    111          extern void            EraseDynamic( void );
    112          extern char                        MemUsage( void );
    113          extern void                        Dir( void );
    114          extern void                        Type( void );
    115          extern void                        TypeA( void );
    116          
    117          #endif
     57          #include "DPOT.h"
      1          /*************************************************************
      2          Fil:            $Id: DPot.h,v 1.2 2003/11/20 22:08:52 Gemensam Exp $
      3          
      4          Beskrivning:    Header fil till DPot.c
      5          
      6          Skapad:         03-11-17
      7          
      8          Ändrad:         $Date: 2003/11/20 22:08:52 $
      9          
     10          Ägare:          Fredrik Hoffman
     11          
     12          
     13          Att göra:
     14          
     15          Kommentarer:
     16          
     17              Varje pot har fyra nonvolatile register. Dessa definieras härmed enligt följande:
     18              *   0 = Zero Wiper  = 0
     19              *   1 = Variable Wiper  = ?
     20              *   2 = Oanvänd = X
     21              *   3 = Full Wiper = 255
     22              Vid initialiseringen skall värden för Zero och Full skrivas in i NV-registererna
     23              Sedan skall Wiper på alla pottar sättas till Zero.
     24          
     25          Revisionshistoria:
     26                                          $Log: DPot.h,v $
     27                                          Revision 1.2  2003/11/20 22:08:52  Gemensam
     28                                          Various declarations changes.
     29                                          Still version 0200.
     30                                          
     31                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     32                                          Added menu option of setting speaker volume (untested)
     33                                          Completely changed header files
     34                                          Version 0200.
     35                                          
     36          
     37          *************************************************************/
     38          
     39          #ifndef _DPOT_INCLUDED_
     40          #define _DPOT_INCLUDED_
     41          
     42          ///////////////////////////////////
     43          // Definitioner
     44          
     45          #define DPCL    P3.3
     46          #define DPDA    P3.4
     47           
     48          #define POT_PHONE_OUT   0x00
     49          #define POT_PHONE_IN    0x03
     50          #define POT_SPEAKER     0x01
     51          #define POT_DTMF        0x02
     52          
     53          #define DEFAULT_SPEAKER_VOLUME  50
     54          
     55          ///////////////////////////////////
     56          // Funktioner och procedurer
     57          
     58          extern void    InitializeDPot( void );
     59          extern void    RPWait( void );
     60          extern char    WOEPB(char dat);
     61          extern char    ROEPB(char ack);
     62          extern char    SetDPWiper(char pot, char value);
     63          extern char    ReadDPWiper(char pot, char* dat);
     64           
     65          extern void    SpeakerVolume(char volume);
     66          extern void    PhoneInVolume(char volume);
     67          extern void    PhoneOutVolume(char volume);
     68          extern void    DTMFVolume(char volume);
     69          
     70          #endif
     58          
     59          
     60          //////////////////////
     61          // Globala variabler
     62          
     63          extern xdata int        numOfCalls;
     64          extern xdata char       speakerVolume;
     65          extern xdata int        lastPlayed;                     //Kronologindexerad
     66          
     67          
     68          //////////////////////
     69          // Lokala variabler
     70          
     71          xdata char                      theScreen[42*8]; 
     72          xdata char                      xPos;
     73          xdata char                      yPos;
     74          
     75          //statiska variabler för DispLog:
     76          xdata unsigned int  cursorPos;      //Aktuell position på markören, 0 = äldsta samtal, 1 näst äldsta osv (samtalindexerat)
     77          xdata unsigned int  dispStart;      //Det överst synliga samtalet (samtalsindexerat)
     78          xdata unsigned int  dispBuffStart;  //Det översta samtalet i dispBuffer (samtalsindexerat)
     79          xdata unsigned int  dispBuffEnd;    //Den sista raden i dispBuffer som innehåller
     80                                              //ett legalt samtal
     81          // MAO: Om dispBuffEnd < DISPBUFFERSIZE så gäller att:
     82          // dispBuffStart + dispBuffEnd = är det äldsta samtalet i hela logfilen
     83          // dispBuffStart + dispBuffEnd = är alltid det äldsta samtalet i dispBuffer
     84          // dispBuffEnd kan aldrig vara större DISPBUFFERSIZE
     85          xdata char          dispBuffer[DISPBUFFERSIZE * DISPCALLSIZE];  //Displaybuffern (ca 2 kByte)
     86          
     87          xdata int           optionCursorPos; //Markören position i "options" menyn
     88           
     89          
     90          //////////////////////
     91          // Kod
     92          
     93          void    InitializeLCD( void )
     94          {            
   \   0000            InitializeLCD:
   \   0000  900000            MOV     DPTR,#$LOCBX InitializeLCD
   \   0003  D0E0              POP     ACC
   \   0005  F0                MOVX    @DPTR,A
   \   0006  A3                INC     DPTR
   \   0007  D0E0              POP     ACC
   \   0009  F0                MOVX    @DPTR,A
     95          //    LCDE0;
     96          
     97              xPos = 0;
   \   000A  E4                CLR     A
   \   000B  900150            MOV     DPTR,#xPos
   \   000E  F0                MOVX    @DPTR,A
     98              yPos = 0;                                                                     
   \   000F  900151            MOV     DPTR,#yPos
   \   0012  F0                MOVX    @DPTR,A
     99          
    100              SetLCDReg(0, 0x30);
   \   0013  7D30              MOV     R5,#48
   \   0015  FC                MOV     R4,A
   \   0016  120000            LCALL   $REFFN SetLCDReg
    101              SetLCDReg(1, 0x75);
   \   0019  7D75              MOV     R5,#117
   \   001B  7C01              MOV     R4,#1
   \   001D  120000            LCALL   $REFFN SetLCDReg
    102              SetLCDReg(2, 40);
   \   0020  7D28              MOV     R5,#40
   \   0022  7C02              MOV     R4,#2
   \   0024  120000            LCALL   $REFFN SetLCDReg
    103              SetLCDReg(3, 63);
   \   0027  7D3F              MOV     R5,#63
   \   0029  7C03              MOV     R4,#3
   \   002B  120000            LCALL   $REFFN SetLCDReg
    104              SetLCDReg(4, 0x07);
   \   002E  7D07              MOV     R5,#7
   \   0030  7C04              MOV     R4,#4
   \   0032  120000            LCALL   $REFFN SetLCDReg
    105              SetLCDReg(8, 0x00);
   \   0035  7D00              MOV     R5,#0
   \   0037  7C08              MOV     R4,#8
   \   0039  120000            LCALL   $REFFN SetLCDReg
    106              SetLCDReg(9, 0x00);
   \   003C  7D00              MOV     R5,#0
   \   003E  7C09              MOV     R4,#9
   \   0040  120000            LCALL   $REFFN SetLCDReg
    107              SetLCDReg(10, 0x00);
   \   0043  7D00              MOV     R5,#0
   \   0045  7C0A              MOV     R4,#10
   \   0047  120000            LCALL   $REFFN SetLCDReg
    108              SetLCDReg(11, 0x00);
   \   004A  7D00              MOV     R5,#0
   \   004C  7C0B              MOV     R4,#11
   \   004E  120000            LCALL   $REFFN SetLCDReg
    109          
    110              cursorPos = 0;
   \   0051  900152            MOV     DPTR,#cursorPos
   \   0054  E4                CLR     A
   \   0055  F0                MOVX    @DPTR,A
   \   0056  A3                INC     DPTR
   \   0057  F0                MOVX    @DPTR,A
    111              dispStart = 0;
   \   0058  900154            MOV     DPTR,#dispStart
   \   005B  F0                MOVX    @DPTR,A
   \   005C  A3                INC     DPTR
   \   005D  F0                MOVX    @DPTR,A
    112              dispBuffStart = 0;
   \   005E  900156            MOV     DPTR,#dispBuffStart
   \   0061  F0                MOVX    @DPTR,A
   \   0062  A3                INC     DPTR
   \   0063  F0                MOVX    @DPTR,A
    113          
    114              optionCursorPos = 0;
   \   0064  90092A            MOV     DPTR,#optionCursorPos
   \   0067  F0                MOVX    @DPTR,A
   \   0068  A3                INC     DPTR
   \   0069  F0                MOVX    @DPTR,A
    115              
    116              ClearDisp();
   \   006A  120000            LCALL   $REFFN ClearDisp
    117          }
   \   006D  900000            MOV     DPTR,#$LOCBX InitializeLCD
   \   0070  E0                MOVX    A,@DPTR
   \   0071  F8                MOV     R0,A
   \   0072  A3                INC     DPTR
   \   0073  E0                MOVX    A,@DPTR
   \   0074  C0E0              PUSH    ACC
   \   0076  E8                MOV     A,R0
   \   0077  C0E0              PUSH    ACC
   \   0079  22                RET
    118          
    119          void    SetLCDReg(char regNr, char d)
    120          {
   \   007A            SetLCDReg:
   \   007A  ED                MOV     A,R5
   \   007B  900000            MOV     DPTR,#$LOCBX SetLCDReg+1
   \   007E  F0                MOVX    @DPTR,A
   \   007F  EC                MOV     A,R4
   \   0080  900000            MOV     DPTR,#$LOCBX SetLCDReg
   \   0083  F0                MOVX    @DPTR,A
   \   0084            ?0001:
    121              while (LCD_BUSY & 0x80) { WDT = 1; SWDT = 1; }
   \   0084  908001            MOV     DPTR,#32769
   \   0087  E0                MOVX    A,@DPTR
   \   0088  30E706            JNB     ACC.7,?0000
   \   008B            ?0002:
   \   008B  D2AE              SETB    IE.6
   \   008D  D2BE              SETB    IP.6
   \   008F  80F3              SJMP    ?0001
   \   0091            ?0000:
    122              LCD_INSTR = regNr;
   \   0091  900000            MOV     DPTR,#$LOCBX SetLCDReg
   \   0094  E0                MOVX    A,@DPTR
   \   0095  908001            MOV     DPTR,#32769
   \   0098  F0                MOVX    @DPTR,A
    123              LCD_DATA = d;
   \   0099  900000            MOV     DPTR,#$LOCBX SetLCDReg+1
   \   009C  E0                MOVX    A,@DPTR
   \   009D  908000            MOV     DPTR,#32768
   \   00A0  F0                MOVX    @DPTR,A
    124          }
   \   00A1  22                RET
    125          
    126          
    127          void    ClearDisp( void )
    128          {
   \   00A2            ClearDisp:
   \   00A2  900000            MOV     DPTR,#$LOCBX ClearDisp+2
   \   00A5  D0E0              POP     ACC
   \   00A7  F0                MOVX    @DPTR,A
   \   00A8  A3                INC     DPTR
   \   00A9  D0E0              POP     ACC
   \   00AB  F0                MOVX    @DPTR,A
    129              xdata char i, j;
    130          
    131              SetLCDReg(10, 0x00);
   \   00AC  7D00              MOV     R5,#0
   \   00AE  7C0A              MOV     R4,#10
   \   00B0  120000            LCALL   $REFFN SetLCDReg
    132              SetLCDReg(11, 0x00);
   \   00B3  7D00              MOV     R5,#0
   \   00B5  7C0B              MOV     R4,#11
   \   00B7  120000            LCALL   $REFFN SetLCDReg
    133              
    134              for (i = 0 ; i<42 ; i++) {
   \   00BA  E4                CLR     A
   \   00BB  900000            MOV     DPTR,#$LOCBX ClearDisp
   \   00BE  F0                MOVX    @DPTR,A
   \   00BF            ?0004:
   \   00BF  900000            MOV     DPTR,#$LOCBX ClearDisp
   \   00C2  E0                MOVX    A,@DPTR
   \   00C3  24D6              ADD     A,#214
   \   00C5  4022              JC      ?0003
   \   00C7            ?0005:
    135                  for (j=0 ; j<8 ; j++) {
   \   00C7  E4                CLR     A
   \   00C8  A3                INC     DPTR
   \   00C9  F0                MOVX    @DPTR,A
   \   00CA            ?0008:
   \   00CA  900000            MOV     DPTR,#$LOCBX ClearDisp+1
   \   00CD  E0                MOVX    A,@DPTR
   \   00CE  24F8              ADD     A,#248
   \   00D0  400F              JC      ?0007
   \   00D2            ?0009:
    136                      SetLCDReg(12, ' ');
   \   00D2  7D20              MOV     R5,#32
   \   00D4  7C0C              MOV     R4,#12
   \   00D6  120000            LCALL   $REFFN SetLCDReg
    137                  }
   \   00D9  900000            MOV     DPTR,#$LOCBX ClearDisp+1
   \   00DC  E0                MOVX    A,@DPTR
   \   00DD  04                INC     A
   \   00DE  F0                MOVX    @DPTR,A
    138              }
   \   00DF  80E9              SJMP    ?0008
   \   00E1            ?0007:
   \   00E1  900000            MOV     DPTR,#$LOCBX ClearDisp
   \   00E4  E0                MOVX    A,@DPTR
   \   00E5  04                INC     A
   \   00E6  F0                MOVX    @DPTR,A
    139          }
   \   00E7  80D6              SJMP    ?0004
   \   00E9            ?0003:
   \   00E9  900000            MOV     DPTR,#$LOCBX ClearDisp+2
   \   00EC  E0                MOVX    A,@DPTR
   \   00ED  F8                MOV     R0,A
   \   00EE  A3                INC     DPTR
   \   00EF  E0                MOVX    A,@DPTR
   \   00F0  C0E0              PUSH    ACC
   \   00F2  E8                MOV     A,R0
   \   00F3  C0E0              PUSH    ACC
   \   00F5  22                RET
    140          
    141          void    DispString(char* str)
    142          {
   \   00F6            DispString:
   \   00F6  900000            MOV     DPTR,#$LOCBX DispString+2
   \   00F9  D0E0              POP     ACC
   \   00FB  F0                MOVX    @DPTR,A
   \   00FC  A3                INC     DPTR
   \   00FD  D0E0              POP     ACC
   \   00FF  F0                MOVX    @DPTR,A
    143              char    i;
    144              char    len = 0;
   \   0100  E4                CLR     A
   \   0101  900000            MOV     DPTR,#$LOCBX DispString+1
   \   0104  F0                MOVX    @DPTR,A
   \   0105  900000            MOV     DPTR,#$LOCBX DispString+4
   \   0108  EF                MOV     A,R7
   \   0109  F0                MOVX    @DPTR,A
   \   010A  A3                INC     DPTR
   \   010B  EE                MOV     A,R6
   \   010C  F0                MOVX    @DPTR,A
   \   010D  A3                INC     DPTR
   \   010E  ED                MOV     A,R5
   \   010F  F0                MOVX    @DPTR,A
   \   0110            ?0012:
    145                   
    146              while (str[len++] != 0);
   \   0110  900000            MOV     DPTR,#$LOCBX DispString+4
   \   0113  E0                MOVX    A,@DPTR
   \   0114  FF                MOV     R7,A
   \   0115  A3                INC     DPTR
   \   0116  E0                MOVX    A,@DPTR
   \   0117  FE                MOV     R6,A
   \   0118  A3                INC     DPTR
   \   0119  E0                MOVX    A,@DPTR
   \   011A  FD                MOV     R5,A
   \   011B  900000            MOV     DPTR,#$LOCBX DispString+1
   \   011E  E0                MOVX    A,@DPTR
   \   011F  FC                MOV     R4,A
   \   0120  04                INC     A
   \   0121  F0                MOVX    @DPTR,A
   \   0122  8C82              MOV     DPL,R4
   \   0124  758300            MOV     DPH,#0
   \   0127  120000            LCALL   ?LD_A_R567_DISP_L17
   \   012A  6002              JZ      ?0011
   \   012C            ?0013:
   \   012C  80E2              SJMP    ?0012
   \   012E            ?0011:
    147          
    148              len--;
   \   012E  900000            MOV     DPTR,#$LOCBX DispString+1
   \   0131  E0                MOVX    A,@DPTR
   \   0132  14                DEC     A
   \   0133  F0                MOVX    @DPTR,A
    149              
    150              for (i=0 ; i<len ; i++) SetLCDReg(12, str[i]);
   \   0134  E4                CLR     A
   \   0135  900000            MOV     DPTR,#$LOCBX DispString
   \   0138  F0                MOVX    @DPTR,A
   \   0139            ?0015:
   \   0139  900000            MOV     DPTR,#$LOCBX DispString
   \   013C  E0                MOVX    A,@DPTR
   \   013D  FC                MOV     R4,A
   \   013E  A3                INC     DPTR
   \   013F  E0                MOVX    A,@DPTR
   \   0140  D3                SETB    C
   \   0141  9C                SUBB    A,R4
   \   0142  4021              JC      ?0014
   \   0144            ?0016:
   \   0144  900000            MOV     DPTR,#$LOCBX DispString+4
   \   0147  E0                MOVX    A,@DPTR
   \   0148  FF                MOV     R7,A
   \   0149  A3                INC     DPTR
   \   014A  E0                MOVX    A,@DPTR
   \   014B  FE                MOV     R6,A
   \   014C  A3                INC     DPTR
   \   014D  E0                MOVX    A,@DPTR
   \   014E  FD                MOV     R5,A
   \   014F  8C82              MOV     DPL,R4
   \   0151  758300            MOV     DPH,#0
   \   0154  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0157  FD                MOV     R5,A
   \   0158  7C0C              MOV     R4,#12
   \   015A  120000            LCALL   $REFFN SetLCDReg
    151          }
   \   015D  900000            MOV     DPTR,#$LOCBX DispString
   \   0160  E0                MOVX    A,@DPTR
   \   0161  04                INC     A
   \   0162  F0                MOVX    @DPTR,A
   \   0163  80D4              SJMP    ?0015
   \   0165            ?0014:
   \   0165  900000            MOV     DPTR,#$LOCBX DispString+2
   \   0168  E0                MOVX    A,@DPTR
   \   0169  F8                MOV     R0,A
   \   016A  A3                INC     DPTR
   \   016B  E0                MOVX    A,@DPTR
   \   016C  C0E0              PUSH    ACC
   \   016E  E8                MOV     A,R0
   \   016F  C0E0              PUSH    ACC
   \   0171  22                RET
    152          
    153          void DispInfoBox(char* str1, char* str2)
    154          //Visar en alert-box liknande ruta som kan innehålla en enkelradig sträng (str)
    155          {
   \   0172            DispInfoBox:
   \   0172  900000            MOV     DPTR,#$LOCBX DispInfoBox+5
   \   0175  D0E0              POP     ACC
   \   0177  F0                MOVX    @DPTR,A
   \   0178  A3                INC     DPTR
   \   0179  D0E0              POP     ACC
   \   017B  F0                MOVX    @DPTR,A
    156              unsigned char i = 0;
   \   017C  E4                CLR     A
   \   017D  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   0180  F0                MOVX    @DPTR,A
   \   0181  900000            MOV     DPTR,#$LOCBX DispInfoBox+7
   \   0184  EF                MOV     A,R7
   \   0185  F0                MOVX    @DPTR,A
   \   0186  A3                INC     DPTR
   \   0187  EE                MOV     A,R6
   \   0188  F0                MOVX    @DPTR,A
   \   0189  A3                INC     DPTR
   \   018A  ED                MOV     A,R5
   \   018B  F0                MOVX    @DPTR,A
   \   018C            ?0019:
    157              unsigned char len1, len2, len;
    158              unsigned char left;
    159          
    160              while (str1[i++] != 0);
   \   018C  900000            MOV     DPTR,#$LOCBX DispInfoBox+7
   \   018F  E0                MOVX    A,@DPTR
   \   0190  FF                MOV     R7,A
   \   0191  A3                INC     DPTR
   \   0192  E0                MOVX    A,@DPTR
   \   0193  FE                MOV     R6,A
   \   0194  A3                INC     DPTR
   \   0195  E0                MOVX    A,@DPTR
   \   0196  FD                MOV     R5,A
   \   0197  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   019A  E0                MOVX    A,@DPTR
   \   019B  FC                MOV     R4,A
   \   019C  04                INC     A
   \   019D  F0                MOVX    @DPTR,A
   \   019E  8C82              MOV     DPL,R4
   \   01A0  758300            MOV     DPH,#0
   \   01A3  120000            LCALL   ?LD_A_R567_DISP_L17
   \   01A6  6002              JZ      ?0018
   \   01A8            ?0020:
   \   01A8  80E2              SJMP    ?0019
   \   01AA            ?0018:
    161              len1 = i;
   \   01AA  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   01AD  E0                MOVX    A,@DPTR
   \   01AE  A3                INC     DPTR
   \   01AF  F0                MOVX    @DPTR,A
    162           
    163           
    164              i = 0;
   \   01B0  E4                CLR     A
   \   01B1  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   01B4  F0                MOVX    @DPTR,A
   \   01B5            ?0022:
    165           
    166              while (str2[i++] != 0);
   \   01B5  900000            MOV     DPTR,#$LOCBX DispInfoBox+10
   \   01B8  E0                MOVX    A,@DPTR
   \   01B9  FF                MOV     R7,A
   \   01BA  A3                INC     DPTR
   \   01BB  E0                MOVX    A,@DPTR
   \   01BC  FE                MOV     R6,A
   \   01BD  A3                INC     DPTR
   \   01BE  E0                MOVX    A,@DPTR
   \   01BF  FD                MOV     R5,A
   \   01C0  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   01C3  E0                MOVX    A,@DPTR
   \   01C4  FC                MOV     R4,A
   \   01C5  04                INC     A
   \   01C6  F0                MOVX    @DPTR,A
   \   01C7  8C82              MOV     DPL,R4
   \   01C9  758300            MOV     DPH,#0
   \   01CC  120000            LCALL   ?LD_A_R567_DISP_L17
   \   01CF  6002              JZ      ?0021
   \   01D1            ?0023:
   \   01D1  80E2              SJMP    ?0022
   \   01D3            ?0021:
    167              len2 = i;
   \   01D3  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   01D6  E0                MOVX    A,@DPTR
   \   01D7  A3                INC     DPTR
   \   01D8  A3                INC     DPTR
   \   01D9  F0                MOVX    @DPTR,A
    168              
    169              if (len1 > len2) len = len1 + 2;
   \   01DA  900000            MOV     DPTR,#$LOCBX DispInfoBox+1
   \   01DD  E0                MOVX    A,@DPTR
   \   01DE  FC                MOV     R4,A
   \   01DF  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   01E2  E0                MOVX    A,@DPTR
   \   01E3  C3                CLR     C
   \   01E4  9C                SUBB    A,R4
   \   01E5  5009              JNC     ?0025
   \   01E7            ?0024:
   \   01E7  0C                INC     R4
   \   01E8  0C                INC     R4
   \   01E9  EC                MOV     A,R4
   \   01EA  900000            MOV     DPTR,#$LOCBX DispInfoBox+3
   \   01ED  F0                MOVX    @DPTR,A
   \   01EE  8007              SJMP    ?0026
   \   01F0            ?0025:
    170              else len = len2 + 2;
   \   01F0  A3                INC     DPTR
   \   01F1  A3                INC     DPTR
   \   01F2  E0                MOVX    A,@DPTR
   \   01F3  2402              ADD     A,#2
   \   01F5  A3                INC     DPTR
   \   01F6  F0                MOVX    @DPTR,A
   \   01F7            ?0026:
    171              
    172              left = 20 - len / 2;
   \   01F7  C3                CLR     C
   \   01F8  13                RRC     A
   \   01F9  F4                CPL     A
   \   01FA  2415              ADD     A,#21
    173              
    174              WDT = 1;
   \   01FC  D2AE              SETB    IE.6
    175              SWDT = 1;
   \   01FE  D2BE              SETB    IP.6
    176           
    177              SetLCDReg(10, 42+left);
   \   0200  A3                INC     DPTR
   \   0201  F0                MOVX    @DPTR,A
   \   0202  242A              ADD     A,#42
   \   0204  FD                MOV     R5,A
   \   0205  7C0A              MOV     R4,#10
   \   0207  120000            LCALL   $REFFN SetLCDReg
    178              SetLCDReg(11, 0x00);
   \   020A  7D00              MOV     R5,#0
   \   020C  7C0B              MOV     R4,#11
   \   020E  120000            LCALL   $REFFN SetLCDReg
    179              
    180              SetLCDReg(12, '+');
   \   0211  7D2B              MOV     R5,#43
   \   0213  7C0C              MOV     R4,#12
   \   0215  120000            LCALL   $REFFN SetLCDReg
    181              for (i=0 ; i<len ; i++) SetLCDReg(12, '-');
   \   0218  E4                CLR     A
   \   0219  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   021C  F0                MOVX    @DPTR,A
   \   021D            ?0028:
   \   021D  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   0220  E0                MOVX    A,@DPTR
   \   0221  FC                MOV     R4,A
   \   0222  900000            MOV     DPTR,#$LOCBX DispInfoBox+3
   \   0225  E0                MOVX    A,@DPTR
   \   0226  D3                SETB    C
   \   0227  9C                SUBB    A,R4
   \   0228  400F              JC      ?0027
   \   022A            ?0029:
   \   022A  7D2D              MOV     R5,#45
   \   022C  7C0C              MOV     R4,#12
   \   022E  120000            LCALL   $REFFN SetLCDReg
   \   0231  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   0234  E0                MOVX    A,@DPTR
   \   0235  04                INC     A
   \   0236  F0                MOVX    @DPTR,A
   \   0237  80E4              SJMP    ?0028
   \   0239            ?0027:
    182              SetLCDReg(12, '+');
   \   0239  7D2B              MOV     R5,#43
   \   023B  7C0C              MOV     R4,#12
   \   023D  120000            LCALL   $REFFN SetLCDReg
    183              
    184              WDT = 1;
   \   0240  D2AE              SETB    IE.6
    185              SWDT = 1;
   \   0242  D2BE              SETB    IP.6
    186          
    187              SetLCDReg(10, 84+left);
   \   0244  900000            MOV     DPTR,#$LOCBX DispInfoBox+4
   \   0247  E0                MOVX    A,@DPTR
   \   0248  2454              ADD     A,#84
   \   024A  FD                MOV     R5,A
   \   024B  7C0A              MOV     R4,#10
   \   024D  120000            LCALL   $REFFN SetLCDReg
    188              SetLCDReg(11, 0x00);
   \   0250  7D00              MOV     R5,#0
   \   0252  7C0B              MOV     R4,#11
   \   0254  120000            LCALL   $REFFN SetLCDReg
    189              
    190              SetLCDReg(12, '|');
   \   0257  7D7C              MOV     R5,#124
   \   0259  7C0C              MOV     R4,#12
   \   025B  120000            LCALL   $REFFN SetLCDReg
    191              SetLCDReg(12, ' '); 
   \   025E  7D20              MOV     R5,#32
   \   0260  7C0C              MOV     R4,#12
   \   0262  120000            LCALL   $REFFN SetLCDReg
    192              for (i=0 ; i<len1 ; i++) SetLCDReg(12, str1[i]);
   \   0265  E4                CLR     A
   \   0266  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   0269  F0                MOVX    @DPTR,A
   \   026A            ?0032:
   \   026A  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   026D  E0                MOVX    A,@DPTR
   \   026E  FC                MOV     R4,A
   \   026F  A3                INC     DPTR
   \   0270  E0                MOVX    A,@DPTR
   \   0271  D3                SETB    C
   \   0272  9C                SUBB    A,R4
   \   0273  4021              JC      ?0031
   \   0275            ?0033:
   \   0275  900000            MOV     DPTR,#$LOCBX DispInfoBox+7
   \   0278  E0                MOVX    A,@DPTR
   \   0279  FF                MOV     R7,A
   \   027A  A3                INC     DPTR
   \   027B  E0                MOVX    A,@DPTR
   \   027C  FE                MOV     R6,A
   \   027D  A3                INC     DPTR
   \   027E  E0                MOVX    A,@DPTR
   \   027F  FD                MOV     R5,A
   \   0280  8C82              MOV     DPL,R4
   \   0282  758300            MOV     DPH,#0
   \   0285  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0288  FD                MOV     R5,A
   \   0289  7C0C              MOV     R4,#12
   \   028B  120000            LCALL   $REFFN SetLCDReg
   \   028E  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   0291  E0                MOVX    A,@DPTR
   \   0292  04                INC     A
   \   0293  F0                MOVX    @DPTR,A
   \   0294  80D4              SJMP    ?0032
   \   0296            ?0031:
   \   0296            ?0036:
    193              for ( ; i<len-1 ; i++) SetLCDReg(12, ' ');
   \   0296  900000            MOV     DPTR,#$LOCBX DispInfoBox+3
   \   0299  E0                MOVX    A,@DPTR
   \   029A  24FF              ADD     A,#255
   \   029C  FC                MOV     R4,A
   \   029D  E4                CLR     A
   \   029E  34FF              ADDC    A,#255
   \   02A0  FD                MOV     R5,A
   \   02A1  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   02A4  E0                MOVX    A,@DPTR
   \   02A5  7F00              MOV     R7,#0
   \   02A7  FE                MOV     R6,A
   \   02A8  EC                MOV     A,R4
   \   02A9  D3                SETB    C
   \   02AA  9E                SUBB    A,R6
   \   02AB  EF                MOV     A,R7
   \   02AC  6480              XRL     A,#128
   \   02AE  CD                XCH     A,R5
   \   02AF  6480              XRL     A,#128
   \   02B1  9D                SUBB    A,R5
   \   02B2  400F              JC      ?0035
   \   02B4            ?0037:
   \   02B4  7D20              MOV     R5,#32
   \   02B6  7C0C              MOV     R4,#12
   \   02B8  120000            LCALL   $REFFN SetLCDReg
   \   02BB  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   02BE  E0                MOVX    A,@DPTR
   \   02BF  04                INC     A
   \   02C0  F0                MOVX    @DPTR,A
   \   02C1  80D3              SJMP    ?0036
   \   02C3            ?0035:
    194              SetLCDReg(12, '|');
   \   02C3  7D7C              MOV     R5,#124
   \   02C5  7C0C              MOV     R4,#12
   \   02C7  120000            LCALL   $REFFN SetLCDReg
    195              
    196              WDT = 1;
   \   02CA  D2AE              SETB    IE.6
    197              SWDT = 1;
   \   02CC  D2BE              SETB    IP.6
    198          
    199              SetLCDReg(10, 126+left);
   \   02CE  900000            MOV     DPTR,#$LOCBX DispInfoBox+4
   \   02D1  E0                MOVX    A,@DPTR
   \   02D2  247E              ADD     A,#126
   \   02D4  FD                MOV     R5,A
   \   02D5  7C0A              MOV     R4,#10
   \   02D7  120000            LCALL   $REFFN SetLCDReg
    200              SetLCDReg(11, 0x00);
   \   02DA  7D00              MOV     R5,#0
   \   02DC  7C0B              MOV     R4,#11
   \   02DE  120000            LCALL   $REFFN SetLCDReg
    201              
    202              SetLCDReg(12, '|');  
   \   02E1  7D7C              MOV     R5,#124
   \   02E3  7C0C              MOV     R4,#12
   \   02E5  120000            LCALL   $REFFN SetLCDReg
    203              SetLCDReg(12, ' '); 
   \   02E8  7D20              MOV     R5,#32
   \   02EA  7C0C              MOV     R4,#12
   \   02EC  120000            LCALL   $REFFN SetLCDReg
    204              for (i=0 ; i<len2 ; i++) SetLCDReg(12, str2[i]);
   \   02EF  E4                CLR     A
   \   02F0  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   02F3  F0                MOVX    @DPTR,A
   \   02F4            ?0040:
   \   02F4  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   02F7  E0                MOVX    A,@DPTR
   \   02F8  FC                MOV     R4,A
   \   02F9  A3                INC     DPTR
   \   02FA  A3                INC     DPTR
   \   02FB  E0                MOVX    A,@DPTR
   \   02FC  D3                SETB    C
   \   02FD  9C                SUBB    A,R4
   \   02FE  4021              JC      ?0039
   \   0300            ?0041:
   \   0300  900000            MOV     DPTR,#$LOCBX DispInfoBox+10
   \   0303  E0                MOVX    A,@DPTR
   \   0304  FF                MOV     R7,A
   \   0305  A3                INC     DPTR
   \   0306  E0                MOVX    A,@DPTR
   \   0307  FE                MOV     R6,A
   \   0308  A3                INC     DPTR
   \   0309  E0                MOVX    A,@DPTR
   \   030A  FD                MOV     R5,A
   \   030B  8C82              MOV     DPL,R4
   \   030D  758300            MOV     DPH,#0
   \   0310  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0313  FD                MOV     R5,A
   \   0314  7C0C              MOV     R4,#12
   \   0316  120000            LCALL   $REFFN SetLCDReg
   \   0319  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   031C  E0                MOVX    A,@DPTR
   \   031D  04                INC     A
   \   031E  F0                MOVX    @DPTR,A
   \   031F  80D3              SJMP    ?0040
   \   0321            ?0039:
   \   0321            ?0044:
    205              for ( ; i<len-1 ; i++) SetLCDReg(12, ' ');
   \   0321  900000            MOV     DPTR,#$LOCBX DispInfoBox+3
   \   0324  E0                MOVX    A,@DPTR
   \   0325  24FF              ADD     A,#255
   \   0327  FC                MOV     R4,A
   \   0328  E4                CLR     A
   \   0329  34FF              ADDC    A,#255
   \   032B  FD                MOV     R5,A
   \   032C  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   032F  E0                MOVX    A,@DPTR
   \   0330  7F00              MOV     R7,#0
   \   0332  FE                MOV     R6,A
   \   0333  EC                MOV     A,R4
   \   0334  D3                SETB    C
   \   0335  9E                SUBB    A,R6
   \   0336  EF                MOV     A,R7
   \   0337  6480              XRL     A,#128
   \   0339  CD                XCH     A,R5
   \   033A  6480              XRL     A,#128
   \   033C  9D                SUBB    A,R5
   \   033D  400F              JC      ?0043
   \   033F            ?0045:
   \   033F  7D20              MOV     R5,#32
   \   0341  7C0C              MOV     R4,#12
   \   0343  120000            LCALL   $REFFN SetLCDReg
   \   0346  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   0349  E0                MOVX    A,@DPTR
   \   034A  04                INC     A
   \   034B  F0                MOVX    @DPTR,A
   \   034C  80D3              SJMP    ?0044
   \   034E            ?0043:
    206              SetLCDReg(12, '|');
   \   034E  7D7C              MOV     R5,#124
   \   0350  7C0C              MOV     R4,#12
   \   0352  120000            LCALL   $REFFN SetLCDReg
    207              
    208              WDT = 1;
   \   0355  D2AE              SETB    IE.6
    209              SWDT = 1;
   \   0357  D2BE              SETB    IP.6
    210          
    211              SetLCDReg(10, 168+left);
   \   0359  900000            MOV     DPTR,#$LOCBX DispInfoBox+4
   \   035C  E0                MOVX    A,@DPTR
   \   035D  24A8              ADD     A,#168
   \   035F  FD                MOV     R5,A
   \   0360  7C0A              MOV     R4,#10
   \   0362  120000            LCALL   $REFFN SetLCDReg
    212              SetLCDReg(11, 0x00);
   \   0365  7D00              MOV     R5,#0
   \   0367  7C0B              MOV     R4,#11
   \   0369  120000            LCALL   $REFFN SetLCDReg
    213              
    214              SetLCDReg(12, '+');
   \   036C  7D2B              MOV     R5,#43
   \   036E  7C0C              MOV     R4,#12
   \   0370  120000            LCALL   $REFFN SetLCDReg
    215              for (i=0 ; i<len ; i++) SetLCDReg(12, '-');
   \   0373  E4                CLR     A
   \   0374  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   0377  F0                MOVX    @DPTR,A
   \   0378            ?0048:
   \   0378  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   037B  E0                MOVX    A,@DPTR
   \   037C  FC                MOV     R4,A
   \   037D  900000            MOV     DPTR,#$LOCBX DispInfoBox+3
   \   0380  E0                MOVX    A,@DPTR
   \   0381  D3                SETB    C
   \   0382  9C                SUBB    A,R4
   \   0383  400F              JC      ?0047
   \   0385            ?0049:
   \   0385  7D2D              MOV     R5,#45
   \   0387  7C0C              MOV     R4,#12
   \   0389  120000            LCALL   $REFFN SetLCDReg
   \   038C  900000            MOV     DPTR,#$LOCBX DispInfoBox
   \   038F  E0                MOVX    A,@DPTR
   \   0390  04                INC     A
   \   0391  F0                MOVX    @DPTR,A
   \   0392  80E4              SJMP    ?0048
   \   0394            ?0047:
    216              SetLCDReg(12, '+');
   \   0394  7D2B              MOV     R5,#43
   \   0396  7C0C              MOV     R4,#12
   \   0398  120000            LCALL   $REFFN SetLCDReg
    217          
    218              WDT = 1;
   \   039B  D2AE              SETB    IE.6
    219              SWDT = 1;
   \   039D  D2BE              SETB    IP.6
    220          }    
   \   039F  900000            MOV     DPTR,#$LOCBX DispInfoBox+5
   \   03A2  E0                MOVX    A,@DPTR
   \   03A3  F8                MOV     R0,A
   \   03A4  A3                INC     DPTR
   \   03A5  E0                MOVX    A,@DPTR
   \   03A6  C0E0              PUSH    ACC
   \   03A8  E8                MOV     A,R0
   \   03A9  C0E0              PUSH    ACC
   \   03AB  22                RET
    221              
    222          
    223          void    WriteClipToMem(char* str, int maxLen, char* adr)
    224          {          
   \   03AC            WriteClipToMem:
    225              xdata int i = 0;  
    226          
    227              for (i=0 ; (i<maxLen) && (str[i] != 0) ; i++) {
   \   03AC  900000            MOV     DPTR,#$LOCBX WriteClipToMem
   \   03AF  E4                CLR     A
   \   03B0  F0                MOVX    @DPTR,A
   \   03B1  A3                INC     DPTR
   \   03B2  F0                MOVX    @DPTR,A
   \   03B3  A3                INC     DPTR
   \   03B4  EF                MOV     A,R7
   \   03B5  F0                MOVX    @DPTR,A
   \   03B6  A3                INC     DPTR
   \   03B7  EE                MOV     A,R6
   \   03B8  F0                MOVX    @DPTR,A
   \   03B9  A3                INC     DPTR
   \   03BA  ED                MOV     A,R5
   \   03BB  F0                MOVX    @DPTR,A
   \   03BC            ?0052:
   \   03BC  900000            MOV     DPTR,#$LOCBX WriteClipToMem
   \   03BF  E0                MOVX    A,@DPTR
   \   03C0  FD                MOV     R5,A
   \   03C1  A3                INC     DPTR
   \   03C2  E0                MOVX    A,@DPTR
   \   03C3  FC                MOV     R4,A
   \   03C4  900000            MOV     DPTR,#$LOCBX WriteClipToMem+6
   \   03C7  E0                MOVX    A,@DPTR
   \   03C8  D3                SETB    C
   \   03C9  9C                SUBB    A,R4
   \   03CA  900000            MOV     DPTR,#$LOCBX WriteClipToMem+5
   \   03CD  E0                MOVX    A,@DPTR
   \   03CE  6480              XRL     A,#128
   \   03D0  CD                XCH     A,R5
   \   03D1  6480              XRL     A,#128
   \   03D3  CD                XCH     A,R5
   \   03D4  9D                SUBB    A,R5
   \   03D5  4059              JC      ?0051
   \   03D7  900000            MOV     DPTR,#$LOCBX WriteClipToMem+2
   \   03DA  E0                MOVX    A,@DPTR
   \   03DB  FF                MOV     R7,A
   \   03DC  A3                INC     DPTR
   \   03DD  E0                MOVX    A,@DPTR
   \   03DE  FE                MOV     R6,A
   \   03DF  A3                INC     DPTR
   \   03E0  E0                MOVX    A,@DPTR
   \   03E1  FD                MOV     R5,A
   \   03E2  900000            MOV     DPTR,#$LOCBX WriteClipToMem
   \   03E5  E0                MOVX    A,@DPTR
   \   03E6  FC                MOV     R4,A
   \   03E7  A3                INC     DPTR
   \   03E8  E0                MOVX    A,@DPTR
   \   03E9  F582              MOV     DPL,A
   \   03EB  8C83              MOV     DPH,R4
   \   03ED  120000            LCALL   ?LD_A_R567_DISP_L17
   \   03F0  603E              JZ      ?0051
   \   03F2            ?0055:
   \   03F2            ?0054:
   \   03F2            ?0053:
    228                  *(adr++) = str[i];
   \   03F2  900000            MOV     DPTR,#$LOCBX WriteClipToMem
   \   03F5  E0                MOVX    A,@DPTR
   \   03F6  A3                INC     DPTR
   \   03F7  E0                MOVX    A,@DPTR
   \   03F8  F582              MOV     DPL,A
   \   03FA  8C83              MOV     DPH,R4
   \   03FC  120000            LCALL   ?LD_A_R567_DISP_L17
   \   03FF  FC                MOV     R4,A
   \   0400  900000            MOV     DPTR,#$LOCBX WriteClipToMem+7
   \   0403  E0                MOVX    A,@DPTR
   \   0404  FF                MOV     R7,A
   \   0405  A3                INC     DPTR
   \   0406  E0                MOVX    A,@DPTR
   \   0407  FE                MOV     R6,A
   \   0408  C083              PUSH    DPH
   \   040A  A3                INC     DPTR
   \   040B  E0                MOVX    A,@DPTR
   \   040C  FD                MOV     R5,A
   \   040D  04                INC     A
   \   040E  F0                MOVX    @DPTR,A
   \   040F  1582              DEC     DPL
   \   0411  D083              POP     DPH
   \   0413  7003              JNZ     ?0266
   \   0415  EE                MOV     A,R6
   \   0416  04                INC     A
   \   0417  F0                MOVX    @DPTR,A
   \   0418            ?0266:
   \   0418  EC                MOV     A,R4
   \   0419  120000            LCALL   ?ST_A_R567_L17
    229                  WDT = 1;
   \   041C  D2AE              SETB    IE.6
    230                  SWDT = 1;
   \   041E  D2BE              SETB    IP.6
   \   0420  900000            MOV     DPTR,#$LOCBX WriteClipToMem+1
   \   0423  E0                MOVX    A,@DPTR
   \   0424  04                INC     A
   \   0425  F0                MOVX    @DPTR,A
   \   0426  900000            MOV     DPTR,#$LOCBX WriteClipToMem
   \   0429  7003              JNZ     ?0267
   \   042B  E0                MOVX    A,@DPTR
   \   042C  04                INC     A
   \   042D  F0                MOVX    @DPTR,A
   \   042E            ?0267:
    231              }
    232          }
   \   042E  808C              SJMP    ?0052
   \   0430            ?0051:
   \   0430  22                RET
    233          
    234          
    235          
    236          //-----------------------------------------------------
    237          //  DispLog
    238          
    239           
    240            
    241            
    242          void LogCursorAt(int newCursorPos, char updateAlways)
    243          // Flyttar markören till angiven rad "newCursorPos" som är antal telefonnummer (samtalindexerad). 
    244          {
   \   0431            LogCursorAt:
   \   0431  900000            MOV     DPTR,#$LOCBX LogCursorAt+8
   \   0434  D0E0              POP     ACC
   \   0436  F0                MOVX    @DPTR,A
   \   0437  A3                INC     DPTR
   \   0438  D0E0              POP     ACC
   \   043A  F0                MOVX    @DPTR,A
    245              unsigned int    oldDispStart = dispStart;   //Kom ihåg dispStart
   \   043B  900154            MOV     DPTR,#dispStart
   \   043E  E0                MOVX    A,@DPTR
   \   043F  FB                MOV     R3,A
   \   0440  A3                INC     DPTR
   \   0441  E0                MOVX    A,@DPTR
   \   0442  900000            MOV     DPTR,#$LOCBX LogCursorAt
   \   0445  CB                XCH     A,R3
   \   0446  F0                MOVX    @DPTR,A
   \   0447  A3                INC     DPTR
   \   0448  CB                XCH     A,R3
   \   0449  F0                MOVX    @DPTR,A
    246              int             i, j;
    247              unsigned int    n;
    248          
    249              //Måste dispBuff uppdateras?
    250              if ((newCursorPos < dispBuffStart) || (newCursorPos >= dispBuffStart + dispBuffEnd + 1)) {
   \   044A  EE                MOV     A,R6
   \   044B  900000            MOV     DPTR,#$LOCBX LogCursorAt+12
   \   044E  F0                MOVX    @DPTR,A
   \   044F  900000            MOV     DPTR,#$LOCBX LogCursorAt+10
   \   0452  ED                MOV     A,R5
   \   0453  F0                MOVX    @DPTR,A
   \   0454  A3                INC     DPTR
   \   0455  EC                MOV     A,R4
   \   0456  F0                MOVX    @DPTR,A
   \   0457  900157            MOV     DPTR,#dispBuffStart+1
   \   045A  E0                MOVX    A,@DPTR
   \   045B  D3                SETB    C
   \   045C  9C                SUBB    A,R4
   \   045D  900156            MOV     DPTR,#dispBuffStart
   \   0460  E0                MOVX    A,@DPTR
   \   0461  9D                SUBB    A,R5
   \   0462  5023              JNC     ?0057
   \   0464  E0                MOVX    A,@DPTR
   \   0465  FD                MOV     R5,A
   \   0466  A3                INC     DPTR
   \   0467  E0                MOVX    A,@DPTR
   \   0468  900159            MOV     DPTR,#dispBuffEnd+1
   \   046B  FF                MOV     R7,A
   \   046C  E0                MOVX    A,@DPTR
   \   046D  2F                ADD     A,R7
   \   046E  FC                MOV     R4,A
   \   046F  900158            MOV     DPTR,#dispBuffEnd
   \   0472  E0                MOVX    A,@DPTR
   \   0473  3D                ADDC    A,R5
   \   0474  FD                MOV     R5,A
   \   0475  0C                INC     R4
   \   0476  BC0001            CJNE    R4,#0,?0268
   \   0479  0D                INC     R5
   \   047A            ?0268:
   \   047A  900000            MOV     DPTR,#$LOCBX LogCursorAt+11
   \   047D  E0                MOVX    A,@DPTR
   \   047E  C3                CLR     C
   \   047F  9C                SUBB    A,R4
   \   0480  900000            MOV     DPTR,#$LOCBX LogCursorAt+10
   \   0483  E0                MOVX    A,@DPTR
   \   0484  9D                SUBB    A,R5
   \   0485  404C              JC      ?0058
   \   0487            ?0059:
   \   0487            ?0060:
   \   0487            ?0057:
    251                  //Ja
    252                  //Scrolla uppåt eller nedåt?
    253                  if (newCursorPos > cursorPos) {
   \   0487  900000            MOV     DPTR,#$LOCBX LogCursorAt+10
   \   048A  E0                MOVX    A,@DPTR
   \   048B  FD                MOV     R5,A
   \   048C  A3                INC     DPTR
   \   048D  E0                MOVX    A,@DPTR
   \   048E  FC                MOV     R4,A
   \   048F  900153            MOV     DPTR,#cursorPos+1
   \   0492  E0                MOVX    A,@DPTR
   \   0493  C3                CLR     C
   \   0494  9C                SUBB    A,R4
   \   0495  900152            MOV     DPTR,#cursorPos
   \   0498  E0                MOVX    A,@DPTR
   \   0499  9D                SUBB    A,R5
   \   049A  5011              JNC     ?0062
   \   049C            ?0061:
    254                      //Nedåt
    255                      dispBuffStart = newCursorPos - 5;
   \   049C  EC                MOV     A,R4
   \   049D  24FB              ADD     A,#251
   \   049F  FC                MOV     R4,A
   \   04A0  ED                MOV     A,R5
   \   04A1  34FF              ADDC    A,#255
   \   04A3  900156            MOV     DPTR,#dispBuffStart
   \   04A6  F0                MOVX    @DPTR,A
   \   04A7  A3                INC     DPTR
   \   04A8  CC                XCH     A,R4
   \   04A9  F0                MOVX    @DPTR,A
   \   04AA  CC                XCH     A,R4
    256                  } else {
   \   04AB  8023              SJMP    ?0063
   \   04AD            ?0062:
    257                      //Uppåt          
    258                      if (newCursorPos < DISPBUFFERSIZE) {
   \   04AD  C3                CLR     C
   \   04AE  EC                MOV     A,R4
   \   04AF  9432              SUBB    A,#50
   \   04B1  ED                MOV     A,R5
   \   04B2  6480              XRL     A,#128
   \   04B4  9480              SUBB    A,#128
   \   04B6  5009              JNC     ?0065
   \   04B8            ?0064:
    259                          dispBuffStart = 0;
   \   04B8  900156            MOV     DPTR,#dispBuffStart
   \   04BB  E4                CLR     A
   \   04BC  F0                MOVX    @DPTR,A
   \   04BD  A3                INC     DPTR
   \   04BE  F0                MOVX    @DPTR,A
    260                      } else {
   \   04BF  800F              SJMP    ?0066
   \   04C1            ?0065:
    261                          dispBuffStart = newCursorPos - DISPBUFFERSIZE + 6;
   \   04C1  EC                MOV     A,R4
   \   04C2  24D4              ADD     A,#212
   \   04C4  FC                MOV     R4,A
   \   04C5  ED                MOV     A,R5
   \   04C6  34FF              ADDC    A,#255
   \   04C8  900156            MOV     DPTR,#dispBuffStart
   \   04CB  F0                MOVX    @DPTR,A
   \   04CC  A3                INC     DPTR
   \   04CD  CC                XCH     A,R4
   \   04CE  F0                MOVX    @DPTR,A
   \   04CF  CC                XCH     A,R4
   \   04D0            ?0066:
   \   04D0            ?0063:
    262                      }
    263                  }
    264                  FillDispBuffer();
   \   04D0  120000            LCALL   $REFFN FillDispBuffer
   \   04D3            ?0058:
    265              }            
    266                  
    267              //Måste skärmen uppdateras eller scrollas?
    268              if ((updateAlways) || (newCursorPos < dispStart) || (newCursorPos > dispStart+5)) {
   \   04D3  900000            MOV     DPTR,#$LOCBX LogCursorAt+12
   \   04D6  E0                MOVX    A,@DPTR
   \   04D7  7033              JNZ     ?0067
   \   04D9  900000            MOV     DPTR,#$LOCBX LogCursorAt+10
   \   04DC  E0                MOVX    A,@DPTR
   \   04DD  FD                MOV     R5,A
   \   04DE  A3                INC     DPTR
   \   04DF  E0                MOVX    A,@DPTR
   \   04E0  FC                MOV     R4,A
   \   04E1  900155            MOV     DPTR,#dispStart+1
   \   04E4  E0                MOVX    A,@DPTR
   \   04E5  D3                SETB    C
   \   04E6  9C                SUBB    A,R4
   \   04E7  900154            MOV     DPTR,#dispStart
   \   04EA  E0                MOVX    A,@DPTR
   \   04EB  9D                SUBB    A,R5
   \   04EC  501E              JNC     ?0067
   \   04EE  900155            MOV     DPTR,#dispStart+1
   \   04F1  E0                MOVX    A,@DPTR
   \   04F2  2405              ADD     A,#5
   \   04F4  FC                MOV     R4,A
   \   04F5  900154            MOV     DPTR,#dispStart
   \   04F8  E0                MOVX    A,@DPTR
   \   04F9  3400              ADDC    A,#0
   \   04FB  FD                MOV     R5,A
   \   04FC  900000            MOV     DPTR,#$LOCBX LogCursorAt+11
   \   04FF  E0                MOVX    A,@DPTR
   \   0500  D3                SETB    C
   \   0501  9C                SUBB    A,R4
   \   0502  900000            MOV     DPTR,#$LOCBX LogCursorAt+10
   \   0505  E0                MOVX    A,@DPTR
   \   0506  9D                SUBB    A,R5
   \   0507  5003              JNC     $+5
   \   0509  020630            LJMP    ?0068
   \   050C            ?0069:
   \   050C            ?0070:
   \   050C            ?0067:
    269                  //Måste skärmen scrollas?
    270                  if ((newCursorPos < dispStart) || (newCursorPos > dispStart+5)) {
   \   050C  900000            MOV     DPTR,#$LOCBX LogCursorAt+10
   \   050F  E0                MOVX    A,@DPTR
   \   0510  FD                MOV     R5,A
   \   0511  A3                INC     DPTR
   \   0512  E0                MOVX    A,@DPTR
   \   0513  FC                MOV     R4,A
   \   0514  900155            MOV     DPTR,#dispStart+1
   \   0517  E0                MOVX    A,@DPTR
   \   0518  D3                SETB    C
   \   0519  9C                SUBB    A,R4
   \   051A  900154            MOV     DPTR,#dispStart
   \   051D  E0                MOVX    A,@DPTR
   \   051E  9D                SUBB    A,R5
   \   051F  501B              JNC     ?0071
   \   0521  900155            MOV     DPTR,#dispStart+1
   \   0524  E0                MOVX    A,@DPTR
   \   0525  2405              ADD     A,#5
   \   0527  FC                MOV     R4,A
   \   0528  900154            MOV     DPTR,#dispStart
   \   052B  E0                MOVX    A,@DPTR
   \   052C  3400              ADDC    A,#0
   \   052E  FD                MOV     R5,A
   \   052F  900000            MOV     DPTR,#$LOCBX LogCursorAt+11
   \   0532  E0                MOVX    A,@DPTR
   \   0533  D3                SETB    C
   \   0534  9C                SUBB    A,R4
   \   0535  900000            MOV     DPTR,#$LOCBX LogCursorAt+10
   \   0538  E0                MOVX    A,@DPTR
   \   0539  9D                SUBB    A,R5
   \   053A  402E              JC      ?0072
   \   053C            ?0073:
   \   053C            ?0074:
   \   053C            ?0071:
    271                      //Scrolla till newCursorPos
    272                      //Scrolla uppåt eller nedåt?
    273                      if (newCursorPos > cursorPos) {
   \   053C  900000            MOV     DPTR,#$LOCBX LogCursorAt+10
   \   053F  E0                MOVX    A,@DPTR
   \   0540  FD                MOV     R5,A
   \   0541  A3                INC     DPTR
   \   0542  E0                MOVX    A,@DPTR
   \   0543  FC                MOV     R4,A
   \   0544  900153            MOV     DPTR,#cursorPos+1
   \   0547  E0                MOVX    A,@DPTR
   \   0548  C3                CLR     C
   \   0549  9C                SUBB    A,R4
   \   054A  900152            MOV     DPTR,#cursorPos
   \   054D  E0                MOVX    A,@DPTR
   \   054E  9D                SUBB    A,R5
   \   054F  5011              JNC     ?0076
   \   0551            ?0075:
    274                          //Nedåt
    275                          dispStart = newCursorPos - 5;
   \   0551  EC                MOV     A,R4
   \   0552  24FB              ADD     A,#251
   \   0554  FC                MOV     R4,A
   \   0555  ED                MOV     A,R5
   \   0556  34FF              ADDC    A,#255
   \   0558  900154            MOV     DPTR,#dispStart
   \   055B  F0                MOVX    @DPTR,A
   \   055C  A3                INC     DPTR
   \   055D  CC                XCH     A,R4
   \   055E  F0                MOVX    @DPTR,A
   \   055F  CC                XCH     A,R4
    276                      } else {
   \   0560  8008              SJMP    ?0077
   \   0562            ?0076:
    277                          //Uppåt
    278                          dispStart = newCursorPos;
   \   0562  900154            MOV     DPTR,#dispStart
   \   0565  ED                MOV     A,R5
   \   0566  F0                MOVX    @DPTR,A
   \   0567  A3                INC     DPTR
   \   0568  EC                MOV     A,R4
   \   0569  F0                MOVX    @DPTR,A
   \   056A            ?0077:
   \   056A            ?0072:
    279                      }
    280                  }
    281                  n = (dispStart * DISPCALLSIZE) - (dispBuffStart * DISPCALLSIZE);
   \   056A  900154            MOV     DPTR,#dispStart
   \   056D  E0                MOVX    A,@DPTR
   \   056E  FD                MOV     R5,A
   \   056F  A3                INC     DPTR
   \   0570  E0                MOVX    A,@DPTR
   \   0571  75F028            MOV     B,#40
   \   0574  A4                MUL     AB
   \   0575  FC                MOV     R4,A
   \   0576  E5F0              MOV     A,B
   \   0578  CD                XCH     A,R5
   \   0579  75F028            MOV     B,#40
   \   057C  A4                MUL     AB
   \   057D  2D                ADD     A,R5
   \   057E  FD                MOV     R5,A
   \   057F  900156            MOV     DPTR,#dispBuffStart
   \   0582  E0                MOVX    A,@DPTR
   \   0583  FF                MOV     R7,A
   \   0584  A3                INC     DPTR
   \   0585  E0                MOVX    A,@DPTR
   \   0586  75F028            MOV     B,#40
   \   0589  A4                MUL     AB
   \   058A  FE                MOV     R6,A
   \   058B  E5F0              MOV     A,B
   \   058D  CF                XCH     A,R7
   \   058E  75F028            MOV     B,#40
   \   0591  A4                MUL     AB
   \   0592  2F                ADD     A,R7
   \   0593  FF                MOV     R7,A
   \   0594  C3                CLR     C
   \   0595  EC                MOV     A,R4
   \   0596  9E                SUBB    A,R6
   \   0597  FC                MOV     R4,A
   \   0598  ED                MOV     A,R5
   \   0599  9F                SUBB    A,R7
   \   059A  900000            MOV     DPTR,#$LOCBX LogCursorAt+6
   \   059D  F0                MOVX    @DPTR,A
   \   059E  A3                INC     DPTR
   \   059F  EC                MOV     A,R4
   \   05A0  F0                MOVX    @DPTR,A
    282                  SetLCDReg(10, 0x00);
   \   05A1  7D00              MOV     R5,#0
   \   05A3  7C0A              MOV     R4,#10
   \   05A5  120000            LCALL   $REFFN SetLCDReg
    283                  SetLCDReg(11, 0x00);
   \   05A8  7D00              MOV     R5,#0
   \   05AA  7C0B              MOV     R4,#11
   \   05AC  120000            LCALL   $REFFN SetLCDReg
    284                  for (i=0 ; i<6 ; i++) {
   \   05AF  900000            MOV     DPTR,#$LOCBX LogCursorAt+2
   \   05B2  E4                CLR     A
   \   05B3  F0                MOVX    @DPTR,A
   \   05B4  A3                INC     DPTR
   \   05B5  F0                MOVX    @DPTR,A
   \   05B6            ?0079:
   \   05B6  C3                CLR     C
   \   05B7  900000            MOV     DPTR,#$LOCBX LogCursorAt+3
   \   05BA  E0                MOVX    A,@DPTR
   \   05BB  9406              SUBB    A,#6
   \   05BD  900000            MOV     DPTR,#$LOCBX LogCursorAt+2
   \   05C0  E0                MOVX    A,@DPTR
   \   05C1  6480              XRL     A,#128
   \   05C3  9480              SUBB    A,#128
   \   05C5  5069              JNC     ?0078
   \   05C7            ?0080:
    285                      SetLCDReg(12, ' ');
   \   05C7  7D20              MOV     R5,#32
   \   05C9  7C0C              MOV     R4,#12
   \   05CB  120000            LCALL   $REFFN SetLCDReg
    286                      for(j=0 ; j<40 ; j++) {
   \   05CE  900000            MOV     DPTR,#$LOCBX LogCursorAt+4
   \   05D1  E4                CLR     A
   \   05D2  F0                MOVX    @DPTR,A
   \   05D3  A3                INC     DPTR
   \   05D4  F0                MOVX    @DPTR,A
   \   05D5            ?0083:
   \   05D5  C3                CLR     C
   \   05D6  900000            MOV     DPTR,#$LOCBX LogCursorAt+5
   \   05D9  E0                MOVX    A,@DPTR
   \   05DA  9428              SUBB    A,#40
   \   05DC  900000            MOV     DPTR,#$LOCBX LogCursorAt+4
   \   05DF  E0                MOVX    A,@DPTR
   \   05E0  6480              XRL     A,#128
   \   05E2  9480              SUBB    A,#128
   \   05E4  5033              JNC     ?0082
   \   05E6            ?0084:
    287                          SetLCDReg(12, dispBuffer[n++]);
   \   05E6  A3                INC     DPTR
   \   05E7  A3                INC     DPTR
   \   05E8  E0                MOVX    A,@DPTR
   \   05E9  FD                MOV     R5,A
   \   05EA  A3                INC     DPTR
   \   05EB  E0                MOVX    A,@DPTR
   \   05EC  FC                MOV     R4,A
   \   05ED  E0                MOVX    A,@DPTR
   \   05EE  04                INC     A
   \   05EF  F0                MOVX    @DPTR,A
   \   05F0  900000            MOV     DPTR,#$LOCBX LogCursorAt+6
   \   05F3  7003              JNZ     ?0269
   \   05F5  E0                MOVX    A,@DPTR
   \   05F6  04                INC     A
   \   05F7  F0                MOVX    @DPTR,A
   \   05F8            ?0269:
   \   05F8  EC                MOV     A,R4
   \   05F9  245A              ADD     A,#LOW(dispBuffer)
   \   05FB  F582              MOV     DPL,A
   \   05FD  ED                MOV     A,R5
   \   05FE  3401              ADDC    A,#HIGH(dispBuffer)
   \   0600  F583              MOV     DPH,A
   \   0602  E0                MOVX    A,@DPTR
   \   0603  FD                MOV     R5,A
   \   0604  7C0C              MOV     R4,#12
   \   0606  120000            LCALL   $REFFN SetLCDReg
   \   0609  900000            MOV     DPTR,#$LOCBX LogCursorAt+5
   \   060C  E0                MOVX    A,@DPTR
   \   060D  04                INC     A
   \   060E  F0                MOVX    @DPTR,A
   \   060F  900000            MOV     DPTR,#$LOCBX LogCursorAt+4
   \   0612  7003              JNZ     ?0270
   \   0614  E0                MOVX    A,@DPTR
   \   0615  04                INC     A
   \   0616  F0                MOVX    @DPTR,A
   \   0617            ?0270:
   \   0617  80BC              SJMP    ?0083
   \   0619            ?0082:
    288                      }
    289                      SetLCDReg(12, ' ');
   \   0619  7D20              MOV     R5,#32
   \   061B  7C0C              MOV     R4,#12
   \   061D  120000            LCALL   $REFFN SetLCDReg
   \   0620  900000            MOV     DPTR,#$LOCBX LogCursorAt+3
   \   0623  E0                MOVX    A,@DPTR
   \   0624  04                INC     A
   \   0625  F0                MOVX    @DPTR,A
   \   0626  900000            MOV     DPTR,#$LOCBX LogCursorAt+2
   \   0629  7003              JNZ     ?0271
   \   062B  E0                MOVX    A,@DPTR
   \   062C  04                INC     A
   \   062D  F0                MOVX    @DPTR,A
   \   062E            ?0271:
    290                  }
    291              }
   \   062E  8086              SJMP    ?0079
   \   0630            ?0078:
   \   0630            ?0068:
    292                  
    293              //Flytta markörtecknet
    294              SetLCDReg(10, (cursorPos - oldDispStart)*42);    //Ta bort gammla
   \   0630  900000            MOV     DPTR,#$LOCBX LogCursorAt+1
   \   0633  E0                MOVX    A,@DPTR
   \   0634  FC                MOV     R4,A
   \   0635  900153            MOV     DPTR,#cursorPos+1
   \   0638  E0                MOVX    A,@DPTR
   \   0639  C3                CLR     C
   \   063A  9C                SUBB    A,R4
   \   063B  75F02A            MOV     B,#42
   \   063E  A4                MUL     AB
   \   063F  FD                MOV     R5,A
   \   0640  7C0A              MOV     R4,#10
   \   0642  120000            LCALL   $REFFN SetLCDReg
    295              SetLCDReg(11, 0x00);
   \   0645  7D00              MOV     R5,#0
   \   0647  7C0B              MOV     R4,#11
   \   0649  120000            LCALL   $REFFN SetLCDReg
    296              SetLCDReg(12, ' ');
   \   064C  7D20              MOV     R5,#32
   \   064E  7C0C              MOV     R4,#12
   \   0650  120000            LCALL   $REFFN SetLCDReg
    297                  
    298              SetLCDReg(10, (newCursorPos - dispStart)*42);    //Skriv nya
   \   0653  900155            MOV     DPTR,#dispStart+1
   \   0656  E0                MOVX    A,@DPTR
   \   0657  FC                MOV     R4,A
   \   0658  900000            MOV     DPTR,#$LOCBX LogCursorAt+11
   \   065B  E0                MOVX    A,@DPTR
   \   065C  C3                CLR     C
   \   065D  9C                SUBB    A,R4
   \   065E  75F02A            MOV     B,#42
   \   0661  A4                MUL     AB
   \   0662  FD                MOV     R5,A
   \   0663  7C0A              MOV     R4,#10
   \   0665  120000            LCALL   $REFFN SetLCDReg
    299              SetLCDReg(11, 0x00);
   \   0668  7D00              MOV     R5,#0
   \   066A  7C0B              MOV     R4,#11
   \   066C  120000            LCALL   $REFFN SetLCDReg
    300              SetLCDReg(12, '>');         
   \   066F  7D3E              MOV     R5,#62
   \   0671  7C0C              MOV     R4,#12
   \   0673  120000            LCALL   $REFFN SetLCDReg
    301                  
    302              cursorPos = newCursorPos; 
    303          }            
   \   0676  900000            MOV     DPTR,#$LOCBX LogCursorAt+10
   \   0679  E0                MOVX    A,@DPTR
   \   067A  FD                MOV     R5,A
   \   067B  A3                INC     DPTR
   \   067C  E0                MOVX    A,@DPTR
   \   067D  900152            MOV     DPTR,#cursorPos
   \   0680  CD                XCH     A,R5
   \   0681  F0                MOVX    @DPTR,A
   \   0682  A3                INC     DPTR
   \   0683  CD                XCH     A,R5
   \   0684  F0                MOVX    @DPTR,A
   \   0685  900000            MOV     DPTR,#$LOCBX LogCursorAt+8
   \   0688  E0                MOVX    A,@DPTR
   \   0689  F8                MOV     R0,A
   \   068A  A3                INC     DPTR
   \   068B  E0                MOVX    A,@DPTR
   \   068C  C0E0              PUSH    ACC
   \   068E  E8                MOV     A,R0
   \   068F  C0E0              PUSH    ACC
   \   0691  22                RET
    304              
    305          void FillDispBuffer( void )
    306          {   
   \   0692            FillDispBuffer:
   \   0692  900000            MOV     DPTR,#$LOCBX FillDispBuffer+80
   \   0695  D0E0              POP     ACC
   \   0697  F0                MOVX    @DPTR,A
   \   0698  A3                INC     DPTR
   \   0699  D0E0              POP     ACC
   \   069B  F0                MOVX    @DPTR,A
    307              xdata FILE*     fp;
    308              xdata char      number[50];
    309              xdata char      time[15];
    310              xdata int       noOfMsg;
    311              unsigned int    n;
    312              int             i;
    313              char*           j;
    314              char*           jClear;
    315              
    316              DispInfoBox("Reading log file", "Please wait...");
   \   069C  7F02              MOV     R7,#2
   \   069E  900000            MOV     DPTR,#$PRMBX DispInfoBox+3
   \   06A1  EF                MOV     A,R7
   \   06A2  F0                MOVX    @DPTR,A
   \   06A3  A3                INC     DPTR
   \   06A4  7400              MOV     A,#HIGH(?0087)
   \   06A6  F0                MOVX    @DPTR,A
   \   06A7  A3                INC     DPTR
   \   06A8  7411              MOV     A,#LOW(?0087)
   \   06AA  F0                MOVX    @DPTR,A
   \   06AB  7D00              MOV     R5,#LOW(?0086)
   \   06AD  7E00              MOV     R6,#HIGH(?0086)
   \   06AF  120000            LCALL   $REFFN DispInfoBox
    317              
    318              if (dispBuffStart+DISPBUFFERSIZE > numOfCalls) {
   \   06B2  900157            MOV     DPTR,#dispBuffStart+1
   \   06B5  E0                MOVX    A,@DPTR
   \   06B6  2432              ADD     A,#50
   \   06B8  FC                MOV     R4,A
   \   06B9  900156            MOV     DPTR,#dispBuffStart
   \   06BC  E0                MOVX    A,@DPTR
   \   06BD  3400              ADDC    A,#0
   \   06BF  FD                MOV     R5,A
   \   06C0  900001            MOV     DPTR,#numOfCalls+1
   \   06C3  E0                MOVX    A,@DPTR
   \   06C4  C3                CLR     C
   \   06C5  9C                SUBB    A,R4
   \   06C6  900000            MOV     DPTR,#numOfCalls
   \   06C9  E0                MOVX    A,@DPTR
   \   06CA  9D                SUBB    A,R5
   \   06CB  5026              JNC     ?0089
   \   06CD            ?0088:
    319                  dispBuffEnd = numOfCalls - dispBuffStart - 1;
   \   06CD  E0                MOVX    A,@DPTR
   \   06CE  FD                MOV     R5,A
   \   06CF  A3                INC     DPTR
   \   06D0  E0                MOVX    A,@DPTR
   \   06D1  C3                CLR     C
   \   06D2  900157            MOV     DPTR,#dispBuffStart+1
   \   06D5  FE                MOV     R6,A
   \   06D6  E0                MOVX    A,@DPTR
   \   06D7  CE                XCH     A,R6
   \   06D8  9E                SUBB    A,R6
   \   06D9  FC                MOV     R4,A
   \   06DA  900156            MOV     DPTR,#dispBuffStart
   \   06DD  E0                MOVX    A,@DPTR
   \   06DE  FE                MOV     R6,A
   \   06DF  ED                MOV     A,R5
   \   06E0  9E                SUBB    A,R6
   \   06E1  FD                MOV     R5,A
   \   06E2  EC                MOV     A,R4
   \   06E3  24FF              ADD     A,#255
   \   06E5  FC                MOV     R4,A
   \   06E6  ED                MOV     A,R5
   \   06E7  34FF              ADDC    A,#255
   \   06E9  900158            MOV     DPTR,#dispBuffEnd
   \   06EC  F0                MOVX    @DPTR,A
   \   06ED  A3                INC     DPTR
   \   06EE  CC                XCH     A,R4
   \   06EF  F0                MOVX    @DPTR,A
   \   06F0  CC                XCH     A,R4
    320              } else {
   \   06F1  8009              SJMP    ?0090
   \   06F3            ?0089:
    321                  dispBuffEnd = DISPBUFFERSIZE - 1;
   \   06F3  900158            MOV     DPTR,#dispBuffEnd
   \   06F6  E4                CLR     A
   \   06F7  F0                MOVX    @DPTR,A
   \   06F8  A3                INC     DPTR
   \   06F9  7431              MOV     A,#49
   \   06FB  F0                MOVX    @DPTR,A
   \   06FC            ?0090:
    322              }
    323          
    324              fp = fopen("Log.txt", "r");
   \   06FC  7F02              MOV     R7,#2
   \   06FE  900000            MOV     DPTR,#$PRMBX fopen+3
   \   0701  EF                MOV     A,R7
   \   0702  F0                MOVX    @DPTR,A
   \   0703  A3                INC     DPTR
   \   0704  7400              MOV     A,#HIGH(?0092)
   \   0706  F0                MOVX    @DPTR,A
   \   0707  A3                INC     DPTR
   \   0708  7428              MOV     A,#LOW(?0092)
   \   070A  F0                MOVX    @DPTR,A
   \   070B  7D20              MOV     R5,#LOW(?0091)
   \   070D  7E00              MOV     R6,#HIGH(?0091)
   \   070F  120000            LCALL   $REFFN fopen
    325              
    326              if (fp) {
   \   0712  900000            MOV     DPTR,#$LOCBX FillDispBuffer
   \   0715  EF                MOV     A,R7
   \   0716  F0                MOVX    @DPTR,A
   \   0717  A3                INC     DPTR
   \   0718  EE                MOV     A,R6
   \   0719  F0                MOVX    @DPTR,A
   \   071A  A3                INC     DPTR
   \   071B  ED                MOV     A,R5
   \   071C  F0                MOVX    @DPTR,A
   \   071D  4E                ORL     A,R6
   \   071E  7003              JNZ     $+5
   \   0720  0209B7            LJMP    ?0094
   \   0723            ?0093:
    327              
    328                  //Verifierat att callIndex inte korrupt här!            
    329              
    330                  for (i = dispBuffEnd ; i >= 0 ; i--) {
   \   0723  900158            MOV     DPTR,#dispBuffEnd
   \   0726  E0                MOVX    A,@DPTR
   \   0727  FD                MOV     R5,A
   \   0728  A3                INC     DPTR
   \   0729  E0                MOVX    A,@DPTR
   \   072A  900000            MOV     DPTR,#$LOCBX FillDispBuffer+72
   \   072D  CD                XCH     A,R5
   \   072E  F0                MOVX    @DPTR,A
   \   072F  A3                INC     DPTR
   \   0730  CD                XCH     A,R5
   \   0731  F0                MOVX    @DPTR,A
   \   0732            ?0096:
   \   0732  900000            MOV     DPTR,#$LOCBX FillDispBuffer+72
   \   0735  E0                MOVX    A,@DPTR
   \   0736  33                RLC     A
   \   0737  5003              JNC     $+5
   \   0739  0209B7            LJMP    ?0095
   \   073C            ?0097:
    331                  //Siffran 'i' är aktuell rad i dispBuffer (nedifrån och upp)
    332                      if (FindCall(fp, numOfCalls - dispBuffStart - i - 1)) {
   \   073C  900000            MOV     DPTR,#numOfCalls
   \   073F  E0                MOVX    A,@DPTR
   \   0740  FD                MOV     R5,A
   \   0741  A3                INC     DPTR
   \   0742  E0                MOVX    A,@DPTR
   \   0743  C3                CLR     C
   \   0744  900157            MOV     DPTR,#dispBuffStart+1
   \   0747  FE                MOV     R6,A
   \   0748  E0                MOVX    A,@DPTR
   \   0749  CE                XCH     A,R6
   \   074A  9E                SUBB    A,R6
   \   074B  FC                MOV     R4,A
   \   074C  900156            MOV     DPTR,#dispBuffStart
   \   074F  E0                MOVX    A,@DPTR
   \   0750  FE                MOV     R6,A
   \   0751  ED                MOV     A,R5
   \   0752  9E                SUBB    A,R6
   \   0753  C3                CLR     C
   \   0754  FD                MOV     R5,A
   \   0755  900000            MOV     DPTR,#$LOCBX FillDispBuffer+73
   \   0758  E0                MOVX    A,@DPTR
   \   0759  FE                MOV     R6,A
   \   075A  EC                MOV     A,R4
   \   075B  9E                SUBB    A,R6
   \   075C  FC                MOV     R4,A
   \   075D  900000            MOV     DPTR,#$LOCBX FillDispBuffer+72
   \   0760  E0                MOVX    A,@DPTR
   \   0761  FE                MOV     R6,A
   \   0762  ED                MOV     A,R5
   \   0763  9E                SUBB    A,R6
   \   0764  FD                MOV     R5,A
   \   0765  EC                MOV     A,R4
   \   0766  24FF              ADD     A,#255
   \   0768  FC                MOV     R4,A
   \   0769  ED                MOV     A,R5
   \   076A  34FF              ADDC    A,#255
   \   076C  900000            MOV     DPTR,#$PRMBX FindCall+3
   \   076F  F0                MOVX    @DPTR,A
   \   0770  A3                INC     DPTR
   \   0771  EC                MOV     A,R4
   \   0772  F0                MOVX    @DPTR,A
   \   0773  900000            MOV     DPTR,#$LOCBX FillDispBuffer
   \   0776  E0                MOVX    A,@DPTR
   \   0777  FF                MOV     R7,A
   \   0778  A3                INC     DPTR
   \   0779  E0                MOVX    A,@DPTR
   \   077A  FE                MOV     R6,A
   \   077B  A3                INC     DPTR
   \   077C  E0                MOVX    A,@DPTR
   \   077D  FD                MOV     R5,A
   \   077E  120000            LCALL   $REFFN FindCall
   \   0781  EC                MOV     A,R4
   \   0782  7003              JNZ     $+5
   \   0784  0209A1            LJMP    ?0100
   \   0787            ?0099:
    333          //                SendRS232('.');
    334                          WDT = 1;
   \   0787  D2AE              SETB    IE.6
    335                          SWDT = 1;
   \   0789  D2BE              SETB    IP.6
    336                          GetCallInformation(fp, number, time, &noOfMsg);
   \   078B  7F01              MOV     R7,#1
   \   078D  900000            MOV     DPTR,#$PRMBX GetCallInformation+9
   \   0790  EF                MOV     A,R7
   \   0791  F0                MOVX    @DPTR,A
   \   0792  A3                INC     DPTR
   \   0793  7400              MOV     A,#HIGH ($LOCBX FillDispBuffer+68)
   \   0795  F0                MOVX    @DPTR,A
   \   0796  A3                INC     DPTR
   \   0797  7400              MOV     A,#LOW ($LOCBX FillDispBuffer+68)
   \   0799  F0                MOVX    @DPTR,A
   \   079A  900000            MOV     DPTR,#$PRMBX GetCallInformation+6
   \   079D  EF                MOV     A,R7
   \   079E  F0                MOVX    @DPTR,A
   \   079F  A3                INC     DPTR
   \   07A0  7400              MOV     A,#HIGH ($LOCBX FillDispBuffer+53)
   \   07A2  F0                MOVX    @DPTR,A
   \   07A3  A3                INC     DPTR
   \   07A4  7400              MOV     A,#LOW ($LOCBX FillDispBuffer+53)
   \   07A6  F0                MOVX    @DPTR,A
   \   07A7  900000            MOV     DPTR,#$PRMBX GetCallInformation+3
   \   07AA  EF                MOV     A,R7
   \   07AB  F0                MOVX    @DPTR,A
   \   07AC  A3                INC     DPTR
   \   07AD  7400              MOV     A,#HIGH ($LOCBX FillDispBuffer+3)
   \   07AF  F0                MOVX    @DPTR,A
   \   07B0  A3                INC     DPTR
   \   07B1  7400              MOV     A,#LOW ($LOCBX FillDispBuffer+3)
   \   07B3  F0                MOVX    @DPTR,A
   \   07B4  900000            MOV     DPTR,#$LOCBX FillDispBuffer
   \   07B7  E0                MOVX    A,@DPTR
   \   07B8  FF                MOV     R7,A
   \   07B9  A3                INC     DPTR
   \   07BA  E0                MOVX    A,@DPTR
   \   07BB  FE                MOV     R6,A
   \   07BC  A3                INC     DPTR
   \   07BD  E0                MOVX    A,@DPTR
   \   07BE  FD                MOV     R5,A
   \   07BF  120000            LCALL   $REFFN GetCallInformation
    337          //                SendRS232('^');
    338                          j = i * DISPCALLSIZE + dispBuffer;
   \   07C2  900000            MOV     DPTR,#$LOCBX FillDispBuffer+72
   \   07C5  E0                MOVX    A,@DPTR
   \   07C6  FD                MOV     R5,A
   \   07C7  A3                INC     DPTR
   \   07C8  E0                MOVX    A,@DPTR
   \   07C9  75F028            MOV     B,#40
   \   07CC  A4                MUL     AB
   \   07CD  FC                MOV     R4,A
   \   07CE  E5F0              MOV     A,B
   \   07D0  CD                XCH     A,R5
   \   07D1  75F028            MOV     B,#40
   \   07D4  A4                MUL     AB
   \   07D5  2D                ADD     A,R5
   \   07D6  FD                MOV     R5,A
   \   07D7  EC                MOV     A,R4
   \   07D8  245A              ADD     A,#LOW(dispBuffer)
   \   07DA  FC                MOV     R4,A
   \   07DB  ED                MOV     A,R5
   \   07DC  3401              ADDC    A,#HIGH(dispBuffer)
   \   07DE  FE                MOV     R6,A
   \   07DF  EC                MOV     A,R4
   \   07E0  FD                MOV     R5,A
   \   07E1  7401              MOV     A,#1
    339                          if ((j < dispBuffer) || (j+DISPCALLSIZE > dispBuffer + DISPBUFFERSIZE * DISPCALLSIZE)) {
   \   07E3  A3                INC     DPTR
   \   07E4  F0                MOVX    @DPTR,A
   \   07E5  A3                INC     DPTR
   \   07E6  EE                MOV     A,R6
   \   07E7  F0                MOVX    @DPTR,A
   \   07E8  A3                INC     DPTR
   \   07E9  ED                MOV     A,R5
   \   07EA  F0                MOVX    @DPTR,A
   \   07EB  EE                MOV     A,R6
   \   07EC  CD                XCH     A,R5
   \   07ED  FC                MOV     R4,A
   \   07EE  7E5A              MOV     R6,#LOW(dispBuffer)
   \   07F0  7F01              MOV     R7,#HIGH(dispBuffer)
   \   07F2  C3                CLR     C
   \   07F3  9E                SUBB    A,R6
   \   07F4  ED                MOV     A,R5
   \   07F5  9F                SUBB    A,R7
   \   07F6  401B              JC      ?0101
   \   07F8  900000            MOV     DPTR,#$LOCBX FillDispBuffer+74
   \   07FB  E0                MOVX    A,@DPTR
   \   07FC  A3                INC     DPTR
   \   07FD  E0                MOVX    A,@DPTR
   \   07FE  FE                MOV     R6,A
   \   07FF  A3                INC     DPTR
   \   0800  E0                MOVX    A,@DPTR
   \   0801  2428              ADD     A,#40
   \   0803  FD                MOV     R5,A
   \   0804  EE                MOV     A,R6
   \   0805  3400              ADDC    A,#0
   \   0807  CD                XCH     A,R5
   \   0808  FC                MOV     R4,A
   \   0809  7E2A              MOV     R6,#LOW(dispBuffer+2000)
   \   080B  7F09              MOV     R7,#HIGH(dispBuffer+2000)
   \   080D  D3                SETB    C
   \   080E  9E                SUBB    A,R6
   \   080F  ED                MOV     A,R5
   \   0810  9F                SUBB    A,R7
   \   0811  400C              JC      ?0102
   \   0813            ?0103:
   \   0813            ?0104:
   \   0813            ?0101:
    340                              SendStringEOLRS232("ERROR: Attempt to write outside dispBuff");
   \   0813  7D2A              MOV     R5,#LOW(?0105)
   \   0815  7E00              MOV     R6,#HIGH(?0105)
   \   0817  7F02              MOV     R7,#2
   \   0819  120000            LCALL   $REFFN SendStringEOLRS232
    341                          } else {
   \   081C  02099F            LJMP    ?0106
   \   081F            ?0102:
    342                              jClear = j;
   \   081F  900000            MOV     DPTR,#$LOCBX FillDispBuffer+74
   \   0822  E0                MOVX    A,@DPTR
   \   0823  FF                MOV     R7,A
   \   0824  A3                INC     DPTR
   \   0825  E0                MOVX    A,@DPTR
   \   0826  FE                MOV     R6,A
   \   0827  A3                INC     DPTR
   \   0828  E0                MOVX    A,@DPTR
   \   0829  FD                MOV     R5,A
   \   082A  A3                INC     DPTR
   \   082B  EF                MOV     A,R7
   \   082C  F0                MOVX    @DPTR,A
   \   082D  A3                INC     DPTR
   \   082E  EE                MOV     A,R6
   \   082F  F0                MOVX    @DPTR,A
   \   0830  A3                INC     DPTR
   \   0831  ED                MOV     A,R5
   \   0832  F0                MOVX    @DPTR,A
    343                              for (n=0 ; n<DISPCALLSIZE ; n++) *(jClear++) = 0;
   \   0833  900000            MOV     DPTR,#$LOCBX FillDispBuffer+70
   \   0836  E4                CLR     A
   \   0837  F0                MOVX    @DPTR,A
   \   0838  A3                INC     DPTR
   \   0839  F0                MOVX    @DPTR,A
   \   083A            ?0108:
   \   083A  C3                CLR     C
   \   083B  900000            MOV     DPTR,#$LOCBX FillDispBuffer+71
   \   083E  E0                MOVX    A,@DPTR
   \   083F  9428              SUBB    A,#40
   \   0841  900000            MOV     DPTR,#$LOCBX FillDispBuffer+70
   \   0844  E0                MOVX    A,@DPTR
   \   0845  9400              SUBB    A,#0
   \   0847  502C              JNC     ?0107
   \   0849            ?0109:
   \   0849  900000            MOV     DPTR,#$LOCBX FillDispBuffer+77
   \   084C  E0                MOVX    A,@DPTR
   \   084D  FF                MOV     R7,A
   \   084E  A3                INC     DPTR
   \   084F  E0                MOVX    A,@DPTR
   \   0850  FE                MOV     R6,A
   \   0851  C083              PUSH    DPH
   \   0853  A3                INC     DPTR
   \   0854  E0                MOVX    A,@DPTR
   \   0855  FD                MOV     R5,A
   \   0856  04                INC     A
   \   0857  F0                MOVX    @DPTR,A
   \   0858  1582              DEC     DPL
   \   085A  D083              POP     DPH
   \   085C  7003              JNZ     ?0272
   \   085E  EE                MOV     A,R6
   \   085F  04                INC     A
   \   0860  F0                MOVX    @DPTR,A
   \   0861            ?0272:
   \   0861  E4                CLR     A
   \   0862  120000            LCALL   ?ST_A_R567_L17
   \   0865  900000            MOV     DPTR,#$LOCBX FillDispBuffer+71
   \   0868  E0                MOVX    A,@DPTR
   \   0869  04                INC     A
   \   086A  F0                MOVX    @DPTR,A
   \   086B  900000            MOV     DPTR,#$LOCBX FillDispBuffer+70
   \   086E  7003              JNZ     ?0273
   \   0870  E0                MOVX    A,@DPTR
   \   0871  04                INC     A
   \   0872  F0                MOVX    @DPTR,A
   \   0873            ?0273:
   \   0873  80C5              SJMP    ?0108
   \   0875            ?0107:
    344                              WriteClipToMem(number, 24, (char*) j);
   \   0875  900000            MOV     DPTR,#$LOCBX FillDispBuffer+74
   \   0878  E0                MOVX    A,@DPTR
   \   0879  FF                MOV     R7,A
   \   087A  A3                INC     DPTR
   \   087B  E0                MOVX    A,@DPTR
   \   087C  FE                MOV     R6,A
   \   087D  A3                INC     DPTR
   \   087E  E0                MOVX    A,@DPTR
   \   087F  FD                MOV     R5,A
   \   0880  900000            MOV     DPTR,#$PRMBX WriteClipToMem+5
   \   0883  EF                MOV     A,R7
   \   0884  F0                MOVX    @DPTR,A
   \   0885  A3                INC     DPTR
   \   0886  EE                MOV     A,R6
   \   0887  F0                MOVX    @DPTR,A
   \   0888  A3                INC     DPTR
   \   0889  ED                MOV     A,R5
   \   088A  F0                MOVX    @DPTR,A
   \   088B  900000            MOV     DPTR,#$PRMBX WriteClipToMem+3
   \   088E  E4                CLR     A
   \   088F  F0                MOVX    @DPTR,A
   \   0890  A3                INC     DPTR
   \   0891  7418              MOV     A,#24
   \   0893  F0                MOVX    @DPTR,A
   \   0894  7D00              MOV     R5,#LOW ($LOCBX FillDispBuffer+3)
   \   0896  7E00              MOV     R6,#HIGH ($LOCBX FillDispBuffer+3)
   \   0898  7F01              MOV     R7,#1
   \   089A  120000            LCALL   $REFFN WriteClipToMem
    345          //                SendRS232('-');
    346                              j += 24;
   \   089D  900000            MOV     DPTR,#$LOCBX FillDispBuffer+76
   \   08A0  E0                MOVX    A,@DPTR
   \   08A1  2418              ADD     A,#24
   \   08A3  F0                MOVX    @DPTR,A
   \   08A4  900000            MOV     DPTR,#$LOCBX FillDispBuffer+75
   \   08A7  E0                MOVX    A,@DPTR
   \   08A8  3400              ADDC    A,#0
   \   08AA  F0                MOVX    @DPTR,A
    347                              *(j++) = ' ';
   \   08AB  900000            MOV     DPTR,#$LOCBX FillDispBuffer+74
   \   08AE  E0                MOVX    A,@DPTR
   \   08AF  FF                MOV     R7,A
   \   08B0  A3                INC     DPTR
   \   08B1  E0                MOVX    A,@DPTR
   \   08B2  FE                MOV     R6,A
   \   08B3  C083              PUSH    DPH
   \   08B5  A3                INC     DPTR
   \   08B6  E0                MOVX    A,@DPTR
   \   08B7  FD                MOV     R5,A
   \   08B8  04                INC     A
   \   08B9  F0                MOVX    @DPTR,A
   \   08BA  1582              DEC     DPL
   \   08BC  D083              POP     DPH
   \   08BE  7003              JNZ     ?0274
   \   08C0  EE                MOV     A,R6
   \   08C1  04                INC     A
   \   08C2  F0                MOVX    @DPTR,A
   \   08C3            ?0274:
   \   08C3  7420              MOV     A,#32
   \   08C5  120000            LCALL   ?ST_A_R567_L17
    348                              *(j++) = '0' + noOfMsg;
   \   08C8  900000            MOV     DPTR,#$LOCBX FillDispBuffer+69
   \   08CB  E0                MOVX    A,@DPTR
   \   08CC  2430              ADD     A,#48
   \   08CE  FC                MOV     R4,A
   \   08CF  900000            MOV     DPTR,#$LOCBX FillDispBuffer+74
   \   08D2  E0                MOVX    A,@DPTR
   \   08D3  FF                MOV     R7,A
   \   08D4  A3                INC     DPTR
   \   08D5  E0                MOVX    A,@DPTR
   \   08D6  FE                MOV     R6,A
   \   08D7  C083              PUSH    DPH
   \   08D9  A3                INC     DPTR
   \   08DA  E0                MOVX    A,@DPTR
   \   08DB  FD                MOV     R5,A
   \   08DC  04                INC     A
   \   08DD  F0                MOVX    @DPTR,A
   \   08DE  1582              DEC     DPL
   \   08E0  D083              POP     DPH
   \   08E2  7003              JNZ     ?0275
   \   08E4  EE                MOV     A,R6
   \   08E5  04                INC     A
   \   08E6  F0                MOVX    @DPTR,A
   \   08E7            ?0275:
   \   08E7  EC                MOV     A,R4
   \   08E8  120000            LCALL   ?ST_A_R567_L17
    349                              if ((numOfCalls - i - 1) > lastPlayed) {
   \   08EB  900000            MOV     DPTR,#numOfCalls
   \   08EE  E0                MOVX    A,@DPTR
   \   08EF  FD                MOV     R5,A
   \   08F0  A3                INC     DPTR
   \   08F1  E0                MOVX    A,@DPTR
   \   08F2  C3                CLR     C
   \   08F3  900000            MOV     DPTR,#$LOCBX FillDispBuffer+73
   \   08F6  FE                MOV     R6,A
   \   08F7  E0                MOVX    A,@DPTR
   \   08F8  CE                XCH     A,R6
   \   08F9  9E                SUBB    A,R6
   \   08FA  FC                MOV     R4,A
   \   08FB  900000            MOV     DPTR,#$LOCBX FillDispBuffer+72
   \   08FE  E0                MOVX    A,@DPTR
   \   08FF  FE                MOV     R6,A
   \   0900  ED                MOV     A,R5
   \   0901  9E                SUBB    A,R6
   \   0902  FD                MOV     R5,A
   \   0903  EC                MOV     A,R4
   \   0904  24FF              ADD     A,#255
   \   0906  FC                MOV     R4,A
   \   0907  ED                MOV     A,R5
   \   0908  34FF              ADDC    A,#255
   \   090A  FD                MOV     R5,A
   \   090B  900001            MOV     DPTR,#lastPlayed+1
   \   090E  E0                MOVX    A,@DPTR
   \   090F  C3                CLR     C
   \   0910  9C                SUBB    A,R4
   \   0911  900000            MOV     DPTR,#lastPlayed
   \   0914  E0                MOVX    A,@DPTR
   \   0915  6480              XRL     A,#128
   \   0917  CD                XCH     A,R5
   \   0918  6480              XRL     A,#128
   \   091A  CD                XCH     A,R5
   \   091B  9D                SUBB    A,R5
   \   091C  501F              JNC     ?0112
   \   091E            ?0111:
    350                                  *(j++) = 'N';
   \   091E  900000            MOV     DPTR,#$LOCBX FillDispBuffer+74
   \   0921  E0                MOVX    A,@DPTR
   \   0922  FF                MOV     R7,A
   \   0923  A3                INC     DPTR
   \   0924  E0                MOVX    A,@DPTR
   \   0925  FE                MOV     R6,A
   \   0926  C083              PUSH    DPH
   \   0928  A3                INC     DPTR
   \   0929  E0                MOVX    A,@DPTR
   \   092A  FD                MOV     R5,A
   \   092B  04                INC     A
   \   092C  F0                MOVX    @DPTR,A
   \   092D  1582              DEC     DPL
   \   092F  D083              POP     DPH
   \   0931  7003              JNZ     ?0276
   \   0933  EE                MOV     A,R6
   \   0934  04                INC     A
   \   0935  F0                MOVX    @DPTR,A
   \   0936            ?0276:
   \   0936  744E              MOV     A,#78
   \   0938  120000            LCALL   ?ST_A_R567_L17
    351                              } else {
   \   093B  801D              SJMP    ?0113
   \   093D            ?0112:
    352                                  *(j++) = 'P';
   \   093D  900000            MOV     DPTR,#$LOCBX FillDispBuffer+74
   \   0940  E0                MOVX    A,@DPTR
   \   0941  FF                MOV     R7,A
   \   0942  A3                INC     DPTR
   \   0943  E0                MOVX    A,@DPTR
   \   0944  FE                MOV     R6,A
   \   0945  C083              PUSH    DPH
   \   0947  A3                INC     DPTR
   \   0948  E0                MOVX    A,@DPTR
   \   0949  FD                MOV     R5,A
   \   094A  04                INC     A
   \   094B  F0                MOVX    @DPTR,A
   \   094C  1582              DEC     DPL
   \   094E  D083              POP     DPH
   \   0950  7003              JNZ     ?0277
   \   0952  EE                MOV     A,R6
   \   0953  04                INC     A
   \   0954  F0                MOVX    @DPTR,A
   \   0955            ?0277:
   \   0955  7450              MOV     A,#80
   \   0957  120000            LCALL   ?ST_A_R567_L17
   \   095A            ?0113:
    353                              }
    354                              *(j++) = ' ';
   \   095A  900000            MOV     DPTR,#$LOCBX FillDispBuffer+74
   \   095D  E0                MOVX    A,@DPTR
   \   095E  FF                MOV     R7,A
   \   095F  A3                INC     DPTR
   \   0960  E0                MOVX    A,@DPTR
   \   0961  FE                MOV     R6,A
   \   0962  C083              PUSH    DPH
   \   0964  A3                INC     DPTR
   \   0965  E0                MOVX    A,@DPTR
   \   0966  FD                MOV     R5,A
   \   0967  04                INC     A
   \   0968  F0                MOVX    @DPTR,A
   \   0969  1582              DEC     DPL
   \   096B  D083              POP     DPH
   \   096D  7003              JNZ     ?0278
   \   096F  EE                MOV     A,R6
   \   0970  04                INC     A
   \   0971  F0                MOVX    @DPTR,A
   \   0972            ?0278:
   \   0972  7420              MOV     A,#32
   \   0974  120000            LCALL   ?ST_A_R567_L17
    355                              WriteClipToMem(time, 12, (char*) j);
   \   0977  900000            MOV     DPTR,#$LOCBX FillDispBuffer+74
   \   097A  E0                MOVX    A,@DPTR
   \   097B  FF                MOV     R7,A
   \   097C  A3                INC     DPTR
   \   097D  E0                MOVX    A,@DPTR
   \   097E  FE                MOV     R6,A
   \   097F  A3                INC     DPTR
   \   0980  E0                MOVX    A,@DPTR
   \   0981  FD                MOV     R5,A
   \   0982  900000            MOV     DPTR,#$PRMBX WriteClipToMem+5
   \   0985  EF                MOV     A,R7
   \   0986  F0                MOVX    @DPTR,A
   \   0987  A3                INC     DPTR
   \   0988  EE                MOV     A,R6
   \   0989  F0                MOVX    @DPTR,A
   \   098A  A3                INC     DPTR
   \   098B  ED                MOV     A,R5
   \   098C  F0                MOVX    @DPTR,A
   \   098D  900000            MOV     DPTR,#$PRMBX WriteClipToMem+3
   \   0990  E4                CLR     A
   \   0991  F0                MOVX    @DPTR,A
   \   0992  A3                INC     DPTR
   \   0993  740C              MOV     A,#12
   \   0995  F0                MOVX    @DPTR,A
   \   0996  7D00              MOV     R5,#LOW ($LOCBX FillDispBuffer+53)
   \   0998  7E00              MOV     R6,#HIGH ($LOCBX FillDispBuffer+53)
   \   099A  7F01              MOV     R7,#1
   \   099C  120000            LCALL   $REFFN WriteClipToMem
   \   099F            ?0106:
    356          //                SendRS232('=');
    357                          }
    358                      } else {
   \   099F  8005              SJMP    ?0114
   \   09A1            ?0100:
    359          
    360                          SendRS232('E');
   \   09A1  7C45              MOV     R4,#69
   \   09A3  120000            LCALL   $REFFN SendRS232
   \   09A6            ?0114:
   \   09A6  900000            MOV     DPTR,#$LOCBX FillDispBuffer+73
   \   09A9  E0                MOVX    A,@DPTR
   \   09AA  24FF              ADD     A,#255
   \   09AC  F0                MOVX    @DPTR,A
   \   09AD  900000            MOV     DPTR,#$LOCBX FillDispBuffer+72
   \   09B0  E0                MOVX    A,@DPTR
   \   09B1  34FF              ADDC    A,#255
   \   09B3  F0                MOVX    @DPTR,A
    361          
    362          /*
    363                          SendStringRS232("ERROR: Could not find call nr: ");
    364                          myInt2DecStr(numOfCalls - i - 1, msg);
    365                          SendStringEOLRS232(msg);
    366          */
    367                      }
    368                  }
    369              }
   \   09B4  020732            LJMP    ?0096
   \   09B7            ?0095:
   \   09B7            ?0094:
    370              fclose(fp);
   \   09B7  900000            MOV     DPTR,#$LOCBX FillDispBuffer
   \   09BA  E0                MOVX    A,@DPTR
   \   09BB  FF                MOV     R7,A
   \   09BC  A3                INC     DPTR
   \   09BD  E0                MOVX    A,@DPTR
   \   09BE  FE                MOV     R6,A
   \   09BF  A3                INC     DPTR
   \   09C0  E0                MOVX    A,@DPTR
   \   09C1  FD                MOV     R5,A
   \   09C2  120000            LCALL   $REFFN fclose
    371          }
   \   09C5  900000            MOV     DPTR,#$LOCBX FillDispBuffer+80
   \   09C8  E0                MOVX    A,@DPTR
   \   09C9  F8                MOV     R0,A
   \   09CA  A3                INC     DPTR
   \   09CB  E0                MOVX    A,@DPTR
   \   09CC  C0E0              PUSH    ACC
   \   09CE  E8                MOV     A,R0
   \   09CF  C0E0              PUSH    ACC
   \   09D1  22                RET
    372          
    373          
    374          
    375          
    376          
    377          //-----------------------------------------------------
    378          //  Menuraden
    379           
    380          void    DisplayMenu(char* menuStr)
    381          {   
   \   09D2            DisplayMenu:
   \   09D2  900000            MOV     DPTR,#$LOCBX DisplayMenu+4
   \   09D5  D0E0              POP     ACC
   \   09D7  F0                MOVX    @DPTR,A
   \   09D8  A3                INC     DPTR
   \   09D9  D0E0              POP     ACC
   \   09DB  F0                MOVX    @DPTR,A
    382              xdata int i = 0;
   \   09DC  900000            MOV     DPTR,#$LOCBX DisplayMenu
   \   09DF  E4                CLR     A
   \   09E0  F0                MOVX    @DPTR,A
   \   09E1  A3                INC     DPTR
   \   09E2  F0                MOVX    @DPTR,A
   \   09E3  900000            MOV     DPTR,#$LOCBX DisplayMenu+6
   \   09E6  EF                MOV     A,R7
   \   09E7  F0                MOVX    @DPTR,A
   \   09E8  A3                INC     DPTR
   \   09E9  EE                MOV     A,R6
   \   09EA  F0                MOVX    @DPTR,A
   \   09EB  A3                INC     DPTR
   \   09EC  ED                MOV     A,R5
   \   09ED  F0                MOVX    @DPTR,A
   \   09EE            ?0116:
    383              xdata int len;
    384              
    385              while(menuStr[i++] != 0);
   \   09EE  900000            MOV     DPTR,#$LOCBX DisplayMenu+6
   \   09F1  E0                MOVX    A,@DPTR
   \   09F2  FF                MOV     R7,A
   \   09F3  A3                INC     DPTR
   \   09F4  E0                MOVX    A,@DPTR
   \   09F5  FE                MOV     R6,A
   \   09F6  A3                INC     DPTR
   \   09F7  E0                MOVX    A,@DPTR
   \   09F8  FD                MOV     R5,A
   \   09F9  900000            MOV     DPTR,#$LOCBX DisplayMenu
   \   09FC  E0                MOVX    A,@DPTR
   \   09FD  FB                MOV     R3,A
   \   09FE  A3                INC     DPTR
   \   09FF  E0                MOVX    A,@DPTR
   \   0A00  FA                MOV     R2,A
   \   0A01  E0                MOVX    A,@DPTR
   \   0A02  04                INC     A
   \   0A03  F0                MOVX    @DPTR,A
   \   0A04  900000            MOV     DPTR,#$LOCBX DisplayMenu
   \   0A07  7003              JNZ     ?0279
   \   0A09  E0                MOVX    A,@DPTR
   \   0A0A  04                INC     A
   \   0A0B  F0                MOVX    @DPTR,A
   \   0A0C            ?0279:
   \   0A0C  8A82              MOV     DPL,R2
   \   0A0E  8B83              MOV     DPH,R3
   \   0A10  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0A13  6002              JZ      ?0115
   \   0A15            ?0117:
   \   0A15  80D7              SJMP    ?0116
   \   0A17            ?0115:
    386              len = i;
    387              
    388              SetLCDReg(10, 0x26);
   \   0A17  7D26              MOV     R5,#38
   \   0A19  7C0A              MOV     R4,#10
   \   0A1B  120000            LCALL   $REFFN SetLCDReg
    389              SetLCDReg(11, 0x01);
   \   0A1E  7D01              MOV     R5,#1
   \   0A20  7C0B              MOV     R4,#11
   \   0A22  120000            LCALL   $REFFN SetLCDReg
    390              
    391              for (i=0 ; i<len ; i++) SetLCDReg(12, menuStr[i]);
   \   0A25  900000            MOV     DPTR,#$LOCBX DisplayMenu
   \   0A28  E0                MOVX    A,@DPTR
   \   0A29  FD                MOV     R5,A
   \   0A2A  A3                INC     DPTR
   \   0A2B  E0                MOVX    A,@DPTR
   \   0A2C  A3                INC     DPTR
   \   0A2D  CD                XCH     A,R5
   \   0A2E  F0                MOVX    @DPTR,A
   \   0A2F  A3                INC     DPTR
   \   0A30  CD                XCH     A,R5
   \   0A31  F0                MOVX    @DPTR,A
   \   0A32  900000            MOV     DPTR,#$LOCBX DisplayMenu
   \   0A35  E4                CLR     A
   \   0A36  F0                MOVX    @DPTR,A
   \   0A37  A3                INC     DPTR
   \   0A38  F0                MOVX    @DPTR,A
   \   0A39            ?0119:
   \   0A39  900000            MOV     DPTR,#$LOCBX DisplayMenu
   \   0A3C  E0                MOVX    A,@DPTR
   \   0A3D  FD                MOV     R5,A
   \   0A3E  A3                INC     DPTR
   \   0A3F  E0                MOVX    A,@DPTR
   \   0A40  FC                MOV     R4,A
   \   0A41  A3                INC     DPTR
   \   0A42  A3                INC     DPTR
   \   0A43  E0                MOVX    A,@DPTR
   \   0A44  D3                SETB    C
   \   0A45  9C                SUBB    A,R4
   \   0A46  900000            MOV     DPTR,#$LOCBX DisplayMenu+2
   \   0A49  E0                MOVX    A,@DPTR
   \   0A4A  6480              XRL     A,#128
   \   0A4C  CD                XCH     A,R5
   \   0A4D  6480              XRL     A,#128
   \   0A4F  CD                XCH     A,R5
   \   0A50  9D                SUBB    A,R5
   \   0A51  402F              JC      ?0118
   \   0A53            ?0120:
   \   0A53  900000            MOV     DPTR,#$LOCBX DisplayMenu+6
   \   0A56  E0                MOVX    A,@DPTR
   \   0A57  FF                MOV     R7,A
   \   0A58  A3                INC     DPTR
   \   0A59  E0                MOVX    A,@DPTR
   \   0A5A  FE                MOV     R6,A
   \   0A5B  A3                INC     DPTR
   \   0A5C  E0                MOVX    A,@DPTR
   \   0A5D  FD                MOV     R5,A
   \   0A5E  900000            MOV     DPTR,#$LOCBX DisplayMenu
   \   0A61  E0                MOVX    A,@DPTR
   \   0A62  FC                MOV     R4,A
   \   0A63  A3                INC     DPTR
   \   0A64  E0                MOVX    A,@DPTR
   \   0A65  F582              MOV     DPL,A
   \   0A67  8C83              MOV     DPH,R4
   \   0A69  120000            LCALL   ?LD_A_R567_DISP_L17
   \   0A6C  FD                MOV     R5,A
   \   0A6D  7C0C              MOV     R4,#12
   \   0A6F  120000            LCALL   $REFFN SetLCDReg
   \   0A72  900000            MOV     DPTR,#$LOCBX DisplayMenu+1
   \   0A75  E0                MOVX    A,@DPTR
   \   0A76  04                INC     A
   \   0A77  F0                MOVX    @DPTR,A
   \   0A78  900000            MOV     DPTR,#$LOCBX DisplayMenu
   \   0A7B  7003              JNZ     ?0280
   \   0A7D  E0                MOVX    A,@DPTR
   \   0A7E  04                INC     A
   \   0A7F  F0                MOVX    @DPTR,A
   \   0A80            ?0280:
   \   0A80  80B7              SJMP    ?0119
   \   0A82            ?0118:
   \   0A82            ?0123:
    392              for ( ; i<42 ; i++) SetLCDReg(12, ' ');
   \   0A82  C3                CLR     C
   \   0A83  900000            MOV     DPTR,#$LOCBX DisplayMenu+1
   \   0A86  E0                MOVX    A,@DPTR
   \   0A87  942A              SUBB    A,#42
   \   0A89  900000            MOV     DPTR,#$LOCBX DisplayMenu
   \   0A8C  E0                MOVX    A,@DPTR
   \   0A8D  6480              XRL     A,#128
   \   0A8F  9480              SUBB    A,#128
   \   0A91  5017              JNC     ?0122
   \   0A93            ?0124:
   \   0A93  7D20              MOV     R5,#32
   \   0A95  7C0C              MOV     R4,#12
   \   0A97  120000            LCALL   $REFFN SetLCDReg
   \   0A9A  900000            MOV     DPTR,#$LOCBX DisplayMenu+1
   \   0A9D  E0                MOVX    A,@DPTR
   \   0A9E  04                INC     A
   \   0A9F  F0                MOVX    @DPTR,A
   \   0AA0  900000            MOV     DPTR,#$LOCBX DisplayMenu
   \   0AA3  7003              JNZ     ?0281
   \   0AA5  E0                MOVX    A,@DPTR
   \   0AA6  04                INC     A
   \   0AA7  F0                MOVX    @DPTR,A
   \   0AA8            ?0281:
    393          }
   \   0AA8  80D8              SJMP    ?0123
   \   0AAA            ?0122:
   \   0AAA  900000            MOV     DPTR,#$LOCBX DisplayMenu+4
   \   0AAD  E0                MOVX    A,@DPTR
   \   0AAE  F8                MOV     R0,A
   \   0AAF  A3                INC     DPTR
   \   0AB0  E0                MOVX    A,@DPTR
   \   0AB1  C0E0              PUSH    ACC
   \   0AB3  E8                MOV     A,R0
   \   0AB4  C0E0              PUSH    ACC
   \   0AB6  22                RET
    394          
    395          
    396             
    397          //-----------------------------------------------------
    398          //  MemUsage raden
    399          
    400          void    DispMemUsage( void )
    401          {   
   \   0AB7            DispMemUsage:
   \   0AB7  900000            MOV     DPTR,#$LOCBX DispMemUsage+4
   \   0ABA  D0E0              POP     ACC
   \   0ABC  F0                MOVX    @DPTR,A
   \   0ABD  A3                INC     DPTR
   \   0ABE  D0E0              POP     ACC
   \   0AC0  F0                MOVX    @DPTR,A
    402              xdata int    j,m;
    403              
    404              SetLCDReg(10, 0xFC);
   \   0AC1  7DFC              MOV     R5,#252
   \   0AC3  7C0A              MOV     R4,#10
   \   0AC5  120000            LCALL   $REFFN SetLCDReg
    405              SetLCDReg(11, 0x00);
   \   0AC8  7D00              MOV     R5,#0
   \   0ACA  7C0B              MOV     R4,#11
   \   0ACC  120000            LCALL   $REFFN SetLCDReg
    406           
    407              m = MemUsage();
   \   0ACF  120000            LCALL   $REFFN MemUsage
   \   0AD2  7D00              MOV     R5,#0
   \   0AD4  900000            MOV     DPTR,#$LOCBX DispMemUsage+2
   \   0AD7  ED                MOV     A,R5
   \   0AD8  F0                MOVX    @DPTR,A
   \   0AD9  A3                INC     DPTR
   \   0ADA  EC                MOV     A,R4
   \   0ADB  F0                MOVX    @DPTR,A
    408              
    409              for (j=0 ; j<13 ; j++) SetLCDReg(12, '=');
   \   0ADC  900000            MOV     DPTR,#$LOCBX DispMemUsage
   \   0ADF  E4                CLR     A
   \   0AE0  F0                MOVX    @DPTR,A
   \   0AE1  A3                INC     DPTR
   \   0AE2  F0                MOVX    @DPTR,A
   \   0AE3            ?0127:
   \   0AE3  C3                CLR     C
   \   0AE4  900000            MOV     DPTR,#$LOCBX DispMemUsage+1
   \   0AE7  E0                MOVX    A,@DPTR
   \   0AE8  940D              SUBB    A,#13
   \   0AEA  900000            MOV     DPTR,#$LOCBX DispMemUsage
   \   0AED  E0                MOVX    A,@DPTR
   \   0AEE  6480              XRL     A,#128
   \   0AF0  9480              SUBB    A,#128
   \   0AF2  5017              JNC     ?0126
   \   0AF4            ?0128:
   \   0AF4  7D3D              MOV     R5,#61
   \   0AF6  7C0C              MOV     R4,#12
   \   0AF8  120000            LCALL   $REFFN SetLCDReg
   \   0AFB  900000            MOV     DPTR,#$LOCBX DispMemUsage+1
   \   0AFE  E0                MOVX    A,@DPTR
   \   0AFF  04                INC     A
   \   0B00  F0                MOVX    @DPTR,A
   \   0B01  900000            MOV     DPTR,#$LOCBX DispMemUsage
   \   0B04  7003              JNZ     ?0282
   \   0B06  E0                MOVX    A,@DPTR
   \   0B07  04                INC     A
   \   0B08  F0                MOVX    @DPTR,A
   \   0B09            ?0282:
   \   0B09  80D8              SJMP    ?0127
   \   0B0B            ?0126:
    410              for (j=0 ; j<m ; j++) SetLCDReg(12, '#');
   \   0B0B  E4                CLR     A
   \   0B0C  F0                MOVX    @DPTR,A
   \   0B0D  A3                INC     DPTR
   \   0B0E  F0                MOVX    @DPTR,A
   \   0B0F            ?0131:
   \   0B0F  900000            MOV     DPTR,#$LOCBX DispMemUsage
   \   0B12  E0                MOVX    A,@DPTR
   \   0B13  FD                MOV     R5,A
   \   0B14  A3                INC     DPTR
   \   0B15  E0                MOVX    A,@DPTR
   \   0B16  FC                MOV     R4,A
   \   0B17  A3                INC     DPTR
   \   0B18  A3                INC     DPTR
   \   0B19  E0                MOVX    A,@DPTR
   \   0B1A  D3                SETB    C
   \   0B1B  9C                SUBB    A,R4
   \   0B1C  900000            MOV     DPTR,#$LOCBX DispMemUsage+2
   \   0B1F  E0                MOVX    A,@DPTR
   \   0B20  6480              XRL     A,#128
   \   0B22  CD                XCH     A,R5
   \   0B23  6480              XRL     A,#128
   \   0B25  CD                XCH     A,R5
   \   0B26  9D                SUBB    A,R5
   \   0B27  4017              JC      ?0130
   \   0B29            ?0132:
   \   0B29  7D23              MOV     R5,#35
   \   0B2B  7C0C              MOV     R4,#12
   \   0B2D  120000            LCALL   $REFFN SetLCDReg
   \   0B30  900000            MOV     DPTR,#$LOCBX DispMemUsage+1
   \   0B33  E0                MOVX    A,@DPTR
   \   0B34  04                INC     A
   \   0B35  F0                MOVX    @DPTR,A
   \   0B36  900000            MOV     DPTR,#$LOCBX DispMemUsage
   \   0B39  7003              JNZ     ?0283
   \   0B3B  E0                MOVX    A,@DPTR
   \   0B3C  04                INC     A
   \   0B3D  F0                MOVX    @DPTR,A
   \   0B3E            ?0283:
   \   0B3E  80CF              SJMP    ?0131
   \   0B40            ?0130:
    411              for (j=0 ; j<16-m ; j++) SetLCDReg(12, '.');
   \   0B40  900000            MOV     DPTR,#$LOCBX DispMemUsage
   \   0B43  E4                CLR     A
   \   0B44  F0                MOVX    @DPTR,A
   \   0B45  A3                INC     DPTR
   \   0B46  F0                MOVX    @DPTR,A
   \   0B47            ?0135:
   \   0B47  E4                CLR     A
   \   0B48  FD                MOV     R5,A
   \   0B49  7E10              MOV     R6,#16
   \   0B4B  C3                CLR     C
   \   0B4C  900000            MOV     DPTR,#$LOCBX DispMemUsage+3
   \   0B4F  E0                MOVX    A,@DPTR
   \   0B50  CE                XCH     A,R6
   \   0B51  9E                SUBB    A,R6
   \   0B52  FC                MOV     R4,A
   \   0B53  900000            MOV     DPTR,#$LOCBX DispMemUsage+2
   \   0B56  E0                MOVX    A,@DPTR
   \   0B57  FE                MOV     R6,A
   \   0B58  ED                MOV     A,R5
   \   0B59  9E                SUBB    A,R6
   \   0B5A  FD                MOV     R5,A
   \   0B5B  900000            MOV     DPTR,#$LOCBX DispMemUsage+1
   \   0B5E  E0                MOVX    A,@DPTR
   \   0B5F  C3                CLR     C
   \   0B60  9C                SUBB    A,R4
   \   0B61  900000            MOV     DPTR,#$LOCBX DispMemUsage
   \   0B64  E0                MOVX    A,@DPTR
   \   0B65  6480              XRL     A,#128
   \   0B67  CD                XCH     A,R5
   \   0B68  6480              XRL     A,#128
   \   0B6A  CD                XCH     A,R5
   \   0B6B  9D                SUBB    A,R5
   \   0B6C  5017              JNC     ?0134
   \   0B6E            ?0136:
   \   0B6E  7D2E              MOV     R5,#46
   \   0B70  7C0C              MOV     R4,#12
   \   0B72  120000            LCALL   $REFFN SetLCDReg
   \   0B75  900000            MOV     DPTR,#$LOCBX DispMemUsage+1
   \   0B78  E0                MOVX    A,@DPTR
   \   0B79  04                INC     A
   \   0B7A  F0                MOVX    @DPTR,A
   \   0B7B  900000            MOV     DPTR,#$LOCBX DispMemUsage
   \   0B7E  7003              JNZ     ?0284
   \   0B80  E0                MOVX    A,@DPTR
   \   0B81  04                INC     A
   \   0B82  F0                MOVX    @DPTR,A
   \   0B83            ?0284:
   \   0B83  80C2              SJMP    ?0135
   \   0B85            ?0134:
    412              for (j=0 ; j<12 ; j++) SetLCDReg(12, '=');
   \   0B85  E4                CLR     A
   \   0B86  F0                MOVX    @DPTR,A
   \   0B87  A3                INC     DPTR
   \   0B88  F0                MOVX    @DPTR,A
   \   0B89            ?0139:
   \   0B89  C3                CLR     C
   \   0B8A  900000            MOV     DPTR,#$LOCBX DispMemUsage+1
   \   0B8D  E0                MOVX    A,@DPTR
   \   0B8E  940C              SUBB    A,#12
   \   0B90  900000            MOV     DPTR,#$LOCBX DispMemUsage
   \   0B93  E0                MOVX    A,@DPTR
   \   0B94  6480              XRL     A,#128
   \   0B96  9480              SUBB    A,#128
   \   0B98  5017              JNC     ?0138
   \   0B9A            ?0140:
   \   0B9A  7D3D              MOV     R5,#61
   \   0B9C  7C0C              MOV     R4,#12
   \   0B9E  120000            LCALL   $REFFN SetLCDReg
   \   0BA1  900000            MOV     DPTR,#$LOCBX DispMemUsage+1
   \   0BA4  E0                MOVX    A,@DPTR
   \   0BA5  04                INC     A
   \   0BA6  F0                MOVX    @DPTR,A
   \   0BA7  900000            MOV     DPTR,#$LOCBX DispMemUsage
   \   0BAA  7003              JNZ     ?0285
   \   0BAC  E0                MOVX    A,@DPTR
   \   0BAD  04                INC     A
   \   0BAE  F0                MOVX    @DPTR,A
   \   0BAF            ?0285:
    413          }
   \   0BAF  80D8              SJMP    ?0139
   \   0BB1            ?0138:
   \   0BB1  900000            MOV     DPTR,#$LOCBX DispMemUsage+4
   \   0BB4  E0                MOVX    A,@DPTR
   \   0BB5  F8                MOV     R0,A
   \   0BB6  A3                INC     DPTR
   \   0BB7  E0                MOVX    A,@DPTR
   \   0BB8  C0E0              PUSH    ACC
   \   0BBA  E8                MOV     A,R0
   \   0BBB  C0E0              PUSH    ACC
   \   0BBD  22                RET
    414          
    415          
    416          
    417          
    418          
    419              
    420              
    421          //-----------------------------------------------------
    422          //  OptionsMenu
    423          
    424          void    OptionCursorAt(int  newCursorPos)
    425          {
   \   0BBE            OptionCursorAt:
   \   0BBE  900000            MOV     DPTR,#$LOCBX OptionCursorAt
   \   0BC1  D0E0              POP     ACC
   \   0BC3  F0                MOVX    @DPTR,A
   \   0BC4  A3                INC     DPTR
   \   0BC5  D0E0              POP     ACC
   \   0BC7  F0                MOVX    @DPTR,A
    426              SetLCDReg(10, optionCursorPos * LCD_CHAR_PER_ROW + MENU_LEFT_COLUMN - 1);
   \   0BC8  A3                INC     DPTR
   \   0BC9  ED                MOV     A,R5
   \   0BCA  F0                MOVX    @DPTR,A
   \   0BCB  A3                INC     DPTR
   \   0BCC  EC                MOV     A,R4
   \   0BCD  F0                MOVX    @DPTR,A
   \   0BCE  90092B            MOV     DPTR,#optionCursorPos+1
   \   0BD1  E0                MOVX    A,@DPTR
   \   0BD2  75F02A            MOV     B,#42
   \   0BD5  A4                MUL     AB
   \   0BD6  2403              ADD     A,#3
   \   0BD8  FD                MOV     R5,A
   \   0BD9  7C0A              MOV     R4,#10
   \   0BDB  120000            LCALL   $REFFN SetLCDReg
    427              SetLCDReg(11, 0x00);
   \   0BDE  7D00              MOV     R5,#0
   \   0BE0  7C0B              MOV     R4,#11
   \   0BE2  120000            LCALL   $REFFN SetLCDReg
    428              DispString(" o ");
   \   0BE5  7D53              MOV     R5,#LOW(?0142)
   \   0BE7  7E00              MOV     R6,#HIGH(?0142)
   \   0BE9  7F02              MOV     R7,#2
   \   0BEB  120000            LCALL   $REFFN DispString
    429              
    430              SetLCDReg(10, newCursorPos * LCD_CHAR_PER_ROW + MENU_LEFT_COLUMN - 1);
   \   0BEE  900000            MOV     DPTR,#$LOCBX OptionCursorAt+3
   \   0BF1  E0                MOVX    A,@DPTR
   \   0BF2  75F02A            MOV     B,#42
   \   0BF5  A4                MUL     AB
   \   0BF6  2403              ADD     A,#3
   \   0BF8  FD                MOV     R5,A
   \   0BF9  7C0A              MOV     R4,#10
   \   0BFB  120000            LCALL   $REFFN SetLCDReg
    431              SetLCDReg(11, 0x00);
   \   0BFE  7D00              MOV     R5,#0
   \   0C00  7C0B              MOV     R4,#11
   \   0C02  120000            LCALL   $REFFN SetLCDReg
    432              DispString("[o]");
   \   0C05  7D57              MOV     R5,#LOW(?0143)
   \   0C07  7E00              MOV     R6,#HIGH(?0143)
   \   0C09  7F02              MOV     R7,#2
   \   0C0B  120000            LCALL   $REFFN DispString
    433              
    434              optionCursorPos = newCursorPos;
    435          }
   \   0C0E  900000            MOV     DPTR,#$LOCBX OptionCursorAt+2
   \   0C11  E0                MOVX    A,@DPTR
   \   0C12  FD                MOV     R5,A
   \   0C13  A3                INC     DPTR
   \   0C14  E0                MOVX    A,@DPTR
   \   0C15  90092A            MOV     DPTR,#optionCursorPos
   \   0C18  CD                XCH     A,R5
   \   0C19  F0                MOVX    @DPTR,A
   \   0C1A  A3                INC     DPTR
   \   0C1B  CD                XCH     A,R5
   \   0C1C  F0                MOVX    @DPTR,A
   \   0C1D  900000            MOV     DPTR,#$LOCBX OptionCursorAt
   \   0C20  E0                MOVX    A,@DPTR
   \   0C21  F8                MOV     R0,A
   \   0C22  A3                INC     DPTR
   \   0C23  E0                MOVX    A,@DPTR
   \   0C24  C0E0              PUSH    ACC
   \   0C26  E8                MOV     A,R0
   \   0C27  C0E0              PUSH    ACC
   \   0C29  22                RET
    436          
    437          
    438          void    DispOptionsMenu(char answerOn, char numSignals)
    439          {
   \   0C2A            DispOptionsMenu:
   \   0C2A  900000            MOV     DPTR,#$LOCBX DispOptionsMenu+7
   \   0C2D  D0E0              POP     ACC
   \   0C2F  F0                MOVX    @DPTR,A
   \   0C30  A3                INC     DPTR
   \   0C31  D0E0              POP     ACC
   \   0C33  F0                MOVX    @DPTR,A
    440              xdata char  i, j;
    441              xdata char  msg[5];
    442          
    443              SetLCDReg(10, 0x00);
   \   0C34  ED                MOV     A,R5
   \   0C35  A3                INC     DPTR
   \   0C36  A3                INC     DPTR
   \   0C37  F0                MOVX    @DPTR,A
   \   0C38  EC                MOV     A,R4
   \   0C39  900000            MOV     DPTR,#$LOCBX DispOptionsMenu+9
   \   0C3C  F0                MOVX    @DPTR,A
   \   0C3D  7D00              MOV     R5,#0
   \   0C3F  7C0A              MOV     R4,#10
   \   0C41  120000            LCALL   $REFFN SetLCDReg
    444              SetLCDReg(11, 0x00);
   \   0C44  7D00              MOV     R5,#0
   \   0C46  7C0B              MOV     R4,#11
   \   0C48  120000            LCALL   $REFFN SetLCDReg
    445              
    446              for (i = 0 ; i<42 ; i++) {
   \   0C4B  E4                CLR     A
   \   0C4C  900000            MOV     DPTR,#$LOCBX DispOptionsMenu
   \   0C4F  F0                MOVX    @DPTR,A
   \   0C50            ?0145:
   \   0C50  900000            MOV     DPTR,#$LOCBX DispOptionsMenu
   \   0C53  E0                MOVX    A,@DPTR
   \   0C54  24D6              ADD     A,#214
   \   0C56  4022              JC      ?0144
   \   0C58            ?0146:
    447                  for (j=0 ; j<6 ; j++) {
   \   0C58  E4                CLR     A
   \   0C59  A3                INC     DPTR
   \   0C5A  F0                MOVX    @DPTR,A
   \   0C5B            ?0149:
   \   0C5B  900000            MOV     DPTR,#$LOCBX DispOptionsMenu+1
   \   0C5E  E0                MOVX    A,@DPTR
   \   0C5F  24FA              ADD     A,#250
   \   0C61  400F              JC      ?0148
   \   0C63            ?0150:
    448                      SetLCDReg(12, ' ');
   \   0C63  7D20              MOV     R5,#32
   \   0C65  7C0C              MOV     R4,#12
   \   0C67  120000            LCALL   $REFFN SetLCDReg
    449                  }
   \   0C6A  900000            MOV     DPTR,#$LOCBX DispOptionsMenu+1
   \   0C6D  E0                MOVX    A,@DPTR
   \   0C6E  04                INC     A
   \   0C6F  F0                MOVX    @DPTR,A
    450              }
   \   0C70  80E9              SJMP    ?0149
   \   0C72            ?0148:
   \   0C72  900000            MOV     DPTR,#$LOCBX DispOptionsMenu
   \   0C75  E0                MOVX    A,@DPTR
   \   0C76  04                INC     A
   \   0C77  F0                MOVX    @DPTR,A
   \   0C78  80D6              SJMP    ?0145
   \   0C7A            ?0144:
    451          
    452                  SetLCDReg(10, MENU_LEFT_COLUMN + MENU_ITEM_SPKR_VOL * LCD_CHAR_PER_ROW);
   \   0C7A  7D04              MOV     R5,#4
   \   0C7C  7C0A              MOV     R4,#10
   \   0C7E  120000            LCALL   $REFFN SetLCDReg
    453              SetLCDReg(11, 0);
   \   0C81  7D00              MOV     R5,#0
   \   0C83  7C0B              MOV     R4,#11
   \   0C85  120000            LCALL   $REFFN SetLCDReg
    454              DispString("o SPEAKER VOLUME [");
   \   0C88  7D5B              MOV     R5,#LOW(?0152)
   \   0C8A  7E00              MOV     R6,#HIGH(?0152)
   \   0C8C  7F02              MOV     R7,#2
   \   0C8E  120000            LCALL   $REFFN DispString
    455          
    456                  for (i=0 ; i<speakerVolume ; i+=4) SetLCDReg(12, '#');
   \   0C91  E4                CLR     A
   \   0C92  900000            MOV     DPTR,#$LOCBX DispOptionsMenu
   \   0C95  F0                MOVX    @DPTR,A
   \   0C96            ?0154:
   \   0C96  900000            MOV     DPTR,#$LOCBX DispOptionsMenu
   \   0C99  E0                MOVX    A,@DPTR
   \   0C9A  FC                MOV     R4,A
   \   0C9B  900000            MOV     DPTR,#speakerVolume
   \   0C9E  E0                MOVX    A,@DPTR
   \   0C9F  D3                SETB    C
   \   0CA0  9C                SUBB    A,R4
   \   0CA1  4010              JC      ?0153
   \   0CA3            ?0155:
   \   0CA3  7D23              MOV     R5,#35
   \   0CA5  7C0C              MOV     R4,#12
   \   0CA7  120000            LCALL   $REFFN SetLCDReg
   \   0CAA  900000            MOV     DPTR,#$LOCBX DispOptionsMenu
   \   0CAD  E0                MOVX    A,@DPTR
   \   0CAE  2404              ADD     A,#4
   \   0CB0  F0                MOVX    @DPTR,A
   \   0CB1  80E3              SJMP    ?0154
   \   0CB3            ?0153:
   \   0CB3            ?0158:
    457                  for ( ; i<64 ; i+=4) SetLCDReg(12, '.');
   \   0CB3  900000            MOV     DPTR,#$LOCBX DispOptionsMenu
   \   0CB6  E0                MOVX    A,@DPTR
   \   0CB7  24C0              ADD     A,#192
   \   0CB9  4010              JC      ?0157
   \   0CBB            ?0159:
   \   0CBB  7D2E              MOV     R5,#46
   \   0CBD  7C0C              MOV     R4,#12
   \   0CBF  120000            LCALL   $REFFN SetLCDReg
   \   0CC2  900000            MOV     DPTR,#$LOCBX DispOptionsMenu
   \   0CC5  E0                MOVX    A,@DPTR
   \   0CC6  2404              ADD     A,#4
   \   0CC8  F0                MOVX    @DPTR,A
   \   0CC9  80E8              SJMP    ?0158
   \   0CCB            ?0157:
    458                  SetLCDReg(12, ']');
   \   0CCB  7D5D              MOV     R5,#93
   \   0CCD  7C0C              MOV     R4,#12
   \   0CCF  120000            LCALL   $REFFN SetLCDReg
    459              
    460                  SetLCDReg(10, MENU_LEFT_COLUMN + MENU_ITEM_ANS_ONOFF * LCD_CHAR_PER_ROW);
   \   0CD2  7D2E              MOV     R5,#46
   \   0CD4  7C0A              MOV     R4,#10
   \   0CD6  120000            LCALL   $REFFN SetLCDReg
    461              SetLCDReg(11, 0);
   \   0CD9  7D00              MOV     R5,#0
   \   0CDB  7C0B              MOV     R4,#11
   \   0CDD  120000            LCALL   $REFFN SetLCDReg
    462              DispString("o ANSWERING ");
   \   0CE0  7D6E              MOV     R5,#LOW(?0161)
   \   0CE2  7E00              MOV     R6,#HIGH(?0161)
   \   0CE4  7F02              MOV     R7,#2
   \   0CE6  120000            LCALL   $REFFN DispString
    463              if (answerOn) {
   \   0CE9  900000            MOV     DPTR,#$LOCBX DispOptionsMenu+9
   \   0CEC  E0                MOVX    A,@DPTR
   \   0CED  600B              JZ      ?0163
   \   0CEF            ?0162:
    464                  DispString("ON");
   \   0CEF  7D7B              MOV     R5,#LOW(?0164)
   \   0CF1  7E00              MOV     R6,#HIGH(?0164)
   \   0CF3  7F02              MOV     R7,#2
   \   0CF5  120000            LCALL   $REFFN DispString
    465              } else {
   \   0CF8  8009              SJMP    ?0165
   \   0CFA            ?0163:
    466                  DispString("OFF");
   \   0CFA  7D7E              MOV     R5,#LOW(?0166)
   \   0CFC  7E00              MOV     R6,#HIGH(?0166)
   \   0CFE  7F02              MOV     R7,#2
   \   0D00  120000            LCALL   $REFFN DispString
   \   0D03            ?0165:
    467              }
    468          
    469              SetLCDReg(10, MENU_LEFT_COLUMN + MENU_ITEM_MEMO * LCD_CHAR_PER_ROW);        // 50
   \   0D03  7D58              MOV     R5,#88
   \   0D05  7C0A              MOV     R4,#10
   \   0D07  120000            LCALL   $REFFN SetLCDReg
    470              SetLCDReg(11, 0);
   \   0D0A  7D00              MOV     R5,#0
   \   0D0C  7C0B              MOV     R4,#11
   \   0D0E  120000            LCALL   $REFFN SetLCDReg
    471              DispString("o PLAY AND RECORD MEMO");
   \   0D11  7D82              MOV     R5,#LOW(?0167)
   \   0D13  7E00              MOV     R6,#HIGH(?0167)
   \   0D15  7F02              MOV     R7,#2
   \   0D17  120000            LCALL   $REFFN DispString
    472          
    473              SetLCDReg(10, MENU_LEFT_COLUMN + MENU_ITEM_TIMEDATE * LCD_CHAR_PER_ROW);    // 92
   \   0D1A  7D82              MOV     R5,#130
   \   0D1C  7C0A              MOV     R4,#10
   \   0D1E  120000            LCALL   $REFFN SetLCDReg
    474              SetLCDReg(11, 0);
   \   0D21  7D00              MOV     R5,#0
   \   0D23  7C0B              MOV     R4,#11
   \   0D25  120000            LCALL   $REFFN SetLCDReg
    475              DispString("o SET TIME AND DATE");
   \   0D28  7D99              MOV     R5,#LOW(?0168)
   \   0D2A  7E00              MOV     R6,#HIGH(?0168)
   \   0D2C  7F02              MOV     R7,#2
   \   0D2E  120000            LCALL   $REFFN DispString
    476          
    477              SetLCDReg(10, MENU_LEFT_COLUMN + MENU_ITEM_NUMSIG * LCD_CHAR_PER_ROW);      // 134
   \   0D31  7DAC              MOV     R5,#172
   \   0D33  7C0A              MOV     R4,#10
   \   0D35  120000            LCALL   $REFFN SetLCDReg
    478              SetLCDReg(11, 0);
   \   0D38  7D00              MOV     R5,#0
   \   0D3A  7C0B              MOV     R4,#11
   \   0D3C  120000            LCALL   $REFFN SetLCDReg
    479              DispString("o ANSWER AFTER ");
   \   0D3F  7DAD              MOV     R5,#LOW(?0169)
   \   0D41  7E00              MOV     R6,#HIGH(?0169)
   \   0D43  7F02              MOV     R7,#2
   \   0D45  120000            LCALL   $REFFN DispString
    480              myInt2DecStr(numSignals, msg);
   \   0D48  7401              MOV     A,#1
   \   0D4A  900000            MOV     DPTR,#$PRMBX myInt2DecStr+2
   \   0D4D  F0                MOVX    @DPTR,A
   \   0D4E  A3                INC     DPTR
   \   0D4F  7400              MOV     A,#HIGH ($LOCBX DispOptionsMenu+2)
   \   0D51  F0                MOVX    @DPTR,A
   \   0D52  A3                INC     DPTR
   \   0D53  7400              MOV     A,#LOW ($LOCBX DispOptionsMenu+2)
   \   0D55  F0                MOVX    @DPTR,A
   \   0D56  900000            MOV     DPTR,#$LOCBX DispOptionsMenu+10
   \   0D59  E0                MOVX    A,@DPTR
   \   0D5A  7D00              MOV     R5,#0
   \   0D5C  FC                MOV     R4,A
   \   0D5D  120000            LCALL   $REFFN myInt2DecStr
    481              DispString(msg);
   \   0D60  7D00              MOV     R5,#LOW ($LOCBX DispOptionsMenu+2)
   \   0D62  7E00              MOV     R6,#HIGH ($LOCBX DispOptionsMenu+2)
   \   0D64  7F01              MOV     R7,#1
   \   0D66  120000            LCALL   $REFFN DispString
    482              DispString(" SIGNALS");
   \   0D69  7DBD              MOV     R5,#LOW(?0170)
   \   0D6B  7E00              MOV     R6,#HIGH(?0170)
   \   0D6D  7F02              MOV     R7,#2
   \   0D6F  120000            LCALL   $REFFN DispString
    483          
    484              SetLCDReg(10, MENU_LEFT_COLUMN + MENU_ITEM_ERASE * LCD_CHAR_PER_ROW);       // 176
   \   0D72  7DD6              MOV     R5,#214
   \   0D74  7C0A              MOV     R4,#10
   \   0D76  120000            LCALL   $REFFN SetLCDReg
    485              SetLCDReg(11, 0);
   \   0D79  7D00              MOV     R5,#0
   \   0D7B  7C0B              MOV     R4,#11
   \   0D7D  120000            LCALL   $REFFN SetLCDReg
    486              DispString("o ERASE MESSAGES");
    487          }
   \   0D80  7DC6              MOV     R5,#LOW(?0171)
   \   0D82  7E00              MOV     R6,#HIGH(?0171)
   \   0D84  7F02              MOV     R7,#2
   \   0D86  120000            LCALL   $REFFN DispString
   \   0D89  900000            MOV     DPTR,#$LOCBX DispOptionsMenu+7
   \   0D8C  E0                MOVX    A,@DPTR
   \   0D8D  F8                MOV     R0,A
   \   0D8E  A3                INC     DPTR
   \   0D8F  E0                MOVX    A,@DPTR
   \   0D90  C0E0              PUSH    ACC
   \   0D92  E8                MOV     A,R0
   \   0D93  C0E0              PUSH    ACC
   \   0D95  22                RET
    488          
    489              
    490          //-----------------------------------------------------
    491          //  Set time and date
    492          
    493           
    494          void    DispSetTimeDate(char cursor, char year, char month, char day, char hour, char minute)
    495          {
   \   0D96            DispSetTimeDate:
   \   0D96  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+52
   \   0D99  D0E0              POP     ACC
   \   0D9B  F0                MOVX    @DPTR,A
   \   0D9C  A3                INC     DPTR
   \   0D9D  D0E0              POP     ACC
   \   0D9F  F0                MOVX    @DPTR,A
    496              xdata char  str[45];
    497              xdata char  msg[5];
    498              xdata int   i;
    499              
    500           
    501              for (i=0 ; i<45 ; i++) str[i] = ' ';
   \   0DA0  900000            MOV     DPTR,#$LOCBX DispSetTimeDate
   \   0DA3  7A2D              MOV     R2,#45
   \   0DA5  7420              MOV     A,#32
   \   0DA7            ?0286:
   \   0DA7  F0                MOVX    @DPTR,A
   \   0DA8  A3                INC     DPTR
   \   0DA9  DAFC              DJNZ    R2,?0286
   \   0DAB  7400              MOV     A,#0
   \   0DAD            ?0173:
   \   0DAD            ?0174:
   \   0DAD            ?0172:
    502          
    503              str[38] = 0; 
   \   0DAD  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+38
   \   0DB0  F0                MOVX    @DPTR,A
    504          
    505              str[1] = '2';
   \   0DB1  7432              MOV     A,#50
   \   0DB3  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+1
   \   0DB6  F0                MOVX    @DPTR,A
    506              str[2] = '0';
   \   0DB7  7430              MOV     A,#48
   \   0DB9  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+2
   \   0DBC  F0                MOVX    @DPTR,A
    507          
    508              myInt2DecStr00(year, msg);
   \   0DBD  EF                MOV     A,R7
   \   0DBE  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+57
   \   0DC1  F0                MOVX    @DPTR,A
   \   0DC2  EE                MOV     A,R6
   \   0DC3  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+56
   \   0DC6  F0                MOVX    @DPTR,A
   \   0DC7  ED                MOV     A,R5
   \   0DC8  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+55
   \   0DCB  F0                MOVX    @DPTR,A
   \   0DCC  EC                MOV     A,R4
   \   0DCD  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+54
   \   0DD0  F0                MOVX    @DPTR,A
   \   0DD1  ED                MOV     A,R5
   \   0DD2  FC                MOV     R4,A
   \   0DD3  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+45)
   \   0DD5  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+45)
   \   0DD7  7F01              MOV     R7,#1
   \   0DD9  120000            LCALL   $REFFN myInt2DecStr00
    509              str[3] = msg[0];
   \   0DDC  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+45
   \   0DDF  E0                MOVX    A,@DPTR
   \   0DE0  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+3
   \   0DE3  F0                MOVX    @DPTR,A
    510              str[4] = msg[1];
   \   0DE4  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+46
   \   0DE7  E0                MOVX    A,@DPTR
   \   0DE8  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+4
   \   0DEB  F0                MOVX    @DPTR,A
    511              if (month == 1) {
   \   0DEC  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+56
   \   0DEF  E0                MOVX    A,@DPTR
   \   0DF0  14                DEC     A
   \   0DF1  7015              JNZ     ?0177
   \   0DF3            ?0176:
    512                  strcpy((char*) (str + 10), "JAN");
   \   0DF3  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0DF5  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0DF7  7F01              MOV     R7,#1
   \   0DF9  79D7              MOV     R1,#LOW(?0178)
   \   0DFB  7A00              MOV     R2,#HIGH(?0178)
   \   0DFD  7B02              MOV     R3,#2
   \   0DFF  75F003            MOV     B,#3
   \   0E02  120000            LCALL   ?BYTE_COPY_L08
   \   0E05  020F09            LJMP    ?0179
   \   0E08            ?0177:
    513              } else if (month == 2) {
   \   0E08  E0                MOVX    A,@DPTR
   \   0E09  B40215            CJNE    A,#2,?0181
   \   0E0C            ?0180:
    514                  strcpy((char*) (str + 10), "FEB");
   \   0E0C  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0E0E  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0E10  7F01              MOV     R7,#1
   \   0E12  79DB              MOV     R1,#LOW(?0182)
   \   0E14  7A00              MOV     R2,#HIGH(?0182)
   \   0E16  7B02              MOV     R3,#2
   \   0E18  75F003            MOV     B,#3
   \   0E1B  120000            LCALL   ?BYTE_COPY_L08
   \   0E1E  020F09            LJMP    ?0183
   \   0E21            ?0181:
    515              } else if (month == 3) {
   \   0E21  B40315            CJNE    A,#3,?0185
   \   0E24            ?0184:
    516                  strcpy((char*) (str + 10), "MAR");
   \   0E24  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0E26  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0E28  7F01              MOV     R7,#1
   \   0E2A  79DF              MOV     R1,#LOW(?0186)
   \   0E2C  7A00              MOV     R2,#HIGH(?0186)
   \   0E2E  7B02              MOV     R3,#2
   \   0E30  75F003            MOV     B,#3
   \   0E33  120000            LCALL   ?BYTE_COPY_L08
   \   0E36  020F09            LJMP    ?0187
   \   0E39            ?0185:
    517              } else if (month == 4) {
   \   0E39  B40415            CJNE    A,#4,?0189
   \   0E3C            ?0188:
    518                  strcpy((char*) (str + 10), "APR");
   \   0E3C  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0E3E  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0E40  7F01              MOV     R7,#1
   \   0E42  79E3              MOV     R1,#LOW(?0190)
   \   0E44  7A00              MOV     R2,#HIGH(?0190)
   \   0E46  7B02              MOV     R3,#2
   \   0E48  75F003            MOV     B,#3
   \   0E4B  120000            LCALL   ?BYTE_COPY_L08
   \   0E4E  020F09            LJMP    ?0191
   \   0E51            ?0189:
    519              } else if (month == 5) {
   \   0E51  B40515            CJNE    A,#5,?0193
   \   0E54            ?0192:
    520                  strcpy((char*) (str + 10), "MAY");
   \   0E54  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0E56  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0E58  7F01              MOV     R7,#1
   \   0E5A  79E7              MOV     R1,#LOW(?0194)
   \   0E5C  7A00              MOV     R2,#HIGH(?0194)
   \   0E5E  7B02              MOV     R3,#2
   \   0E60  75F003            MOV     B,#3
   \   0E63  120000            LCALL   ?BYTE_COPY_L08
   \   0E66  020F09            LJMP    ?0195
   \   0E69            ?0193:
    521              } else if (month == 6) {
   \   0E69  B40615            CJNE    A,#6,?0197
   \   0E6C            ?0196:
    522                  strcpy((char*) (str + 10), "JUN");
   \   0E6C  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0E6E  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0E70  7F01              MOV     R7,#1
   \   0E72  79EB              MOV     R1,#LOW(?0198)
   \   0E74  7A00              MOV     R2,#HIGH(?0198)
   \   0E76  7B02              MOV     R3,#2
   \   0E78  75F003            MOV     B,#3
   \   0E7B  120000            LCALL   ?BYTE_COPY_L08
   \   0E7E  020F09            LJMP    ?0199
   \   0E81            ?0197:
    523              } else if (month == 7) {
   \   0E81  B40714            CJNE    A,#7,?0201
   \   0E84            ?0200:
    524                  strcpy((char*) (str + 10), "JUL");
   \   0E84  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0E86  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0E88  7F01              MOV     R7,#1
   \   0E8A  79EF              MOV     R1,#LOW(?0202)
   \   0E8C  7A00              MOV     R2,#HIGH(?0202)
   \   0E8E  7B02              MOV     R3,#2
   \   0E90  75F003            MOV     B,#3
   \   0E93  120000            LCALL   ?BYTE_COPY_L08
   \   0E96  8071              SJMP    ?0203
   \   0E98            ?0201:
    525              } else if (month == 8) {
   \   0E98  B40814            CJNE    A,#8,?0205
   \   0E9B            ?0204:
    526                  strcpy((char*) (str + 10), "AUG");
   \   0E9B  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0E9D  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0E9F  7F01              MOV     R7,#1
   \   0EA1  79F3              MOV     R1,#LOW(?0206)
   \   0EA3  7A00              MOV     R2,#HIGH(?0206)
   \   0EA5  7B02              MOV     R3,#2
   \   0EA7  75F003            MOV     B,#3
   \   0EAA  120000            LCALL   ?BYTE_COPY_L08
   \   0EAD  805A              SJMP    ?0207
   \   0EAF            ?0205:
    527              } else if (month == 9) {
   \   0EAF  B40914            CJNE    A,#9,?0209
   \   0EB2            ?0208:
    528                  strcpy((char*) (str + 10), "SEP");
   \   0EB2  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0EB4  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0EB6  7F01              MOV     R7,#1
   \   0EB8  79F7              MOV     R1,#LOW(?0210)
   \   0EBA  7A00              MOV     R2,#HIGH(?0210)
   \   0EBC  7B02              MOV     R3,#2
   \   0EBE  75F003            MOV     B,#3
   \   0EC1  120000            LCALL   ?BYTE_COPY_L08
   \   0EC4  8043              SJMP    ?0211
   \   0EC6            ?0209:
    529              } else if (month == 10) {
   \   0EC6  B40A14            CJNE    A,#10,?0213
   \   0EC9            ?0212:
    530                  strcpy((char*) (str + 10), "OKT");
   \   0EC9  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0ECB  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0ECD  7F01              MOV     R7,#1
   \   0ECF  79FB              MOV     R1,#LOW(?0214)
   \   0ED1  7A00              MOV     R2,#HIGH(?0214)
   \   0ED3  7B02              MOV     R3,#2
   \   0ED5  75F003            MOV     B,#3
   \   0ED8  120000            LCALL   ?BYTE_COPY_L08
   \   0EDB  802C              SJMP    ?0215
   \   0EDD            ?0213:
    531              } else if (month == 11) {
   \   0EDD  B40B14            CJNE    A,#11,?0217
   \   0EE0            ?0216:
    532                  strcpy((char*) (str + 10), "NOV");
   \   0EE0  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0EE2  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0EE4  7F01              MOV     R7,#1
   \   0EE6  79FF              MOV     R1,#LOW(?0218)
   \   0EE8  7A00              MOV     R2,#HIGH(?0218)
   \   0EEA  7B02              MOV     R3,#2
   \   0EEC  75F003            MOV     B,#3
   \   0EEF  120000            LCALL   ?BYTE_COPY_L08
   \   0EF2  8015              SJMP    ?0219
   \   0EF4            ?0217:
    533              } else if (month == 12) {
   \   0EF4  B40C12            CJNE    A,#12,?0221
   \   0EF7            ?0220:
    534                  strcpy((char*) (str + 10), "DEC");
   \   0EF7  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+10)
   \   0EF9  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+10)
   \   0EFB  7F01              MOV     R7,#1
   \   0EFD  7903              MOV     R1,#LOW(?0222)
   \   0EFF  7A01              MOV     R2,#HIGH(?0222)
   \   0F01  7B02              MOV     R3,#2
   \   0F03  75F003            MOV     B,#3
   \   0F06  120000            LCALL   ?BYTE_COPY_L08
   \   0F09            ?0221:
   \   0F09            ?0219:
   \   0F09            ?0215:
   \   0F09            ?0211:
   \   0F09            ?0207:
   \   0F09            ?0203:
   \   0F09            ?0199:
   \   0F09            ?0195:
   \   0F09            ?0191:
   \   0F09            ?0187:
   \   0F09            ?0183:
   \   0F09            ?0179:
    535              }
    536              str[13] = ' ';  //Tar bort EOS-nolla ditlagd av strcpy
   \   0F09  7420              MOV     A,#32
   \   0F0B  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+13
   \   0F0E  F0                MOVX    @DPTR,A
    537              
    538              myInt2DecStr00(day, msg);
   \   0F0F  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+57
   \   0F12  E0                MOVX    A,@DPTR
   \   0F13  FC                MOV     R4,A
   \   0F14  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+45)
   \   0F16  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+45)
   \   0F18  7F01              MOV     R7,#1
   \   0F1A  120000            LCALL   $REFFN myInt2DecStr00
    539              str[19] = msg[0];
   \   0F1D  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+45
   \   0F20  E0                MOVX    A,@DPTR
   \   0F21  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+19
   \   0F24  F0                MOVX    @DPTR,A
    540              str[20] = msg[1];
   \   0F25  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+46
   \   0F28  E0                MOVX    A,@DPTR
   \   0F29  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+20
   \   0F2C  F0                MOVX    @DPTR,A
    541              myInt2DecStr00(hour, msg);
   \   0F2D  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+58
   \   0F30  E0                MOVX    A,@DPTR
   \   0F31  FC                MOV     R4,A
   \   0F32  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+45)
   \   0F34  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+45)
   \   0F36  7F01              MOV     R7,#1
   \   0F38  120000            LCALL   $REFFN myInt2DecStr00
    542              str[26] = msg[0];
   \   0F3B  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+45
   \   0F3E  E0                MOVX    A,@DPTR
   \   0F3F  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+26
   \   0F42  F0                MOVX    @DPTR,A
    543              str[27] = msg[1];
   \   0F43  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+46
   \   0F46  E0                MOVX    A,@DPTR
   \   0F47  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+27
   \   0F4A  F0                MOVX    @DPTR,A
    544              myInt2DecStr00(minute, msg);
   \   0F4B  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+59
   \   0F4E  E0                MOVX    A,@DPTR
   \   0F4F  FC                MOV     R4,A
   \   0F50  7D00              MOV     R5,#LOW ($LOCBX DispSetTimeDate+45)
   \   0F52  7E00              MOV     R6,#HIGH ($LOCBX DispSetTimeDate+45)
   \   0F54  7F01              MOV     R7,#1
   \   0F56  120000            LCALL   $REFFN myInt2DecStr00
    545              str[35] = msg[0];
   \   0F59  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+45
   \   0F5C  E0                MOVX    A,@DPTR
   \   0F5D  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+35
   \   0F60  F0                MOVX    @DPTR,A
    546              str[36] = msg[1];
   \   0F61  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+46
   \   0F64  E0                MOVX    A,@DPTR
   \   0F65  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+36
   \   0F68  F0                MOVX    @DPTR,A
    547              if (cursor == 0) {
   \   0F69  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+54
   \   0F6C  E0                MOVX    A,@DPTR
   \   0F6D  700E              JNZ     ?0224
   \   0F6F            ?0223:
    548                  str[0] = '[';
   \   0F6F  745B              MOV     A,#91
   \   0F71  900000            MOV     DPTR,#$LOCBX DispSetTimeDate
   \   0F74  F0                MOVX    @DPTR,A
    549                  str[5] = ']';
   \   0F75  745D              MOV     A,#93
   \   0F77  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+5
   \   0F7A  F0                MOVX    @DPTR,A
   \   0F7B  8043              SJMP    ?0225
   \   0F7D            ?0224:
    550              } else if (cursor == 1) {
   \   0F7D  14                DEC     A
   \   0F7E  700E              JNZ     ?0227
   \   0F80            ?0226:
    551                  str[9] = '[';
   \   0F80  745B              MOV     A,#91
   \   0F82  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+9
   \   0F85  F0                MOVX    @DPTR,A
    552                  str[13] = ']';
   \   0F86  745D              MOV     A,#93
   \   0F88  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+13
   \   0F8B  F0                MOVX    @DPTR,A
   \   0F8C  8032              SJMP    ?0228
   \   0F8E            ?0227:
    553              } else if (cursor == 2) {
   \   0F8E  E0                MOVX    A,@DPTR
   \   0F8F  B4020E            CJNE    A,#2,?0230
   \   0F92            ?0229:
    554                  str[18] = '[';
   \   0F92  745B              MOV     A,#91
   \   0F94  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+18
   \   0F97  F0                MOVX    @DPTR,A
    555                  str[21] = ']';
   \   0F98  745D              MOV     A,#93
   \   0F9A  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+21
   \   0F9D  F0                MOVX    @DPTR,A
   \   0F9E  8020              SJMP    ?0231
   \   0FA0            ?0230:
    556              } else if (cursor == 3) {
   \   0FA0  B4030E            CJNE    A,#3,?0233
   \   0FA3            ?0232:
    557                  str[25] = '[';
   \   0FA3  745B              MOV     A,#91
   \   0FA5  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+25
   \   0FA8  F0                MOVX    @DPTR,A
    558                  str[28] = ']';
   \   0FA9  745D              MOV     A,#93
   \   0FAB  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+28
   \   0FAE  F0                MOVX    @DPTR,A
   \   0FAF  800F              SJMP    ?0234
   \   0FB1            ?0233:
    559              } else if (cursor == 4) {
   \   0FB1  B4040C            CJNE    A,#4,?0236
   \   0FB4            ?0235:
    560                  str[34] = '[';
   \   0FB4  745B              MOV     A,#91
   \   0FB6  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+34
   \   0FB9  F0                MOVX    @DPTR,A
    561                  str[37] = ']';
   \   0FBA  745D              MOV     A,#93
   \   0FBC  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+37
   \   0FBF  F0                MOVX    @DPTR,A
   \   0FC0            ?0236:
   \   0FC0            ?0234:
   \   0FC0            ?0231:
   \   0FC0            ?0228:
   \   0FC0            ?0225:
    562              }               
    563              
    564              str[38] = 0; 
   \   0FC0  E4                CLR     A
   \   0FC1  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+38
   \   0FC4  F0                MOVX    @DPTR,A
    565              
    566              SetLCDReg(10, 42*3 + 1);
   \   0FC5  7D7F              MOV     R5,#127
   \   0FC7  7C0A              MOV     R4,#10
   \   0FC9  120000            LCALL   $REFFN SetLCDReg
    567              SetLCDReg(11, 0x00);
   \   0FCC  7D00              MOV     R5,#0
   \   0FCE  7C0B              MOV     R4,#11
   \   0FD0  120000            LCALL   $REFFN SetLCDReg
    568          
    569          //    SendStringEOLRS232(str);
    570              
    571              DispString(str);    
    572          }
   \   0FD3  7D00              MOV     R5,#LOW $LOCBX DispSetTimeDate
   \   0FD5  7E00              MOV     R6,#HIGH $LOCBX DispSetTimeDate
   \   0FD7  7F01              MOV     R7,#1
   \   0FD9  120000            LCALL   $REFFN DispString
   \   0FDC  900000            MOV     DPTR,#$LOCBX DispSetTimeDate+52
   \   0FDF  E0                MOVX    A,@DPTR
   \   0FE0  F8                MOV     R0,A
   \   0FE1  A3                INC     DPTR
   \   0FE2  E0                MOVX    A,@DPTR
   \   0FE3  C0E0              PUSH    ACC
   \   0FE5  E8                MOV     A,R0
   \   0FE6  C0E0              PUSH    ACC
   \   0FE8  22                RET
    573           
    574          void    DispSetTimeDateHead( void )
    575          {
   \   0FE9            DispSetTimeDateHead:
   \   0FE9  900000            MOV     DPTR,#$LOCBX DispSetTimeDateHead+2
   \   0FEC  D0E0              POP     ACC
   \   0FEE  F0                MOVX    @DPTR,A
   \   0FEF  A3                INC     DPTR
   \   0FF0  D0E0              POP     ACC
   \   0FF2  F0                MOVX    @DPTR,A
    576              xdata char  i, j;
    577          
    578              SetLCDReg(10, 0x00);
   \   0FF3  7D00              MOV     R5,#0
   \   0FF5  7C0A              MOV     R4,#10
   \   0FF7  120000            LCALL   $REFFN SetLCDReg
    579              SetLCDReg(11, 0x00);
   \   0FFA  7D00              MOV     R5,#0
   \   0FFC  7C0B              MOV     R4,#11
   \   0FFE  120000            LCALL   $REFFN SetLCDReg
    580              
    581              for (i = 0 ; i<42 ; i++) {
   \   1001  E4                CLR     A
   \   1002  900000            MOV     DPTR,#$LOCBX DispSetTimeDateHead
   \   1005  F0                MOVX    @DPTR,A
   \   1006            ?0238:
   \   1006  900000            MOV     DPTR,#$LOCBX DispSetTimeDateHead
   \   1009  E0                MOVX    A,@DPTR
   \   100A  24D6              ADD     A,#214
   \   100C  4022              JC      ?0237
   \   100E            ?0239:
    582                  for (j=0 ; j<6 ; j++) {
   \   100E  E4                CLR     A
   \   100F  A3                INC     DPTR
   \   1010  F0                MOVX    @DPTR,A
   \   1011            ?0242:
   \   1011  900000            MOV     DPTR,#$LOCBX DispSetTimeDateHead+1
   \   1014  E0                MOVX    A,@DPTR
   \   1015  24FA              ADD     A,#250
   \   1017  400F              JC      ?0241
   \   1019            ?0243:
    583                      SetLCDReg(12, ' ');
   \   1019  7D20              MOV     R5,#32
   \   101B  7C0C              MOV     R4,#12
   \   101D  120000            LCALL   $REFFN SetLCDReg
    584                  }
   \   1020  900000            MOV     DPTR,#$LOCBX DispSetTimeDateHead+1
   \   1023  E0                MOVX    A,@DPTR
   \   1024  04                INC     A
   \   1025  F0                MOVX    @DPTR,A
    585              }
   \   1026  80E9              SJMP    ?0242
   \   1028            ?0241:
   \   1028  900000            MOV     DPTR,#$LOCBX DispSetTimeDateHead
   \   102B  E0                MOVX    A,@DPTR
   \   102C  04                INC     A
   \   102D  F0                MOVX    @DPTR,A
   \   102E  80D6              SJMP    ?0238
   \   1030            ?0237:
    586          
    587              SetLCDReg(10, 44);
   \   1030  7D2C              MOV     R5,#44
   \   1032  7C0A              MOV     R4,#10
   \   1034  120000            LCALL   $REFFN SetLCDReg
    588              SetLCDReg(11, 0);
   \   1037  7D00              MOV     R5,#0
   \   1039  7C0B              MOV     R4,#11
   \   103B  120000            LCALL   $REFFN SetLCDReg
    589              DispString("YEAR    MONTH    DAY    HOUR    MINUTE");
    590          }  
   \   103E  7D07              MOV     R5,#LOW(?0245)
   \   1040  7E01              MOV     R6,#HIGH(?0245)
   \   1042  7F02              MOV     R7,#2
   \   1044  120000            LCALL   $REFFN DispString
   \   1047  900000            MOV     DPTR,#$LOCBX DispSetTimeDateHead+2
   \   104A  E0                MOVX    A,@DPTR
   \   104B  F8                MOV     R0,A
   \   104C  A3                INC     DPTR
   \   104D  E0                MOVX    A,@DPTR
   \   104E  C0E0              PUSH    ACC
   \   1050  E8                MOV     A,R0
   \   1051  C0E0              PUSH    ACC
   \   1053  22                RET
    591              
    592              
    593          //-----------------------------------------------------
    594          //  Fråga: Erase messages?
    595          
    596          void    DispEraseQuest( void )
    597          {
   \   1054            DispEraseQuest:
   \   1054  900000            MOV     DPTR,#$LOCBX DispEraseQuest+2
   \   1057  D0E0              POP     ACC
   \   1059  F0                MOVX    @DPTR,A
   \   105A  A3                INC     DPTR
   \   105B  D0E0              POP     ACC
   \   105D  F0                MOVX    @DPTR,A
    598              xdata char  i, j;
    599           
    600              SetLCDReg(10, 0x00);
   \   105E  7D00              MOV     R5,#0
   \   1060  7C0A              MOV     R4,#10
   \   1062  120000            LCALL   $REFFN SetLCDReg
    601              SetLCDReg(11, 0x00);
   \   1065  7D00              MOV     R5,#0
   \   1067  7C0B              MOV     R4,#11
   \   1069  120000            LCALL   $REFFN SetLCDReg
    602              
    603              for (i = 0 ; i<42 ; i++) {
   \   106C  E4                CLR     A
   \   106D  900000            MOV     DPTR,#$LOCBX DispEraseQuest
   \   1070  F0                MOVX    @DPTR,A
   \   1071            ?0247:
   \   1071  900000            MOV     DPTR,#$LOCBX DispEraseQuest
   \   1074  E0                MOVX    A,@DPTR
   \   1075  24D6              ADD     A,#214
   \   1077  4022              JC      ?0246
   \   1079            ?0248:
    604                  for (j=0 ; j<6 ; j++) {
   \   1079  E4                CLR     A
   \   107A  A3                INC     DPTR
   \   107B  F0                MOVX    @DPTR,A
   \   107C            ?0251:
   \   107C  900000            MOV     DPTR,#$LOCBX DispEraseQuest+1
   \   107F  E0                MOVX    A,@DPTR
   \   1080  24FA              ADD     A,#250
   \   1082  400F              JC      ?0250
   \   1084            ?0252:
    605                      SetLCDReg(12, ' ');
   \   1084  7D20              MOV     R5,#32
   \   1086  7C0C              MOV     R4,#12
   \   1088  120000            LCALL   $REFFN SetLCDReg
    606                  }
   \   108B  900000            MOV     DPTR,#$LOCBX DispEraseQuest+1
   \   108E  E0                MOVX    A,@DPTR
   \   108F  04                INC     A
   \   1090  F0                MOVX    @DPTR,A
    607              }
   \   1091  80E9              SJMP    ?0251
   \   1093            ?0250:
   \   1093  900000            MOV     DPTR,#$LOCBX DispEraseQuest
   \   1096  E0                MOVX    A,@DPTR
   \   1097  04                INC     A
   \   1098  F0                MOVX    @DPTR,A
   \   1099  80D6              SJMP    ?0247
   \   109B            ?0246:
    608          
    609              SetLCDReg(10, 42 + 10);
   \   109B  7D34              MOV     R5,#52
   \   109D  7C0A              MOV     R4,#10
   \   109F  120000            LCALL   $REFFN SetLCDReg
    610              SetLCDReg(11, 0);
   \   10A2  7D00              MOV     R5,#0
   \   10A4  7C0B              MOV     R4,#11
   \   10A6  120000            LCALL   $REFFN SetLCDReg
    611              DispString("Are you sure you want");
   \   10A9  7D2E              MOV     R5,#LOW(?0254)
   \   10AB  7E01              MOV     R6,#HIGH(?0254)
   \   10AD  7F02              MOV     R7,#2
   \   10AF  120000            LCALL   $REFFN DispString
    612          
    613              SetLCDReg(10, 42 * 3 + 10);
   \   10B2  7D88              MOV     R5,#136
   \   10B4  7C0A              MOV     R4,#10
   \   10B6  120000            LCALL   $REFFN SetLCDReg
    614              SetLCDReg(11, 0);
   \   10B9  7D00              MOV     R5,#0
   \   10BB  7C0B              MOV     R4,#11
   \   10BD  120000            LCALL   $REFFN SetLCDReg
    615              DispString("to erase all messages?");
   \   10C0  7D44              MOV     R5,#LOW(?0255)
   \   10C2  7E01              MOV     R6,#HIGH(?0255)
   \   10C4  7F02              MOV     R7,#2
   \   10C6  120000            LCALL   $REFFN DispString
    616              DisplayMenu("          YES                NO");
    617          }
   \   10C9  7D5B              MOV     R5,#LOW(?0256)
   \   10CB  7E01              MOV     R6,#HIGH(?0256)
   \   10CD  7F02              MOV     R7,#2
   \   10CF  120000            LCALL   $REFFN DisplayMenu
   \   10D2  900000            MOV     DPTR,#$LOCBX DispEraseQuest+2
   \   10D5  E0                MOVX    A,@DPTR
   \   10D6  F8                MOV     R0,A
   \   10D7  A3                INC     DPTR
   \   10D8  E0                MOVX    A,@DPTR
   \   10D9  C0E0              PUSH    ACC
   \   10DB  E8                MOV     A,R0
   \   10DC  C0E0              PUSH    ACC
   \   10DE  22                RET
    618          
    619          
    620          void    DispMemoScreen( void )
    621          {
   \   10DF            DispMemoScreen:
   \   10DF  900000            MOV     DPTR,#$LOCBX DispMemoScreen+2
   \   10E2  D0E0              POP     ACC
   \   10E4  F0                MOVX    @DPTR,A
   \   10E5  A3                INC     DPTR
   \   10E6  D0E0              POP     ACC
   \   10E8  F0                MOVX    @DPTR,A
    622              xdata char  i, j;
    623          
    624              SetLCDReg(10, 0x00);
   \   10E9  7D00              MOV     R5,#0
   \   10EB  7C0A              MOV     R4,#10
   \   10ED  120000            LCALL   $REFFN SetLCDReg
    625              SetLCDReg(11, 0x00);
   \   10F0  7D00              MOV     R5,#0
   \   10F2  7C0B              MOV     R4,#11
   \   10F4  120000            LCALL   $REFFN SetLCDReg
    626              
    627              for (i = 0 ; i<42 ; i++) {
   \   10F7  E4                CLR     A
   \   10F8  900000            MOV     DPTR,#$LOCBX DispMemoScreen
   \   10FB  F0                MOVX    @DPTR,A
   \   10FC            ?0258:
   \   10FC  900000            MOV     DPTR,#$LOCBX DispMemoScreen
   \   10FF  E0                MOVX    A,@DPTR
   \   1100  24D6              ADD     A,#214
   \   1102  4022              JC      ?0257
   \   1104            ?0259:
    628                  for (j=0 ; j<6 ; j++) {
   \   1104  E4                CLR     A
   \   1105  A3                INC     DPTR
   \   1106  F0                MOVX    @DPTR,A
   \   1107            ?0262:
   \   1107  900000            MOV     DPTR,#$LOCBX DispMemoScreen+1
   \   110A  E0                MOVX    A,@DPTR
   \   110B  24FA              ADD     A,#250
   \   110D  400F              JC      ?0261
   \   110F            ?0263:
    629                      SetLCDReg(12, ' ');
   \   110F  7D20              MOV     R5,#32
   \   1111  7C0C              MOV     R4,#12
   \   1113  120000            LCALL   $REFFN SetLCDReg
    630                  }
   \   1116  900000            MOV     DPTR,#$LOCBX DispMemoScreen+1
   \   1119  E0                MOVX    A,@DPTR
   \   111A  04                INC     A
   \   111B  F0                MOVX    @DPTR,A
    631              }
   \   111C  80E9              SJMP    ?0262
   \   111E            ?0261:
   \   111E  900000            MOV     DPTR,#$LOCBX DispMemoScreen
   \   1121  E0                MOVX    A,@DPTR
   \   1122  04                INC     A
   \   1123  F0                MOVX    @DPTR,A
   \   1124  80D6              SJMP    ?0258
   \   1126            ?0257:
    632          
    633              SetLCDReg(10, 42 + 8);
   \   1126  7D32              MOV     R5,#50
   \   1128  7C0A              MOV     R4,#10
   \   112A  120000            LCALL   $REFFN SetLCDReg
    634              SetLCDReg(11, 0);
   \   112D  7D00              MOV     R5,#0
   \   112F  7C0B              MOV     R4,#11
   \   1131  120000            LCALL   $REFFN SetLCDReg
    635              DispString("Play and record memo files");
    636          
   \   1134  7D7B              MOV     R5,#LOW(?0265)
   \   1136  7E01              MOV     R6,#HIGH(?0265)
   \   1138  7F02              MOV     R7,#2
   \   113A  120000            LCALL   $REFFN DispString
    637          } 
   \   113D  900000            MOV     DPTR,#$LOCBX DispMemoScreen+2
   \   1140  E0                MOVX    A,@DPTR
   \   1141  F8                MOV     R0,A
   \   1142  A3                INC     DPTR
   \   1143  E0                MOVX    A,@DPTR
   \   1144  C0E0              PUSH    ACC
   \   1146  E8                MOV     A,R0
   \   1147  C0E0              PUSH    ACC
   \   1149  22                RET
    638              
   \   0000                    RSEG    CSTR
   \   0000            ?0086:
   \   0000  52656164          DB      'Reading log file',0
   \   0004  696E6720
   \   0008  6C6F6720
   \   000C  66696C65
   \   0010  00
   \   0011            ?0087:
   \   0011  506C6561          DB      'Please wait...',0
   \   0015  73652077
   \   0019  6169742E
   \   001D  2E2E00
   \   0020            ?0091:
   \   0020  4C6F672E          DB      'Log.txt',0
   \   0024  74787400
   \   0028            ?0092:
   \   0028  7200              DB      'r',0
   \   002A            ?0105:
   \   002A  4552524F          DB      'ERROR: Attempt to write outside dispBuff',0
   \   002E  523A2041
   \   0032  7474656D
   \   0036  70742074
   \   003A  6F207772
   \   003E  69746520
   \   0042  6F757473
   \   0046  69646520
   \   004A  64697370
   \   004E  42756666
   \   0052  00
   \   0053            ?0142:
   \   0053  206F2000          DB      ' o ',0
   \   0057            ?0143:
   \   0057  5B6F5D00          DB      '[o]',0
   \   005B            ?0152:
   \   005B  6F205350          DB      'o SPEAKER VOLUME [',0
   \   005F  45414B45
   \   0063  5220564F
   \   0067  4C554D45
   \   006B  205B00
   \   006E            ?0161:
   \   006E  6F20414E          DB      'o ANSWERING ',0
   \   0072  53574552
   \   0076  494E4720
   \   007A  00
   \   007B            ?0164:
   \   007B  4F4E00            DB      'ON',0
   \   007E            ?0166:
   \   007E  4F464600          DB      'OFF',0
   \   0082            ?0167:
   \   0082  6F20504C          DB      'o PLAY AND RECORD MEMO',0
   \   0086  41592041
   \   008A  4E442052
   \   008E  45434F52
   \   0092  44204D45
   \   0096  4D4F00
   \   0099            ?0168:
   \   0099  6F205345          DB      'o SET TIME AND DATE',0
   \   009D  54205449
   \   00A1  4D452041
   \   00A5  4E442044
   \   00A9  41544500
   \   00AD            ?0169:
   \   00AD  6F20414E          DB      'o ANSWER AFTER ',0
   \   00B1  53574552
   \   00B5  20414654
   \   00B9  45522000
   \   00BD            ?0170:
   \   00BD  20534947          DB      ' SIGNALS',0
   \   00C1  4E414C53
   \   00C5  00
   \   00C6            ?0171:
   \   00C6  6F204552          DB      'o ERASE MESSAGES',0
   \   00CA  41534520
   \   00CE  4D455353
   \   00D2  41474553
   \   00D6  00
   \   00D7            ?0178:
   \   00D7  4A414E00          DB      'JAN',0
   \   00DB            ?0182:
   \   00DB  46454200          DB      'FEB',0
   \   00DF            ?0186:
   \   00DF  4D415200          DB      'MAR',0
   \   00E3            ?0190:
   \   00E3  41505200          DB      'APR',0
   \   00E7            ?0194:
   \   00E7  4D415900          DB      'MAY',0
   \   00EB            ?0198:
   \   00EB  4A554E00          DB      'JUN',0
   \   00EF            ?0202:
   \   00EF  4A554C00          DB      'JUL',0
   \   00F3            ?0206:
   \   00F3  41554700          DB      'AUG',0
   \   00F7            ?0210:
   \   00F7  53455000          DB      'SEP',0
   \   00FB            ?0214:
   \   00FB  4F4B5400          DB      'OKT',0
   \   00FF            ?0218:
   \   00FF  4E4F5600          DB      'NOV',0
   \   0103            ?0222:
   \   0103  44454300          DB      'DEC',0
   \   0107            ?0245:
   \   0107  59454152          DB      'YEAR    MONTH    DAY    HOUR    MINUTE',0
   \   010B  20202020
   \   010F  4D4F4E54
   \   0113  48202020
   \   0117  20444159
   \   011B  20202020
   \   011F  484F5552
   \   0123  20202020
   \   0127  4D494E55
   \   012B  544500
   \   012E            ?0254:
   \   012E  41726520          DB      'Are you sure you want',0
   \   0132  796F7520
   \   0136  73757265
   \   013A  20796F75
   \   013E  2077616E
   \   0142  7400
   \   0144            ?0255:
   \   0144  746F2065          DB      'to erase all messages?',0
   \   0148  72617365
   \   014C  20616C6C
   \   0150  206D6573
   \   0154  73616765
   \   0158  733F00
   \   015B            ?0256:
   \   015B  20202020          DB      '          YES                NO',0
   \   015F  20202020
   \   0163  20205945
   \   0167  53202020
   \   016B  20202020
   \   016F  20202020
   \   0173  20202020
   \   0177  204E4F00
   \   017B            ?0265:
   \   017B  506C6179          DB      'Play and record memo files',0
   \   017F  20616E64
   \   0183  20726563
   \   0187  6F726420
   \   018B  6D656D6F
   \   018F  2066696C
   \   0193  657300
   \   0000                    RSEG    X_UDATA
   \   0000            theScreen:
   \   0150                    DS      336
   \   0150            xPos:
   \   0151                    DS      1
   \   0151            yPos:
   \   0152                    DS      1
   \   0152            cursorPos:
   \   0154                    DS      2
   \   0154            dispStart:
   \   0156                    DS      2
   \   0156            dispBuffStart:
   \   0158                    DS      2
   \   0158            dispBuffEnd:
   \   015A                    DS      2
   \   015A            dispBuffer:
   \   092A                    DS      2000
   \   092A            optionCursorPos:
   \   092C                    DS      2
   \   092C                    END


                                       S Y M B O L - T A B L E
                                       =======================


            #include file(s):

       [1]       c:\iar\ew\8051\inc\io517a.h
       [2]       c:\iar\ew\8051\inc\stdio.h
       [3]       c:\iar\ew\8051\inc\stdlib.h
       [4]       c:\iar\ew\8051\inc\string.h
       [5]       lcd.h
       [6]       calender.h
       [7]       main.h
       [8]       filesystem.h
       [9]       filesystem.h
      [10]       errorcodes.h
      [11]       rs232.h
      [12]       wav.h
      [13]       dtmf.h
      [14]       phone.h
      [15]       timer.h
      [16]       phoneans.h
      [17]       main.h
      [18]       calender.h
      [19]       logfile.h
      [20]       filesystem.h
      [21]       filesystem.h
      [22]       dpot.h


            Symbol                     Type     Mem     Class   Defline   Refline(s)
            ------                     ----     ---     -----   -------   ----------

?0086                                 array    code    static      316        316
?0087                                 array    code    static      316        316
?0091                                 array    code    static      324        324
?0092                                 array    code    static      324        324
?0105                                 array    code    static      340        340
?0142                                 array    code    static      428        428
?0143                                 array    code    static      432        432
?0152                                 array    code    static      454        454
?0161                                 array    code    static      462        462
?0164                                 array    code    static      464        464
?0166                                 array    code    static      466        466
?0167                                 array    code    static      471        471
?0168                                 array    code    static      475        475
?0169                                 array    code    static      479        479
?0170                                 array    code    static      482        482
?0171                                 array    code    static      486        486
?0178                                 array    code    static      512        512
?0182                                 array    code    static      514        514
?0186                                 array    code    static      516        516
?0190                                 array    code    static      518        518
?0194                                 array    code    static      520        520
?0198                                 array    code    static      522        522
?0202                                 array    code    static      524        524
?0206                                 array    code    static      526        526
?0210                                 array    code    static      528        528
?0214                                 array    code    static      530        530
?0218                                 array    code    static      532        532
?0222                                 array    code    static      534        534
?0245                                 array    code    static      589        589
?0254                                 array    code    static      611        611
?0255                                 array    code    static      615        615
?0256                                 array    code    static      616        616
?0265                                 array    code    static      635        635
AC                                      bit             ---      166:1  
ACC                                     sfr             ---       14:1  
ADCON0                                  sfr             ---       99:1  
ADCON1                                  sfr             ---      100:1  
ADDATH                                  sfr             ---      101:1  
ADDATL                                  sfr             ---      102:1  
ADEX                                    bit             ---      133:1  
ADM                                     bit             ---      135:1  
ARCON                                   sfr             ---      105:1  
B                                       sfr             ---       15:1  
BD                                      bit             ---      131:1  
BSY                                     bit             ---      134:1  
CC4EN                                   sfr             ---       34:1  
CCEN                                    sfr             ---       33:1  
CCH1                                    sfr             ---       36:1  
CCH2                                    sfr             ---       38:1  
CCH3                                    sfr             ---       40:1  
CCH4                                    sfr             ---       42:1  
CCL1                                    sfr             ---       35:1  
CCL2                                    sfr             ---       37:1  
CCL3                                    sfr             ---       39:1  
CCL4                                    sfr             ---       41:1  
CLK                                     bit             ---      132:1  
CLRMSK                                  sfr             ---       74:1  
CMEN                                    sfr             ---       43:1  
CMH0                                    sfr             ---       45:1  
CMH1                                    sfr             ---       47:1  
CMH2                                    sfr             ---       49:1  
CMH3                                    sfr             ---       51:1  
CMH4                                    sfr             ---       53:1  
CMH5                                    sfr             ---       55:1  
CMH6                                    sfr             ---       57:1  
CMH7                                    sfr             ---       59:1  
CML0                                    sfr             ---       44:1  
CML1                                    sfr             ---       46:1  
CML2                                    sfr             ---       48:1  
CML3                                    sfr             ---       50:1  
CML4                                    sfr             ---       52:1  
CML5                                    sfr             ---       54:1  
CML6                                    sfr             ---       56:1  
CML7                                    sfr             ---       58:1  
CMSEL                                   sfr             ---       60:1  
COMCLRH                                 sfr             ---       72:1  
COMCLRL                                 sfr             ---       71:1  
COMSETH                                 sfr             ---       70:1  
COMSETL                                 sfr             ---       69:1  
CRCH                                    sfr             ---       62:1  
CRCL                                    sfr             ---       61:1  
CTCON                                   sfr             ---       63:1  
CTRELH                                  sfr             ---       65:1  
CTRELL                                  sfr             ---       64:1  
CY                                      bit             ---      165:1  
ClearDisp                          function    code    public      128        116     66:5
DPH                                     sfr             ---       18:1  
DPL                                     sfr             ---       17:1  
DPSEL                                   sfr             ---       19:1  
DispEraseQuest                     function    code    public      597       78:5
DispInfoBox                        function    code    public      155       71:5      316
DispMemUsage                       function    code    public      401       73:5
DispMemoScreen                     function    code    public      621       79:5
DispOptionsMenu                    function    code    public      439       75:5
DispSetTimeDate                    function    code    public      495       76:5
DispSetTimeDateHead                function    code    public      575       77:5
DispString                         function    code    public      142       67:5      428      432      454
                                                                              462      464      466      471
                                                                              475      479      481      482
                                                                              486      571      589      611
                                                                              615      635
DisplayMenu                        function    code    public      381       72:5      616
EADC                                    bit             ---      205:1  
EAL                                     bit             ---      187:1  
ES0                                     bit             ---      190:1  
ET0                                     bit             ---      193:1  
ET1                                     bit             ---      191:1  
ET2                                     bit             ---      189:1  
EX0                                     bit             ---      194:1  
EX1                                     bit             ---      192:1  
EX2                                     bit             ---      204:1  
EX3                                     bit             ---      203:1  
EX4                                     bit             ---      202:1  
EX5                                     bit             ---      201:1  
EX6                                     bit             ---      200:1  
EXEN2                                   bit             ---      198:1  
EXF2                                    bit             ---      143:1  
F0                                      bit             ---      167:1  
F1                                      bit             ---      171:1  
FillDispBuffer                     function    code    public      306        264     70:5
FindCall                           function    code    extern    45:19        332
GetCallInformation                 function    code    extern    47:19        336
I2FR                                    bit             ---      156:1  
I3FR                                    bit             ---      155:1  
IADC                                    bit             ---      150:1  
IE0                                     bit             ---      182:1  
IE1                                     bit             ---      180:1  
IEN0                                    sfr             ---      114:1  
IEN1                                    sfr             ---      116:1  
IEN2                                    sfr             ---      118:1  
IEX2                                    bit             ---      149:1  
IEX3                                    bit             ---      148:1  
IEX4                                    bit             ---      147:1  
IEX5                                    bit             ---      146:1  
IEX6                                    bit             ---      145:1  
INT0                                    bit             ---      214:1  
INT1                                    bit             ---      213:1  
IP0                                     sfr             ---      115:1  
IP1                                     sfr             ---      117:1  
IRCON0                                  sfr             ---      119:1  
IRCON1                                  sfr             ---      120:1  
IT0                                     bit             ---      183:1  
IT1                                     bit             ---      181:1  
InitializeLCD                      function    code    public       94       65:5
LogCursorAt                        function    code    public      244       69:5
MD0                                     sfr             ---      106:1  
MD1                                     sfr             ---      107:1  
MD2                                     sfr             ---      108:1  
MD3                                     sfr             ---      109:1  
MD4                                     sfr             ---      110:1  
MD5                                     sfr             ---      111:1  
MS_ERASEQST                         #define             ---      32:19      32:19
MS_LOG                              #define             ---      29:19      29:19
MS_MENU                             #define             ---      30:19      30:19
MS_TIMEDATE                         #define             ---      31:19      31:19
MX0                                     bit             ---      138:1  
MX1                                     bit             ---      137:1  
MX2                                     bit             ---      136:1  
MemUsage                           function    code    extern    112:8        407
OV                                      bit             ---      170:1  
OptionCursorAt                     function    code    public      425       74:5
P                                       bit             ---      172:1  
P0                                      sfr             ---       77:1  
P1                                      sfr             ---       78:1  
P2                                      sfr             ---       79:1  
P3                                      sfr             ---       80:1  
P4                                      sfr             ---       81:1  
P5                                      sfr             ---       82:1  
P6                                      sfr             ---       83:1  
P7                                      sfr             ---       84:1  
P8                                      sfr             ---       85:1  
PCON                                    sfr             ---       88:1  
PSW                                     sfr             ---       20:1  
RB80                                    bit             ---      225:1  
RD                                      bit             ---      209:1  
REN0                                    bit             ---      223:1  
RI0                                     bit             ---      227:1  
RS0                                     bit             ---      169:1  
RS1                                     bit             ---      168:1  
RXD                                     bit             ---      216:1  
S0BUF                                   sfr             ---       90:1  
S0CON                                   sfr             ---       89:1  
S0RELH                                  sfr             ---       94:1  
S0RELL                                  sfr             ---       93:1  
S1BUF                                   sfr             ---       92:1  
S1CON                                   sfr             ---       91:1  
S1RELH                                  sfr             ---       96:1  
S1RELL                                  sfr             ---       95:1  
SETMSK                                  sfr             ---       73:1  
SM0                                     bit             ---      220:1  
SM1                                     bit             ---      221:1  
SM20                                    bit             ---      222:1  
SP                                      sfr             ---       16:1  
SWDT                                    bit             ---      199:1        121      175      185      197
                                                                              209      219      230      335
SYSCON                                  sfr             ---       22:1  
SendRS232                          function    code    extern    36:11        360
SendStringEOLRS232                 function    code    extern    38:11        340
SetLCDReg                          function    code    public      120        100      101      102      103
                                                                              104      105      106      107
                                                                              108     68:5      131      132
                                                                              136      150      177      178
                                                                              180      181      182      187
                                                                              188      190      191      192
                                                                              193      194      199      200
                                                                              202      203      204      205
                                                                              206      211      212      214
                                                                              215      216      282      283
                                                                              285      287      289      294
                                                                              295      296      298      299
                                                                              300      388      389      391
                                                                              392      404      405      409
                                                                              410      411      412      426
                                                                              427      430      431      443
                                                                              444      448      452      453
                                                                              456      457      458      460
                                                                              461      469      470      473
                                                                              474      477      478      484
                                                                              485      566      567      578
                                                                              579      583      587      588
                                                                              600      601      605      609
                                                                              610      613      614      624
                                                                              625      629      633      634
T0                                      bit             ---      212:1  
T1                                      bit             ---      211:1  
T2CM                                    bit             ---      159:1  
T2CON                                   sfr             ---       68:1  
T2I0                                    bit             ---      161:1  
T2I1                                    bit             ---      160:1  
T2PS                                    bit             ---      154:1  
T2R0                                    bit             ---      158:1  
T2R1                                    bit             ---      157:1  
TB80                                    bit             ---      224:1  
TCON                                    sfr             ---       25:1  
TF0                                     bit             ---      178:1  
TF1                                     bit             ---      176:1  
TF2                                     bit             ---      144:1  
TH0                                     sfr             ---       29:1  
TH1                                     sfr             ---       30:1  
TH2                                     sfr             ---       67:1  
TI0                                     bit             ---      226:1  
TL0                                     sfr             ---       27:1  
TL1                                     sfr             ---       28:1  
TL2                                     sfr             ---       66:1  
TMOD                                    sfr             ---       26:1  
TR0                                     bit             ---      179:1  
TR1                                     bit             ---      177:1  
TXD                                     bit             ---      215:1  
WDT                                     bit             ---      188:1        121      174      184      196
                                                                              208      218      229      334
WDTREL                                  sfr             ---      124:1  
WR                                      bit             ---      210:1  
WriteClipToMem                     function    code    public      224        344      355
XPAGE                                   sfr             ---       21:1  
cursorPos                             u_int   xdata    public       76        110      253      273      294
                                                                              302
dispBuffEnd                           u_int   xdata    public       79        250      319      321      330
dispBuffStart                         u_int   xdata    public       78        112      250      250      255
                                                                              259      261      281      318
                                                                              319      332
dispBuffer                            array   xdata    public       85        287      338      339      339
dispStart                             u_int   xdata    public       77        111      245      268      268
                                                                              270      270      275      278
                                                                              281      298
div_t                                struct           typedef     38:3       96:3
fclose                             function    code    extern    104:8        370
fopen                              function    code    extern     96:8        324
lastPlayed                              int   xdata    extern       65        349
ldiv_t                               struct           typedef     44:3      100:3
myInt2DecStr                       function    code    extern    127:7        480
myInt2DecStr00                     function    code    extern    128:7        508      538      541      544
numOfCalls                              int   xdata    extern       63        318      319      332      349
optionCursorPos                         int   xdata    public       87        114      426      434
speakerVolume                          char   xdata    extern       64        456
strcpy                             function    code intrinsic     66:4        512      514      516      518
                                                                              520      522      524      526
                                                                              528      530      532      534
theScreen                             array   xdata    public       71  
xPos                                   char   xdata    public       72         97
yPos                                   char   xdata    public       73         98


Errors: none
Warnings: none
Code size: 4426
Constant size: 406
Static variable size: Data(0) Idata(0) Bit(0) Xdata(2348) Pdata(0) Bdata(0)

