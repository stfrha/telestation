##############################################################################
#                                                                            #
# IAR 8051 C-Compiler V5.20A/386                                             #
# Front End V4.20N                                       19/Sep/104  17:59:49 #
# Global Optimizer V1.04E                                                    #
#                                                                            #
#       Target option =  8051                                                #
#       Memory model  =  large                                               #
#       Source file   =  timer.c                                             #
#       List file     =  release\list\timer.lst                              #
#       Object file   =  release\obj\timer.r03                               #
#       Command line  =  Timer.c -S -ml -v0 -e -K -u -s9 -RCODE -gA          #
#                        -IC:\IAR\EW\8051\inc\ -ORelease\Obj\                #
#                        -LRelease\List\ -q -i -t8 -x                        #
#                                                                            #
#                                             (c) Copyright IAR Systems 1996 #
##############################################################################

   \   0000                    NAME    timer(18)
   \   0000                    RSEG    CODE(0)
   \   0000                    COMMON  INTVEC(0)
   \   0000                    RSEG    X_UDATA(0)
   \   0000                    PUBLIC  InitializeTimer
   \   0000                    $DEFFN  InitializeTimer(0,0,0,0,32768,0,0,0)
   \   0000                    PUBLIC  KillTimer
   \   0000                    $DEFFN  KillTimer(0,0,0,0,32768,0,1,0)
   \   0000                    PUBLIC  StartTimer
   \   0000                    $DEFFN  StartTimer(0,0,1,0,32768,0,2,0)
   \   0000                    PUBLIC  T2_int
   \   0000                    $DEFFN  T2_int(512,0,1,0,32768,0,0,0)
   \   0000                    PUBLIC  TimedOut
   \   0000                    $DEFFN  TimedOut(0,0,0,0,32768,0,1,0)
   \   0000                    PUBLIC  WaitFor
   \   0000                    $DEFFN  WaitFor(0,0,3,0,32768,0,2,0),StartTimer,TimedOut,KillTimer
   \   0000                    PUBLIC  mainTimer
   \   0000                    PUBLIC  nActiveTimers
   \   0000                    PUBLIC  timerLimits
   \   0000                    PUBLIC  timerStatus
   \   0000                    EXTERN  ?CL8051L_5_20_L17
   \   0000                    RSEG    CODE
      1          /*************************************************************
      2          Fil:            $Id: Timer.c,v 1.4 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Beskrivning:    Hanterar tidsfunktioner
      5          
      6          Skapad:         99-11-18
      7          
      8          Ändrad:         $Date: 2003/11/20 22:08:53 $
      9          
     10          Ägare:          Fredrik Hoffman
     11          
     12          
     13          Att göra:
     14          
     15          Revisionshistoria:
     16                                          $Log: Timer.c,v $
     17                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     18                                          Various declarations changes.
     19                                          Still version 0200.
     20                                          
     21                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     22                                          Added menu option of setting speaker volume (untested)
     23                                          Completely changed header files
     24                                          Version 0200.
     25                                          
     26                                          Revision 1.2  2003/11/10 22:44:46  Gemensam
     27                                          Added header information
     28                                          
     29          
     30          *************************************************************/
     31                                  
     32          //////////////////////
     33          // Inkluderingar
     34          
     35          #include <io517a.h>
      1          /*                     - IO517A.H -
      2          
      3             Special header for the Siemens SAB 80C517A/83C517A-5 processors.
      4          
      5             Version 5.20 [IMAF]
      6          
      7          */
      8          
      9          #pragma language=extended
     10          
     11          /* Pre-defined SFR byte addresses: */
     12          
     13          /* CPU */
     14          sfr     ACC    = 0xE0;
     15          sfr     B      = 0xF0;
     16          sfr     SP     = 0x81;
     17          sfr     DPL    = 0x82;
     18          sfr     DPH    = 0x83;
     19          sfr     DPSEL  = 0x92;
     20          sfr     PSW    = 0xD0;
     21          sfr     XPAGE  = 0x91;
     22          sfr     SYSCON = 0xB1;
     23          
     24          /* Timer 0/Timer 1 */
     25          sfr     TCON   = 0x88;
     26          sfr     TMOD   = 0x89;
     27          sfr     TL0    = 0x8A;
     28          sfr     TL1    = 0x8B;
     29          sfr     TH0    = 0x8C;
     30          sfr     TH1    = 0x8D;
     31          
     32          /* CCU */
     33          sfr     CCEN   = 0xC1;
     34          sfr     CC4EN  = 0xC9;
     35          sfr     CCL1   = 0xC2;
     36          sfr     CCH1   = 0xC3;
     37          sfr     CCL2   = 0xC4;
     38          sfr     CCH2   = 0xC5;
     39          sfr     CCL3   = 0xC6;
     40          sfr     CCH3   = 0xC7;
     41          sfr     CCL4   = 0xCE;
     42          sfr     CCH4   = 0xCF;
     43          sfr     CMEN   = 0xF6;
     44          sfr     CML0   = 0xD2;
     45          sfr     CMH0   = 0xD3;
     46          sfr     CML1   = 0xD4;
     47          sfr     CMH1   = 0xD5;
     48          sfr     CML2   = 0xD6;
     49          sfr     CMH2   = 0xD7;
     50          sfr     CML3   = 0xE2;
     51          sfr     CMH3   = 0xE3;
     52          sfr     CML4   = 0xE4;
     53          sfr     CMH4   = 0xE5;
     54          sfr     CML5   = 0xE6;
     55          sfr     CMH5   = 0xE7;
     56          sfr     CML6   = 0xF2;
     57          sfr     CMH6   = 0xF3;
     58          sfr     CML7   = 0xF4;
     59          sfr     CMH7   = 0xF5;
     60          sfr     CMSEL  = 0xF7;
     61          sfr     CRCL   = 0xCA;
     62          sfr     CRCH   = 0xCB;
     63          sfr     CTCON  = 0xE1;
     64          sfr     CTRELL = 0xDE;
     65          sfr     CTRELH = 0xDF;
     66          sfr     TL2    = 0xCC;
     67          sfr     TH2    = 0xCD;
     68          sfr     T2CON  = 0xC8;
     69          sfr     COMSETL= 0xA1;
     70          sfr     COMSETH= 0xA2;
     71          sfr     COMCLRL= 0xA3;
     72          sfr     COMCLRH= 0xA4;
     73          sfr     SETMSK = 0xA5;
     74          sfr     CLRMSK = 0xA6;
     75          
     76          /* Ports */
     77          sfr     P0     = 0x80;
     78          sfr     P1     = 0x90;
     79          sfr     P2     = 0xA0;
     80          sfr     P3     = 0xB0;
     81          sfr     P4     = 0xE8;
     82          sfr     P5     = 0xF8;
     83          sfr     P6     = 0xFA;
     84          sfr     P7     = 0xDB;        /* Analog/Digital Input */
     85          sfr     P8     = 0xDD;        /* Analog/Digital Input, 4 Bit */
     86          
     87          /* Serial Channels */
     88          sfr     PCON   = 0x87;
     89          sfr     S0CON  = 0x98;
     90          sfr     S0BUF  = 0x99;
     91          sfr     S1CON  = 0x9B;
     92          sfr     S1BUF  = 0x9C;
     93          sfr     S0RELL = 0xAA;
     94          sfr     S0RELH = 0xBA;
     95          sfr     S1RELL = 0x9D;
     96          sfr     S1RELH = 0xBB;
     97          
     98          /* A/D Converter */
     99          sfr     ADCON0 = 0xD8;
    100          sfr     ADCON1 = 0xDC;
    101          sfr     ADDATH = 0xD9;
    102          sfr     ADDATL = 0xDA;
    103          
    104          /* MUL/DIV Unit */
    105          sfr     ARCON  = 0xEF;
    106          sfr     MD0    = 0xE9;
    107          sfr     MD1    = 0xEA;
    108          sfr     MD2    = 0xEB;
    109          sfr     MD3    = 0xEC;
    110          sfr     MD4    = 0xED;
    111          sfr     MD5    = 0xEE;
    112          
    113          /* Interrupt System */
    114          sfr     IEN0   = 0xA8;
    115          sfr     IP0    = 0xA9;
    116          sfr     IEN1   = 0xB8;
    117          sfr     IP1    = 0xB9;
    118          sfr     IEN2   = 0x9A;
    119          sfr     IRCON0 = 0xC0;
    120          sfr     IRCON1 = 0xD1;
    121          
    122          
    123          /* Watchdog */
    124          sfr     WDTREL = 0x86;
    125          
    126          
    127          /* Pre-defined SFR bit addresses */
    128          
    129          /*========ADCON0=======*/
    130          
    131          bit     BD     = 0xDF;
    132          bit     CLK    = 0xDE;
    133          bit     ADEX   = 0xDD;
    134          bit     BSY    = 0xDC;
    135          bit     ADM    = 0xDB;
    136          bit     MX2    = 0xDA;
    137          bit     MX1    = 0xD9;
    138          bit     MX0    = 0xD8;
    139          
    140          
    141          /*========IRCON0=======*/
    142          
    143          bit     EXF2   = 0xC7;
    144          bit     TF2    = 0xC6;
    145          bit     IEX6   = 0xC5;
    146          bit     IEX5   = 0xC4;
    147          bit     IEX4   = 0xC3;
    148          bit     IEX3   = 0xC2;
    149          bit     IEX2   = 0xC1;
    150          bit     IADC   = 0xC0;
    151          
    152          /*========T2CON=======*/
    153          
    154          bit     T2PS   = 0xCF;
    155          bit     I3FR   = 0xCE;
    156          bit     I2FR   = 0xCD;
    157          bit     T2R1   = 0xCC;
    158          bit     T2R0   = 0xCB;
    159          bit     T2CM   = 0xCA;
    160          bit     T2I1   = 0xC9;
    161          bit     T2I0   = 0xC8;
    162          
    163          /*========PSW=========*/
    164          
    165          bit     CY     = 0xD7;
    166          bit     AC     = 0xD6;
    167          bit     F0     = 0xD5;
    168          bit     RS1    = 0xD4;
    169          bit     RS0    = 0xD3;
    170          bit     OV     = 0xD2;
    171          bit     F1     = 0xD1;
    172          bit     P      = 0xD0;
    173          
    174          /*========TCON========*/
    175          
    176          bit     TF1    = 0x8F;
    177          bit     TR1    = 0x8E;
    178          bit     TF0    = 0x8D;
    179          bit     TR0    = 0x8C;
    180          bit     IE1    = 0x8B;
    181          bit     IT1    = 0x8A;
    182          bit     IE0    = 0x89;
    183          bit     IT0    = 0x88;
    184          
    185          /*========IEN0========*/
    186          
    187          bit     EAL    = 0xAF;
    188          bit     WDT    = 0xAE;
    189          bit     ET2    = 0xAD;
    190          bit     ES0    = 0xAC;
    191          bit     ET1    = 0xAB;
    192          bit     EX1    = 0xAA;
    193          bit     ET0    = 0xA9;
    194          bit     EX0    = 0xA8;
    195          
    196          /*========IEN1========*/
    197          
    198          bit     EXEN2  = 0xBF;
    199          bit     SWDT   = 0xBE;
    200          bit     EX6    = 0xBD;
    201          bit     EX5    = 0xBC;
    202          bit     EX4    = 0xBB;
    203          bit     EX3    = 0xBA;
    204          bit     EX2    = 0xB9;
    205          bit     EADC   = 0xB8;
    206          
    207          /*========P3=========*/
    208          
    209          bit     RD     = 0xB7;
    210          bit     WR     = 0xB6;
    211          bit     T1     = 0xB5;
    212          bit     T0     = 0xB4;
    213          bit     INT1   = 0xB3;
    214          bit     INT0   = 0xB2;
    215          bit     TXD    = 0xB1;
    216          bit     RXD    = 0xB0;
    217          
    218          /*========S0CON========*/
    219          
    220          bit     SM0    = 0x9F;
    221          bit     SM1    = 0x9E;
    222          bit     SM20   = 0x9D;
    223          bit     REN0   = 0x9C;
    224          bit     TB80   = 0x9B;
    225          bit     RB80   = 0x9A;
    226          bit     TI0    = 0x99;
    227          bit     RI0    = 0x98;
    228          
    229          
    230          /* Interrupt Vector Definitions */
    231          
    232          interrupt [0x03] void EX0_int (void);     /* External Interrupt 0 */
    233          
    234          interrupt [0x0B] void T0_int (void);      /* Timer 0 Overflow */
    235          
    236          interrupt [0x13] void EX1_int (void);     /* External Interrupt 1 */
    237          
    238          interrupt [0x1B] void T1_int (void);      /* Timer 1 Overflow */
    239          
    240          interrupt [0x23] void SCON0_int (void);   /* Serial Port 0 */
    241          
    242          interrupt [0x2B] void T2_int (void);      /* Timer 2 Overflow */
    243          
    244          interrupt [0x2B] void T2EX_int (void);    /* Negative Transition on T2EX */
    245          
    246          interrupt [0x43] void ADC_int (void);     /* ADC Interrupt */
    247          
    248          interrupt [0x4B] void EX2_int (void);     /* External Interrupt 2 */
    249          
    250          interrupt [0x53] void EX3_int (void);     /* External Interrupt 3 */
    251          
    252          interrupt [0x5B] void EX4_int (void);     /* External Interrupt 4 */
    253          
    254          interrupt [0x63] void EX5_int (void);     /* External Interrupt 5 */
    255          
    256          interrupt [0x6B] void EX6_int (void);     /* External Interrupt 6 */
    257          
    258          interrupt [0x83] void SCON1_int (void);   /* Serial Port 1 */
    259          
    260          interrupt [0x93] void ICMP_int (void);    /* Compare match interrupt */
    261          
    262          interrupt [0x9B] void CT_int (void);      /* Compare Timer Overflow */
    263          
    264          interrupt [0xA3] void ICS_int (void);     /* COMSET interrupt */
    265          
    266          interrupt [0xAB] void ICR_int (void);     /* COMCLR interrupt */
    267          
    268          
     36          #include <stdio.h>
      1          /*                      - STDIO.H -
      2          
      3             Subset of ANSI standard I/O function declarations.
      4          
      5             Version: 3.30 04/Nov/94 IHAW
      6          
      7          
      8          */
      9          
     10          #ifndef _STDIO_INCLUDED
     11          #define _STDIO_INCLUDED
     12          
     13          #ifndef NULL
     14          #define NULL    (void *) 0
     15          #endif
     16          
     17          #ifndef EOF
     18          #define EOF     (-1)
     19          #endif
     20          
     21          #ifndef size_t
     22          #if     sizeof((char*)0 - (char*)0) <= sizeof(int)
     23          #define size_t  unsigned int
     24          #else
     25          #define size_t  unsigned long 
     26          #endif
     27          #endif
     28          
     29          /* ===
     30          
     31          #if __TID__ & 0x8000
     32          #pragma function=intrinsic(0)
     33          #endif
     34          
     35          === */
     36          
     37          #ifndef MEMORY_ATTRIBUTE
     38          #define MEMORY_ATTRIBUTE
     39          #endif
     40          
     41          MEMORY_ATTRIBUTE int    puts(const char *__s);
     42          MEMORY_ATTRIBUTE int    putchar(int __value);
     43          MEMORY_ATTRIBUTE int    getchar(void);
     44          MEMORY_ATTRIBUTE int    sprintf(char *__s,const char *__format,...);
     45          MEMORY_ATTRIBUTE int    printf(const char *__format,...);
     46          MEMORY_ATTRIBUTE int    scanf(const char *__format,...);
     47          MEMORY_ATTRIBUTE int    sscanf(const char *__s, const char *__format,...);
     48          MEMORY_ATTRIBUTE char   *gets(char *__s);
     49          
     50          #if __TID__ & 0x8000
     51          #pragma function=default
     52          #endif
     53          
     54          #endif
     55          
     56          
     57          
     37          #include <stdlib.h>
      1          /*                      - STDLIB.H -
      2          
      3             The ANSI-defined 'standard' functions.
      4          
      5             Version: 3.30 04/Nov/94 IHAW
      6          
      7          $Name: V3_33B $
      8          $Log: stdlib.h $
      9          Revision 1.3  1996/06/07 07:11:26  matsp
     10          
     11          Revision 1.2  1996/01/26 16:13:20  matsp
     12          A lot. Converted to Source Integrity
     13          Revision 1.2  1996/01/26 17:13:18  MATSP
     14          Revision 1.4  1996/01/26 16:07:29  MATSP
     15          Revision 1.3  1995/12/04 09:04:11  MATSP
     16          RAND_MAX changed from 32768 to 32767.
     17          */
     18          
     19          #ifndef _STDLIB_INCLUDED
     20          #define _STDLIB_INCLUDED
     21          
     22          #ifndef size_t
     23          #if sizeof((char *)0 - (char *)0) <= sizeof(int)
     24          #define size_t          unsigned int
     25          #else
     26          #define size_t          unsigned long
     27          #endif
     28          #endif
     29          
     30          #ifndef NULL
     31          #define NULL    (void*) 0 
     32          #endif
     33          
     34          typedef struct
     35                  {
     36                    int   quot;
     37                    int   rem;
     38                  } div_t;
     39          
     40          typedef struct
     41                  {
     42                    long int      quot;
     43                    long int      rem;
     44                  } ldiv_t;
     45          
     46          
     47          #define RAND_MAX        32767
     48          
     49          #define EXIT_SUCCESS    0
     50          #define EXIT_FAILURE    1
     51          
     52          #define MB_CUR_MAX      1
     53          
     54          #if __TID__ & 0x8000
     55          #pragma function=intrinsic(0)
     56          #endif
     57          
     58          #ifndef MEMORY_ATTRIBUTE
     59          #define MEMORY_ATTRIBUTE
     60          #endif
     61          
     62          #ifndef PTR_ATTRIBUTE
     63          #define PTR_ATTRIBUTE
     64          #endif
     65          
     66          MEMORY_ATTRIBUTE void   *malloc(size_t __size);
     67          
     68          MEMORY_ATTRIBUTE void   free(void *__ptr);
     69          
     70          MEMORY_ATTRIBUTE void   exit(int __status);
     71          
     72          MEMORY_ATTRIBUTE void   *calloc(unsigned int __nelem, size_t __elsize);
     73          
     74          MEMORY_ATTRIBUTE void   *realloc(void *__ptr, size_t __size);
     75          
     76          MEMORY_ATTRIBUTE int atoi (const char *__nptr);
     77          
     78          MEMORY_ATTRIBUTE long atol (const char *__nptr);
     79          
     80          MEMORY_ATTRIBUTE double atof (const char *__nptr);
     81          
     82          MEMORY_ATTRIBUTE double strtod(const char *__nptr, char **__endptr);
     83          
     84          MEMORY_ATTRIBUTE long int strtol(const char *__nptr, char **__endptr, int __base);
     85          
     86          MEMORY_ATTRIBUTE unsigned long int strtoul(const char *__nptr, char **__endptr, int __base);
     87          
     88          MEMORY_ATTRIBUTE int rand(void);
     89          
     90          MEMORY_ATTRIBUTE void srand(unsigned int __seed);
     91          
     92          MEMORY_ATTRIBUTE void abort(void);
     93          
     94          MEMORY_ATTRIBUTE int abs(int __j);
     95          
     96          MEMORY_ATTRIBUTE div_t div(int __numer, int __denom);
     97          
     98          MEMORY_ATTRIBUTE long int labs(long int __j);
     99          
    100          MEMORY_ATTRIBUTE ldiv_t ldiv(long int __numer, long int __denom);
    101          
    102          MEMORY_ATTRIBUTE void *bsearch(const void *__key, const void *__base,
    103                                  size_t __nmemb, size_t __size,
    104                                  int (*__compar) (const void *, const void *));
    105          
    106          MEMORY_ATTRIBUTE void qsort(void *__base, size_t __nmemb, size_t __size,
    107                                  int (*__compar) (const void *, const void *));
    108          
    109          #if __TID__ & 0x8000
    110          #pragma function=default
    111          #endif
    112          
    113          #endif
    114          
     38          #include <string.h> 
      1          /*                       - STRING.H -
      2          
      3             The ANSI 'string' function declarations.
      4                     
      5             Version: 3.30 04/Nov/94 IHAW
      6                             
      7          */
      8          
      9          #ifndef _STRING_INCLUDED
     10          #define _STRING_INCLUDED
     11          
     12          #ifndef NULL
     13          #define NULL    (void*)0     /* changed from char* 93.01.21 ICLM */
     14          #endif
     15          
     16          #ifndef size_t
     17          #if sizeof((char *)0 - (char *)0) <= sizeof(int)
     18          #define size_t          unsigned int
     19          #else
     20          #define size_t          unsigned long
     21          #endif
     22          #endif
     23          
     24          #if __TID__ & 0x8000
     25          #pragma function=intrinsic(0)
     26          #endif
     27          
     28          #ifndef MEMORY_ATTRIBUTE
     29          #define MEMORY_ATTRIBUTE
     30          #endif
     31          
     32          MEMORY_ATTRIBUTE void *memcpy(void *s1, const void *s2, size_t n);
     33          
     34          MEMORY_ATTRIBUTE void *memmove(void *s1, const void *s2, size_t n);
     35          
     36          MEMORY_ATTRIBUTE void *memchr(const void *s, int c, size_t n);
     37          
     38          MEMORY_ATTRIBUTE void *memset(void *s, int c, size_t n);
     39          
     40          MEMORY_ATTRIBUTE int memcmp(const void *s1, const void *s2, size_t n);
     41          
     42          MEMORY_ATTRIBUTE char *strchr(const char *s, int c);
     43          
     44          MEMORY_ATTRIBUTE int strcmp(const char *s1, const char *s2);
     45          
     46          MEMORY_ATTRIBUTE int strncmp(const char *s1, const char *s2, size_t n);
     47          
     48          MEMORY_ATTRIBUTE int strcoll(const char *s1, const char *s2);
     49          
     50          MEMORY_ATTRIBUTE size_t strlen(const char *s);
     51          
     52          MEMORY_ATTRIBUTE size_t strcspn(const char *s1, const char *s2);
     53          
     54          MEMORY_ATTRIBUTE size_t strspn(const char *s1, const char *s2);
     55          
     56          MEMORY_ATTRIBUTE char *strpbrk(const char *s1, const char *s2);
     57          
     58          MEMORY_ATTRIBUTE char *strrchr(const char *s, int c);
     59          
     60          MEMORY_ATTRIBUTE char *strstr(const char *s1, const char *s2);
     61          
     62          MEMORY_ATTRIBUTE char *strcat(char *s1, const char *s2);
     63          
     64          MEMORY_ATTRIBUTE char *strncat(char *s1, const char *s2, size_t n);
     65          
     66          MEMORY_ATTRIBUTE char *strcpy(char *s1, const char *s2);
     67          
     68          MEMORY_ATTRIBUTE char *strncpy(char *s1, const char *s2, size_t n);
     69          
     70          MEMORY_ATTRIBUTE char *strerror(int errnum);
     71          
     72          MEMORY_ATTRIBUTE char *strtok(char *s1, const char *s2);
     73          
     74          MEMORY_ATTRIBUTE size_t strxfrm(char *s1, const char *s2, size_t n);
     75          
     76          #if __TID__ & 0x8000
     77          #pragma function=default
     78          #endif
     79          
     80          #endif
     81          
     82          
     39          #include "Timer.h"
      1          /********************************************************
      2          Fil:            $Id: Timer.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Timer.h,v $
      8                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          
     18          
     19          ********************************************************/
     20          
     21          #ifndef _TIMER_INCLUDED_
     22          #define _TIMER_INCLUDED_
     23          
     24          ///////////////////////////////////
     25          // Definitioner
     26          
     27          #define TM_MAX_TIMERS   5
     28          
     29          ///////////////////////////////////
     30          // Strukturer
     31          
     32          
     33          ///////////////////////////////////
     34          // Funktioner och procedurer
     35          
     36          extern void    InitializeTimer( void );
     37          extern char    StartTimer(unsigned int tenMillisecTimeout);
     38          extern void    KillTimer(char  timerIndex);
     39          extern char    TimedOut(char timerIndex);
     40          extern void    WaitFor(unsigned int tenMillisec);
     41           
     42          #endif
     40          #include "Main.h"
      1          /*************************************************************
      2          Fil:            $Id: Main.h,v 1.10 2003/12/26 16:17:01 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/12/26 16:17:01 $
      5          
      6          Revisionshistoria:
      7                                          $Log: Main.h,v $
      8                                          Revision 1.10  2003/12/26 16:17:01  Gemensam
      9                                          Reinstate 500 ms wait for hang up detection to settle (if not PPD is used).
     10                                          Fixed PPD detection by decreasing phone volume from 63 to 15.
     11                                          Version 0304.
     12                                          
     13                                          Revision 1.9  2003/12/09 20:52:49  Gemensam
     14                                          Commented out PPD detection since the HW not work yet.
     15                                          Ver 0302.
     16                                          
     17                                          Revision 1.8  2003/11/29 22:35:59  Gemensam
     18                                          Fixed problem with to short pulse width on PPD.
     19                                          Ver 0302.
     20                                          
     21                                          Revision 1.7  2003/11/24 22:44:36  Gemensam
     22                                          Fixed PPD, not working yet,
     23                                          New command: speaker volume.
     24                                          Version 0301.
     25                                          
     26                                          Revision 1.6  2003/11/23 21:40:03  Gemensam
     27                                          Parallell phone detection included.
     28                                          Removed obsolete #define's regarding LCD interface.
     29                                          Ver 0300
     30                                          
     31                                          Revision 1.5  2003/11/23 20:29:34  Gemensam
     32                                          Complete and tested volume setting in options menu.
     33                                          Ver 0201
     34                                          
     35                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     36                                          Various declarations changes.
     37                                          Still version 0200.
     38                                          
     39                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     40                                          Added menu option of setting speaker volume (untested)
     41                                          Completely changed header files
     42                                          Version 0200.
     43                                          
     44                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     45                                          Added header information
     46                                          
     47          *************************************************************/
     48          
     49          #ifndef _MAIN_INCLUDED_
     50          #define _MAIN_INCLUDED_
     51          
     52          #include "FileSystem.h"
      1          /**************************************************************************************
      2          Fil:            $Id: FileSystem.h,v 1.4 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Kommentarer:    Filhuvudet befinner sig i "Spare" arean tillhörande filens första sida. Huvudet består 
      7                                          av 16 bytes enligt följande lista:
      8                                          0       Huvud       0xAA = Legalt filhuvud, annat tillsvidare odefinierat
      9                                          1-4     Fillängd    Pos 1 = MSB, pos 4 = LSB
     10                                          5-12    Filtitel    Enl "Titel.ext". Om titeln är mindre än 8 tecken avslutas det med nollor
     11                                          13-15   Filext      Enl "Titel.ext". Om ext är mindre än 3 tecken avslutas det med nollor
     12          
     13                                          En nolla skriven i fileName[0] indikerar att
     14                                          filstrukturen är ledig.
     15                  
     16          Revisionshistoria:
     17                                          $Log: FileSystem.h,v $
     18                                          Revision 1.4  2003/11/20 22:08:53  Gemensam
     19                                          Various declarations changes.
     20                                          Still version 0200.
     21                                          
     22                                          Revision 1.3  2003/11/18 19:17:36  Gemensam
     23                                          Added menu option of setting speaker volume (untested)
     24                                          Completely changed header files
     25                                          Version 0200.
     26                                          
     27                                          Revision 1.2  2003/11/10 22:44:45  Gemensam
     28                                          Added header information
     29                                          
     30          
     31          **************************************************************************************/
     32          
     33          #ifndef _FILESYSTEM_INCLUDED_
     34          #define _FILESYSTEM_INCLUDED_
     35          
     36          ///////////////////////////////////
     37          // Definitioner
     38          
     39          #define FS_MAXFILES         8 
     40          #define FS_FILENAMELENGTH   13
     41          #define FS_FLASHSIZE        0x800000
     42          
     43          #define OFF            0
     44          #define READY        1
     45          #define NEMPTY        2
     46          #define WRITING        3
     47          #define OCCUPIED    4
     48          
     49          #define CLE     P4.0                                //Command Latch Enable
     50          #define ALE     P4.1                                //Address Latch Enable
     51          #define WP      P4.2                                //Write Protect
     52          #define SE      P4.3                                //Spare Enable
     53          //#define CE      P4.4                                //Chip Enable
     54          #define FBUSY   P4.5                                //Busy
     55          
     56          #define FREG (*(unsigned char xdata *) 0xE000)
     57          #define FLASH (*(unsigned char xdata *) 0xB000) 
     58          
     59          ///////////////////////////////////
     60          // Strukturer
     61          
     62          struct ST_FILE_HEAD {
     63              unsigned long   length;
     64              char            name[FS_FILENAMELENGTH];
     65          };
     66          #define FILE_HEAD struct ST_FILE_HEAD
     67          
     68          
     69          struct ST_FILE {
     70              char            fileName[FS_FILENAMELENGTH];
     71              unsigned long   startAddress;
     72              unsigned long   length; 
     73              unsigned long   offset; 
     74              char            write;
     75              char            append;
     76          };
     77          #define FILE struct ST_FILE 
     78          
     79          
     80          
     81          ///////////////////////////////////
     82          // Funktioner och procedurer
     83          
     84          extern void            InitializeFileSystem( void );
     85          extern void            InitializeFlash( void );
     86          extern void            SetupReadSeq( void );
     87          extern unsigned char   ReadFLASH( void );
     88          extern void            TerminateReadSeq( void );
     89          extern void            GetDeviceIDRS232(void);
     90          extern void            SetupWriteSeq( void );
     91          extern void            WriteFLASH(unsigned char);
     92          extern void            TerminateWriteSeq( void );
     93          extern void            PerformWriteSeq( void );
     94          extern void            EraseBlock( void );
     95          extern void            WriteFileHead(const char* name, long size);
     96          extern FILE*           fopen(const char* name, const char* def);
     97          extern FILE*               fopenA(const char* name, long maxSize, long offset);
     98          extern void            fputc(FILE* filePtr, char c);
     99          extern void            fputLine(FILE* filePtr, const char* str);
    100          extern void            fupLoad( void );
    101          extern int             fgetc(FILE* filePtr);
    102          extern void            fgetLine(FILE* filePtr, char* str, int maxLen);
    103          extern void            fdownLoad( void );
    104          extern void            fclose(FILE* filePtr);
    105          extern long            ftell(FILE* filePtr);
    106          //void            Rewind(FILE* filePtr);
    107          extern void            fSetPos(FILE* filePtr, long offset);
    108          extern void            ReleaseCurrFile( void );
    109          extern void            EraseAll( void );
    110          extern void            StartDynamic( void );
    111          extern void            EraseDynamic( void );
    112          extern char                        MemUsage( void );
    113          extern void                        Dir( void );
    114          extern void                        Type( void );
    115          extern void                        TypeA( void );
    116          
    117          #endif
     53          
     54          
     55          ///////////////////////////////////
     56          // Definitioner
     57          
     58          #define VERSION_MENU_STRING     "Telestation 3.5       (c) 2004-09-19 FRHA"
     59          
     60          #define CM_PARSIZE              24
     61          #define CM_NRPAR                16
     62          
     63          #define MAX_LABEL_LEN   8
     64          #define MAX_LABELS      64
     65          
     66          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     67          /*
     68          #define MAX_BATFILES    8
     69          */
     70          
     71          ///////////////////////////////////
     72          // Strukturer
     73          
     74          // Nedan var ett försök till multipla bat-filer, kanske införs senare
     75          /*
     76          struct ST_Label {
     77              char    name[MAX_LABEL_LEN];
     78              long    pos;
     79          };
     80          #define Label struct ST_Label
     81           
     82          struct ST_BatFileObj {
     83              FILE*       fp;                 //Filpekare till bat-filen
     84              Label*      labels;             //Pekare till lista med ingående labels
     85              char        labelIndex;         //Pekar på nästa lediga label
     86              BatFileObj* caller;             //Den batfil som kallade på denna. Om användaren gav kommandot 
     87                                              //skall den inehålla NULL
     88              char        occupied;           //1 om detta objekt används, 0 annars
     89          };    
     90          #define BatFileObj struct ST_BatFileObj
     91          */
     92          
     93          ///////////////////////////////////
     94          // Funktioner och procedurer
     95          
     96          extern void    InitializeComputer1( void );
     97          extern void    InitializePhoneAnsApp( void );
     98          extern void    MainShell( void );
     99          extern char    DecodeAndPerform(const char* cmdStr);
    100          //int     MainCommandInterper(char c);
    101          extern void    Hello( void );
    102          extern void    TestHW( void );
    103          extern void    FlashID( void );
    104          extern void    Erase( void );
    105          extern void    BackRead( void );
    106          extern void    ReadSpare( void );
    107          extern void    WF1( void );
    108          extern void    WF2( void );
    109          extern void    WF3( void );
    110          extern void    RF1( void );
    111          extern void    RF2( void );
    112          extern void    RF3( void );
    113          extern void    CreateLong( void );
    114          extern void    ReadSpare2( void );
    115          extern void    Append( void );
    116          
    117          extern void    SetupBatFile( void );
    118          extern void    ClearLabelList( void );
    119          extern void    ExecuteBatFile(const char* batFileName);
    120          extern char    InsertLabel(const char* name, long pos);
    121          extern int     FindLabel(const char *name);
    122          extern char    GotoLabel(const char* name);
    123          
    124          extern void    myStrCpy(char* dest, const char* src);
    125          extern int     myStrLen(char* str);
    126          extern void    myLong2HexStr(long v, char* str);
    127          extern void    myInt2DecStr(int v, char* str);
    128          extern void    myInt2DecStr00(char v, char* str);
    129          extern int     myStr2Int(const char* str);
    130          extern char    myStrCmpNoCase(const char* s1, const char* s2);
    131          
    132          // Nedan var ett försök till multipla bat-filer, kanske införs senare
    133          /*
    134          void    SetupBatFile( void );
    135          void    ClearLabelList( void );
    136          void    ClearLabelList(Label* list);
    137          BatFileObj*    VacantBatFileObj(FILE* fp);
    138          void    ExecuteBatFile(const char* batFileName);
    139          char    InsertLabel(const char* name, long pos);
    140          char    FindLabel(const char *name, Label* l);
    141          char    GotoLabel(const char* name);
    142          */
    143          
    144          ///////////////////////////
    145          // Globala variabler
    146          
    147          
    148          ///////////////////////////
    149          // Lokala variabler
    150          
    151          
    152          #endif
     41          #include "RS232.h"
      1          /********************************************************
      2          Fil:            $Id: RS232.h,v 1.2 2003/11/20 22:08:53 Gemensam Exp $
      3          
      4          Ändrad:         $Date: 2003/11/20 22:08:53 $
      5          
      6          Revisionshistoria:
      7                                          $Log: RS232.h,v $
      8                                          Revision 1.2  2003/11/20 22:08:53  Gemensam
      9                                          Various declarations changes.
     10                                          Still version 0200.
     11                                          
     12                                          Revision 1.1  2003/11/18 19:17:36  Gemensam
     13                                          Added menu option of setting speaker volume (untested)
     14                                          Completely changed header files
     15                                          Version 0200.
     16                                          
     17                                          
     18          
     19          ********************************************************/
     20          
     21          #ifndef _RS232_INCLUDED_
     22          #define _RS232_INCLUDED_
     23          
     24          ///////////////////////////////////
     25          // Definitioner
     26          
     27          
     28          ///////////////////////////////////
     29          // Strukturer
     30          
     31          
     32          ///////////////////////////////////
     33          // Funktioner och procedurer
     34          
     35          extern void             InitializeRS232( void );
     36          extern void             SendRS232(char tecken);
     37          extern void             SendStringRS232(const char *str);
     38          extern void             SendStringEOLRS232(const char *str);
     39          extern char             WaitAndReceiveRS232( void );
     40          extern char             WaitAndReceiveTimeout( void );
     41          extern int      ReceiveLineRS232(char* str, int maxLen);
     42          
     43          #endif
     42          
     43          //////////////////////
     44          // Globala variabler
     45          
     46          //////////////////////
     47          // Lokala variabler
     48          
     49          xdata int     mainTimer;
     50          xdata unsigned int     timerLimits[TM_MAX_TIMERS];
     51          xdata char    timerStatus[TM_MAX_TIMERS];             //0 = ledig, 1 = aktiv, 2 = timeout
     52          xdata char    nActiveTimers;
     53          
     54          
     55          //////////////////////
     56          // Kod
     57          
     58          void    InitializeTimer( void )
     59          {                                                                                 
   \   0000            InitializeTimer:
     60          // Fosc/12 * 10ms = 9216. 65536-9216 = 56320 = 0xDC00
     61          
     62              CTCON &= ~(1<<7);               //T2PS1 = 0 => Prescaler fosc/12 eller fosc/24
   \   0000  53E17F            ANL     225,#127
     63              T2PS = 0;                       //T2PS = 0, => Prescaler fosc/12
   \   0003  C2CF              CLR     T2CON.7
     64              T2R1 = 1;                       //Timer 2 automatisk reload
   \   0005  D2CC              SETB    T2CON.4
     65              T2R0 = 0;   
   \   0007  C2CB              CLR     T2CON.3
     66              T2I1 = 0;                       //Timer- eller ingen funktion beroende på T2I0
   \   0009  C2C9              CLR     T2CON.1
     67              T2I0 = 0;                       //Timer 2 avstängd, använd T2I0 = 1 för att starta
   \   000B  C2C8              CLR     T2CON.0
     68              TF2 = 0;                        //Nollställ reload flagga
   \   000D  C2C6              CLR     192.6
     69              CRCL = 0x00;                    //Reload värde, ger timeout varje 10 ms
   \   000F  75CA00            MOV     202,#0
     70              CRCH = 0xDC;
   \   0012  75CBDC            MOV     203,#220
     71              EXEN2 = 0;                      //Stänger av reload avbrott
   \   0015  C2BF              CLR     IP.7
     72              EXF2 = 0;                       //Nollar reload flagga
   \   0017  C2C7              CLR     192.7
     73              ET2 = 1;                        //Möjliggör timer 2 avbrott
   \   0019  D2AD              SETB    IE.5
     74              
     75              nActiveTimers = 0;
   \   001B  E4                CLR     A
   \   001C  900011            MOV     DPTR,#nActiveTimers
   \   001F  F0                MOVX    @DPTR,A
     76          }
   \   0020  22                RET
     77          
     78          char StartTimer(unsigned int tenMillisecTimeout)
     79          //Retunerar ett index till en timer, eller 0 om ingen är ledig
     80          {
   \   0021            StartTimer:
     81              xdata char    searchTimers = 1;
   \   0021  900000            MOV     DPTR,#$LOCBX StartTimer+1
   \   0024  ED                MOV     A,R5
   \   0025  F0                MOVX    @DPTR,A
   \   0026  A3                INC     DPTR
   \   0027  EC                MOV     A,R4
   \   0028  F0                MOVX    @DPTR,A
   \   0029  7F01              MOV     R7,#1
   \   002B            ?0001:
     82              
     83              while ((searchTimers < TM_MAX_TIMERS) && (timerStatus[searchTimers])) {
   \   002B  EF                MOV     A,R7
   \   002C  24FB              ADD     A,#251
   \   002E  4010              JC      ?0000
   \   0030  EF                MOV     A,R7
   \   0031  240C              ADD     A,#LOW(timerStatus)
   \   0033  F582              MOV     DPL,A
   \   0035  E4                CLR     A
   \   0036  3400              ADDC    A,#HIGH(timerStatus)
   \   0038  F583              MOV     DPH,A
   \   003A  E0                MOVX    A,@DPTR
   \   003B  6003              JZ      ?0000
   \   003D            ?0004:
   \   003D            ?0003:
   \   003D            ?0002:
     84                  searchTimers++;
   \   003D  0F                INC     R7
   \   003E  80EB              SJMP    ?0001
   \   0040            ?0000:
   \   0040  EF                MOV     A,R7
   \   0041  900000            MOV     DPTR,#$LOCBX StartTimer
   \   0044  F0                MOVX    @DPTR,A
     85              }
     86              if (searchTimers == TM_MAX_TIMERS) return 0;
   \   0045  B40503            CJNE    A,#5,?0006
   \   0048            ?0005:
   \   0048  7C00              MOV     R4,#0
   \   004A  22                RET
   \   004B            ?0006:
     87          
     88              timerStatus[searchTimers] = 1;
   \   004B  FC                MOV     R4,A
   \   004C  240C              ADD     A,#LOW(timerStatus)
   \   004E  F582              MOV     DPL,A
   \   0050  E4                CLR     A
   \   0051  3400              ADDC    A,#HIGH(timerStatus)
   \   0053  F583              MOV     DPH,A
   \   0055  7401              MOV     A,#1
   \   0057  F0                MOVX    @DPTR,A
     89              timerLimits[searchTimers] = mainTimer + (tenMillisecTimeout);
   \   0058  900000            MOV     DPTR,#mainTimer
   \   005B  E0                MOVX    A,@DPTR
   \   005C  FF                MOV     R7,A
   \   005D  A3                INC     DPTR
   \   005E  E0                MOVX    A,@DPTR
   \   005F  900000            MOV     DPTR,#$LOCBX StartTimer+2
   \   0062  FD                MOV     R5,A
   \   0063  E0                MOVX    A,@DPTR
   \   0064  2D                ADD     A,R5
   \   0065  FE                MOV     R6,A
   \   0066  900000            MOV     DPTR,#$LOCBX StartTimer+1
   \   0069  E0                MOVX    A,@DPTR
   \   006A  3F                ADDC    A,R7
   \   006B  FF                MOV     R7,A
   \   006C  EC                MOV     A,R4
   \   006D  25E0              ADD     A,ACC
   \   006F  2402              ADD     A,#LOW(timerLimits)
   \   0071  F582              MOV     DPL,A
   \   0073  E4                CLR     A
   \   0074  3400              ADDC    A,#HIGH(timerLimits)
   \   0076  F583              MOV     DPH,A
   \   0078  EF                MOV     A,R7
   \   0079  F0                MOVX    @DPTR,A
   \   007A  A3                INC     DPTR
   \   007B  EE                MOV     A,R6
   \   007C  F0                MOVX    @DPTR,A
     90              if (!nActiveTimers) {
   \   007D  900011            MOV     DPTR,#nActiveTimers
   \   0080  E0                MOVX    A,@DPTR
   \   0081  7002              JNZ     ?0008
   \   0083            ?0007:
     91                  T2I0 = 1;                                       //Startar timer 2 (HW)
   \   0083  D2C8              SETB    T2CON.0
   \   0085            ?0008:
     92              }
     93              nActiveTimers++;
   \   0085  04                INC     A
   \   0086  F0                MOVX    @DPTR,A
     94              return searchTimers;
   \   0087  900000            MOV     DPTR,#$LOCBX StartTimer
   \   008A  E0                MOVX    A,@DPTR
   \   008B  FC                MOV     R4,A
     95          }
   \   008C            ?0009:
   \   008C  22                RET
     96          
     97          void    KillTimer(char  timerIndex)
     98          {
   \   008D            KillTimer:
     99              if (timerIndex < TM_MAX_TIMERS) {
   \   008D  EC                MOV     A,R4
   \   008E  900000            MOV     DPTR,#$LOCBX KillTimer
   \   0091  F0                MOVX    @DPTR,A
   \   0092  24FB              ADD     A,#251
   \   0094  4028              JC      ?0011
   \   0096            ?0010:
    100                  if (timerStatus[timerIndex] == 1) {
   \   0096  EC                MOV     A,R4
   \   0097  240C              ADD     A,#LOW(timerStatus)
   \   0099  F582              MOV     DPL,A
   \   009B  E4                CLR     A
   \   009C  3400              ADDC    A,#HIGH(timerStatus)
   \   009E  F583              MOV     DPH,A
   \   00A0  E0                MOVX    A,@DPTR
   \   00A1  14                DEC     A
   \   00A2  700B              JNZ     ?0013
   \   00A4            ?0012:
    101                      nActiveTimers--;
   \   00A4  900011            MOV     DPTR,#nActiveTimers
   \   00A7  E0                MOVX    A,@DPTR
   \   00A8  14                DEC     A
   \   00A9  F0                MOVX    @DPTR,A
    102                      if (!nActiveTimers) {
   \   00AA  E0                MOVX    A,@DPTR
   \   00AB  7002              JNZ     ?0015
   \   00AD            ?0014:
    103                          T2I0 = 0;                               //Stänger av timer 2 (HW)
   \   00AD  C2C8              CLR     T2CON.0
   \   00AF            ?0015:
   \   00AF            ?0013:
    104                      }
    105                  }
    106                  timerStatus[timerIndex] = 0;
   \   00AF  900000            MOV     DPTR,#$LOCBX KillTimer
   \   00B2  E0                MOVX    A,@DPTR
   \   00B3  240C              ADD     A,#LOW(timerStatus)
   \   00B5  F582              MOV     DPL,A
   \   00B7  E4                CLR     A
   \   00B8  3400              ADDC    A,#HIGH(timerStatus)
   \   00BA  F583              MOV     DPH,A
   \   00BC  E4                CLR     A
   \   00BD  F0                MOVX    @DPTR,A
   \   00BE            ?0011:
    107              }
    108          }
   \   00BE  22                RET
    109          
    110          char    TimedOut(char timerIndex)
    111          //Retunerar 1 om timern har fått timeout 0 annars.
    112          {
   \   00BF            TimedOut:
    113              if (timerIndex < TM_MAX_TIMERS) {
   \   00BF  EC                MOV     A,R4
   \   00C0  900000            MOV     DPTR,#$LOCBX TimedOut
   \   00C3  F0                MOVX    @DPTR,A
   \   00C4  24FB              ADD     A,#251
   \   00C6  4011              JC      ?0017
   \   00C8            ?0016:
    114                  if (timerStatus[timerIndex] == 2) return 1;
   \   00C8  EC                MOV     A,R4
   \   00C9  240C              ADD     A,#LOW(timerStatus)
   \   00CB  F582              MOV     DPL,A
   \   00CD  E4                CLR     A
   \   00CE  3400              ADDC    A,#HIGH(timerStatus)
   \   00D0  F583              MOV     DPH,A
   \   00D2  E0                MOVX    A,@DPTR
   \   00D3  B40203            CJNE    A,#2,?0019
   \   00D6            ?0018:
   \   00D6  7C01              MOV     R4,#1
    115              }
   \   00D8  22                RET
   \   00D9            ?0019:
   \   00D9            ?0017:
    116              return 0;
   \   00D9  7C00              MOV     R4,#0
    117          }
   \   00DB            ?0020:
   \   00DB  22                RET
    118          
    119          void    WaitFor(unsigned int tenMillisec)
    120          {
   \   00DC            WaitFor:
   \   00DC  900000            MOV     DPTR,#$LOCBX WaitFor+1
   \   00DF  D0E0              POP     ACC
   \   00E1  F0                MOVX    @DPTR,A
   \   00E2  A3                INC     DPTR
   \   00E3  D0E0              POP     ACC
   \   00E5  F0                MOVX    @DPTR,A
    121              xdata char timer;
    122              
    123              timer = StartTimer(tenMillisec);
   \   00E6  A3                INC     DPTR
   \   00E7  ED                MOV     A,R5
   \   00E8  F0                MOVX    @DPTR,A
   \   00E9  A3                INC     DPTR
   \   00EA  EC                MOV     A,R4
   \   00EB  F0                MOVX    @DPTR,A
   \   00EC  120000            LCALL   $REFFN StartTimer
    124              if (timer) {
   \   00EF  EC                MOV     A,R4
   \   00F0  900000            MOV     DPTR,#$LOCBX WaitFor
   \   00F3  F0                MOVX    @DPTR,A
   \   00F4  6019              JZ      ?0022
   \   00F6            ?0021:
   \   00F6            ?0024:
    125                  while (!TimedOut(timer)) {
   \   00F6  900000            MOV     DPTR,#$LOCBX WaitFor
   \   00F9  E0                MOVX    A,@DPTR
   \   00FA  FC                MOV     R4,A
   \   00FB  120000            LCALL   $REFFN TimedOut
   \   00FE  BC0006            CJNE    R4,#0,?0023
   \   0101            ?0025:
    126                      WDT = 1;
   \   0101  D2AE              SETB    IE.6
    127                      SWDT = 1;
   \   0103  D2BE              SETB    IP.6
   \   0105  80EF              SJMP    ?0024
   \   0107            ?0023:
    128                  }
    129                  KillTimer(timer);
   \   0107  900000            MOV     DPTR,#$LOCBX WaitFor
   \   010A  E0                MOVX    A,@DPTR
   \   010B  FC                MOV     R4,A
   \   010C  120000            LCALL   $REFFN KillTimer
   \   010F            ?0022:
    130              }
    131          }
   \   010F  900000            MOV     DPTR,#$LOCBX WaitFor+1
   \   0112  E0                MOVX    A,@DPTR
   \   0113  F8                MOV     R0,A
   \   0114  A3                INC     DPTR
   \   0115  E0                MOVX    A,@DPTR
   \   0116  C0E0              PUSH    ACC
   \   0118  E8                MOV     A,R0
   \   0119  C0E0              PUSH    ACC
   \   011B  22                RET
    132          
    133          interrupt [0x2B] void T2_int (void)
    134          // Timer 2 Overflow
    135          {
   \   011C            T2_int:
   \   011C  C0E0              PUSH    ACC
   \   011E  C082              PUSH    DPL
   \   0120  C083              PUSH    DPH
   \   0122  C0D0              PUSH    PSW
   \   0124  EC                MOV     A,R4
   \   0125  C0E0              PUSH    ACC
   \   0127  ED                MOV     A,R5
   \   0128  C0E0              PUSH    ACC
   \   012A  EE                MOV     A,R6
   \   012B  C0E0              PUSH    ACC
   \   012D  EF                MOV     A,R7
   \   012E  C0E0              PUSH    ACC
    136              xdata char    i;
    137              
    138              ET2 = 0;                                            //Stoppar interrupt under avbrottsrutinen
   \   0130  C2AD              CLR     IE.5
    139              
    140              mainTimer++;
   \   0132  900001            MOV     DPTR,#mainTimer+1
   \   0135  E0                MOVX    A,@DPTR
   \   0136  04                INC     A
   \   0137  F0                MOVX    @DPTR,A
   \   0138  900000            MOV     DPTR,#mainTimer
   \   013B  7003              JNZ     ?0036
   \   013D  E0                MOVX    A,@DPTR
   \   013E  04                INC     A
   \   013F  F0                MOVX    @DPTR,A
   \   0140            ?0036:
    141              
    142              for (i=0 ; i<TM_MAX_TIMERS ; i++) {
   \   0140  7F00              MOV     R7,#0
   \   0142            ?0027:
   \   0142  EF                MOV     A,R7
   \   0143  24FB              ADD     A,#251
   \   0145  4048              JC      ?0026
   \   0147            ?0028:
    143                  if (timerStatus[i] == 1) {
   \   0147  EF                MOV     A,R7
   \   0148  240C              ADD     A,#LOW(timerStatus)
   \   014A  F582              MOV     DPL,A
   \   014C  E4                CLR     A
   \   014D  3400              ADDC    A,#HIGH(timerStatus)
   \   014F  F583              MOV     DPH,A
   \   0151  E0                MOVX    A,@DPTR
   \   0152  14                DEC     A
   \   0153  7037              JNZ     ?0031
   \   0155            ?0030:
    144                      if (mainTimer == timerLimits[i]) {
   \   0155  EF                MOV     A,R7
   \   0156  25E0              ADD     A,ACC
   \   0158  2402              ADD     A,#LOW(timerLimits)
   \   015A  F582              MOV     DPL,A
   \   015C  E4                CLR     A
   \   015D  3400              ADDC    A,#HIGH(timerLimits)
   \   015F  F583              MOV     DPH,A
   \   0161  E0                MOVX    A,@DPTR
   \   0162  FD                MOV     R5,A
   \   0163  A3                INC     DPTR
   \   0164  E0                MOVX    A,@DPTR
   \   0165  FC                MOV     R4,A
   \   0166  900001            MOV     DPTR,#mainTimer+1
   \   0169  E0                MOVX    A,@DPTR
   \   016A  6C                XRL     A,R4
   \   016B  7005              JNZ     ?0037
   \   016D  900000            MOV     DPTR,#mainTimer
   \   0170  E0                MOVX    A,@DPTR
   \   0171  6D                XRL     A,R5
   \   0172            ?0037:
   \   0172  7018              JNZ     ?0033
   \   0174            ?0032:
    145                          timerStatus[i] = 2;
   \   0174  EF                MOV     A,R7
   \   0175  240C              ADD     A,#LOW(timerStatus)
   \   0177  F582              MOV     DPL,A
   \   0179  E4                CLR     A
   \   017A  3400              ADDC    A,#HIGH(timerStatus)
   \   017C  F583              MOV     DPH,A
   \   017E  7402              MOV     A,#2
   \   0180  F0                MOVX    @DPTR,A
    146          //                SendRS232('T');
    147                          nActiveTimers--;
   \   0181  900011            MOV     DPTR,#nActiveTimers
   \   0184  E0                MOVX    A,@DPTR
   \   0185  14                DEC     A
   \   0186  F0                MOVX    @DPTR,A
    148                          if (!nActiveTimers) {
   \   0187  E0                MOVX    A,@DPTR
   \   0188  7002              JNZ     ?0035
   \   018A            ?0034:
    149                              T2I0 = 0;                           //Stänger av timer 2
   \   018A  C2C8              CLR     T2CON.0
   \   018C            ?0035:
   \   018C            ?0033:
   \   018C            ?0031:
   \   018C  0F                INC     R7
   \   018D  80B3              SJMP    ?0027
   \   018F            ?0026:
   \   018F  EF                MOV     A,R7
   \   0190  900000            MOV     DPTR,#$LOCBX T2_int
   \   0193  F0                MOVX    @DPTR,A
    150                          }
    151                      }
    152                  }
    153              }
    154              TF2 = 0;                                            //Nollställer reload-flagga
   \   0194  C2C6              CLR     192.6
    155              ET2 = 1;                                            //Möjliggör avbrott på nytt
   \   0196  D2AD              SETB    IE.5
    156          }    
   \   0198  D0E0              POP     ACC
   \   019A  FF                MOV     R7,A
   \   019B  D0E0              POP     ACC
   \   019D  FE                MOV     R6,A
   \   019E  D0E0              POP     ACC
   \   01A0  FD                MOV     R5,A
   \   01A1  D0E0              POP     ACC
   \   01A3  FC                MOV     R4,A
   \   01A4  D0D0              POP     PSW
   \   01A6  D083              POP     DPH
   \   01A8  D082              POP     DPL
   \   01AA  D0E0              POP     ACC
   \   01AC  32                RETI
   \   0000                    COMMON  INTVEC
   \   002B                    DS      43
   \   002B  02                DB      2
   \   002C  011C              DB      HIGH(T2_int),LOW(T2_int)
   \   0000                    RSEG    X_UDATA
   \   0000            mainTimer:
   \   0002                    DS      2
   \   0002            timerLimits:
   \   000C                    DS      10
   \   000C            timerStatus:
   \   0011                    DS      5
   \   0011            nActiveTimers:
   \   0012                    DS      1
   \   0012                    END


                                       S Y M B O L - T A B L E
                                       =======================


            #include file(s):

       [1]       c:\iar\ew\8051\inc\io517a.h
       [2]       c:\iar\ew\8051\inc\stdio.h
       [3]       c:\iar\ew\8051\inc\stdlib.h
       [4]       c:\iar\ew\8051\inc\string.h
       [5]       timer.h
       [6]       main.h
       [7]       filesystem.h
       [8]       rs232.h


            Symbol                     Type     Mem     Class   Defline   Refline(s)
            ------                     ----     ---     -----   -------   ----------

AC                                      bit             ---      166:1  
ACC                                     sfr             ---       14:1  
ADCON0                                  sfr             ---       99:1  
ADCON1                                  sfr             ---      100:1  
ADDATH                                  sfr             ---      101:1  
ADDATL                                  sfr             ---      102:1  
ADEX                                    bit             ---      133:1  
ADM                                     bit             ---      135:1  
ARCON                                   sfr             ---      105:1  
B                                       sfr             ---       15:1  
BD                                      bit             ---      131:1  
BSY                                     bit             ---      134:1  
CC4EN                                   sfr             ---       34:1  
CCEN                                    sfr             ---       33:1  
CCH1                                    sfr             ---       36:1  
CCH2                                    sfr             ---       38:1  
CCH3                                    sfr             ---       40:1  
CCH4                                    sfr             ---       42:1  
CCL1                                    sfr             ---       35:1  
CCL2                                    sfr             ---       37:1  
CCL3                                    sfr             ---       39:1  
CCL4                                    sfr             ---       41:1  
CLK                                     bit             ---      132:1  
CLRMSK                                  sfr             ---       74:1  
CMEN                                    sfr             ---       43:1  
CMH0                                    sfr             ---       45:1  
CMH1                                    sfr             ---       47:1  
CMH2                                    sfr             ---       49:1  
CMH3                                    sfr             ---       51:1  
CMH4                                    sfr             ---       53:1  
CMH5                                    sfr             ---       55:1  
CMH6                                    sfr             ---       57:1  
CMH7                                    sfr             ---       59:1  
CML0                                    sfr             ---       44:1  
CML1                                    sfr             ---       46:1  
CML2                                    sfr             ---       48:1  
CML3                                    sfr             ---       50:1  
CML4                                    sfr             ---       52:1  
CML5                                    sfr             ---       54:1  
CML6                                    sfr             ---       56:1  
CML7                                    sfr             ---       58:1  
CMSEL                                   sfr             ---       60:1  
COMCLRH                                 sfr             ---       72:1  
COMCLRL                                 sfr             ---       71:1  
COMSETH                                 sfr             ---       70:1  
COMSETL                                 sfr             ---       69:1  
CRCH                                    sfr             ---       62:1         70
CRCL                                    sfr             ---       61:1         69
CTCON                                   sfr             ---       63:1         62
CTRELH                                  sfr             ---       65:1  
CTRELL                                  sfr             ---       64:1  
CY                                      bit             ---      165:1  
DPH                                     sfr             ---       18:1  
DPL                                     sfr             ---       17:1  
DPSEL                                   sfr             ---       19:1  
EADC                                    bit             ---      205:1  
EAL                                     bit             ---      187:1  
ES0                                     bit             ---      190:1  
ET0                                     bit             ---      193:1  
ET1                                     bit             ---      191:1  
ET2                                     bit             ---      189:1         73      138      155
EX0                                     bit             ---      194:1  
EX1                                     bit             ---      192:1  
EX2                                     bit             ---      204:1  
EX3                                     bit             ---      203:1  
EX4                                     bit             ---      202:1  
EX5                                     bit             ---      201:1  
EX6                                     bit             ---      200:1  
EXEN2                                   bit             ---      198:1         71
EXF2                                    bit             ---      143:1         72
F0                                      bit             ---      167:1  
F1                                      bit             ---      171:1  
I2FR                                    bit             ---      156:1  
I3FR                                    bit             ---      155:1  
IADC                                    bit             ---      150:1  
IE0                                     bit             ---      182:1  
IE1                                     bit             ---      180:1  
IEN0                                    sfr             ---      114:1  
IEN1                                    sfr             ---      116:1  
IEN2                                    sfr             ---      118:1  
IEX2                                    bit             ---      149:1  
IEX3                                    bit             ---      148:1  
IEX4                                    bit             ---      147:1  
IEX5                                    bit             ---      146:1  
IEX6                                    bit             ---      145:1  
INT0                                    bit             ---      214:1  
INT1                                    bit             ---      213:1  
IP0                                     sfr             ---      115:1  
IP1                                     sfr             ---      117:1  
IRCON0                                  sfr             ---      119:1  
IRCON1                                  sfr             ---      120:1  
IT0                                     bit             ---      183:1  
IT1                                     bit             ---      181:1  
InitializeTimer                    function    code    public       59       36:5
KillTimer                          function    code    public       98       38:5      129
MD0                                     sfr             ---      106:1  
MD1                                     sfr             ---      107:1  
MD2                                     sfr             ---      108:1  
MD3                                     sfr             ---      109:1  
MD4                                     sfr             ---      110:1  
MD5                                     sfr             ---      111:1  
MX0                                     bit             ---      138:1  
MX1                                     bit             ---      137:1  
MX2                                     bit             ---      136:1  
OV                                      bit             ---      170:1  
P                                       bit             ---      172:1  
P0                                      sfr             ---       77:1  
P1                                      sfr             ---       78:1  
P2                                      sfr             ---       79:1  
P3                                      sfr             ---       80:1  
P4                                      sfr             ---       81:1  
P5                                      sfr             ---       82:1  
P6                                      sfr             ---       83:1  
P7                                      sfr             ---       84:1  
P8                                      sfr             ---       85:1  
PCON                                    sfr             ---       88:1  
PSW                                     sfr             ---       20:1  
RB80                                    bit             ---      225:1  
RD                                      bit             ---      209:1  
REN0                                    bit             ---      223:1  
RI0                                     bit             ---      227:1  
RS0                                     bit             ---      169:1  
RS1                                     bit             ---      168:1  
RXD                                     bit             ---      216:1  
S0BUF                                   sfr             ---       90:1  
S0CON                                   sfr             ---       89:1  
S0RELH                                  sfr             ---       94:1  
S0RELL                                  sfr             ---       93:1  
S1BUF                                   sfr             ---       92:1  
S1CON                                   sfr             ---       91:1  
S1RELH                                  sfr             ---       96:1  
S1RELL                                  sfr             ---       95:1  
SETMSK                                  sfr             ---       73:1  
SM0                                     bit             ---      220:1  
SM1                                     bit             ---      221:1  
SM20                                    bit             ---      222:1  
SP                                      sfr             ---       16:1  
SWDT                                    bit             ---      199:1        127
SYSCON                                  sfr             ---       22:1  
StartTimer                         function    code    public       80       37:5      123
T0                                      bit             ---      212:1  
T1                                      bit             ---      211:1  
T2CM                                    bit             ---      159:1  
T2CON                                   sfr             ---       68:1  
T2I0                                    bit             ---      161:1         67       91      103      149
T2I1                                    bit             ---      160:1         66
T2PS                                    bit             ---      154:1         63
T2R0                                    bit             ---      158:1         65
T2R1                                    bit             ---      157:1         64
T2_int                             function    code    public      135      242:1
TB80                                    bit             ---      224:1  
TCON                                    sfr             ---       25:1  
TF0                                     bit             ---      178:1  
TF1                                     bit             ---      176:1  
TF2                                     bit             ---      144:1         68      154
TH0                                     sfr             ---       29:1  
TH1                                     sfr             ---       30:1  
TH2                                     sfr             ---       67:1  
TI0                                     bit             ---      226:1  
TL0                                     sfr             ---       27:1  
TL1                                     sfr             ---       28:1  
TL2                                     sfr             ---       66:1  
TMOD                                    sfr             ---       26:1  
TR0                                     bit             ---      179:1  
TR1                                     bit             ---      177:1  
TXD                                     bit             ---      215:1  
TimedOut                           function    code    public      112       39:5      125
WDT                                     bit             ---      188:1        126
WDTREL                                  sfr             ---      124:1  
WR                                      bit             ---      210:1  
WaitFor                            function    code    public      120       40:5
XPAGE                                   sfr             ---       21:1  
div_t                                struct           typedef     38:3       96:3
ldiv_t                               struct           typedef     44:3      100:3
mainTimer                               int   xdata    public       49         89      140      144
nActiveTimers                          char   xdata    public       52         75       90       93      101
                                                                              102      147      148
timerLimits                           array   xdata    public       50         89      144
timerStatus                           array   xdata    public       51         83       88      100      106
                                                                              114      143      145


Errors: none
Warnings: none
Code size: 429
Constant size: 46
Static variable size: Data(0) Idata(0) Bit(0) Xdata(18) Pdata(0) Bdata(0)

